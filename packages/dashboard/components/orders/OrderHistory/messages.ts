import { OrderEventType } from '@core/api/constants';
import type { TFunction } from '@core/i18n';
import { OrderEventEmailType } from '@core/api/constants';
import type { OrderEventFragment } from '@core/api/graphql';

export const getEventMessage = (event: OrderEventFragment, t: TFunction) => {
  const getUserOrApp = () => {
    if (event.user) {
      return event.user.email;
    }
    if (event.app) {
      return event.app.name;
    }
  };

  switch (event.type) {
    case OrderEventType.Canceled:
      return t('dashboard.orderEvents.orderWasCancelled', 'Order was cancelled');
    case OrderEventType.AddedProducts:
      return t(
        'dashboard.orderEvents.productsWereAddedToAnOrder',
        'Products were added to an order'
      );
    case OrderEventType.DraftCreated:
      return t('dashboard.orderEvents.draftOrderWasCreated', 'Draft order was created');
    case OrderEventType.RemovedProducts:
      return t(
        'dashboard.orderEvents.productsWereRemovedFromAnOrder',
        'Products were deleted from an order'
      );
    case OrderEventType.EmailSent: {
      switch (event.emailType) {
        case OrderEventEmailType.DigitalLinks:
          return t(
            'dashboard.orderEvents.linksToTheOrdersDigitalGoodsWereSent',
            "Links to the order's digital goods were sent"
          );
        case OrderEventEmailType.FulfillmentConfirmation:
          return t(
            'dashboard.orderEvents.fulfillmentConfirmationWasSentToCustomer',
            'Fulfillment confirmation was sent to customer'
          );
        case OrderEventEmailType.Confirmed:
          return t(
            'dashboard.orderEvents.confirmOrderationWasSentToCustomer',
            'Order confirmation was sent to customer'
          );
        case OrderEventEmailType.PaymentConfirmation:
          return t(
            'dashboard.orderEvents.paymentConfirmationWasSentToCustomer',
            'Payment confirmation was sent to customer'
          );
        case OrderEventEmailType.ShippingConfirmation:
          return t(
            'dashboard.orderEvents.shippingDetailsWasSentToCustomer',
            'Shipping details was sent to customer'
          );
        case OrderEventEmailType.TrackingUpdated:
          return t(
            'dashboard.orderEvents.shippingTrackingNumberWasSentToCustomer',
            'Shipping tracking number was sent to customer'
          );
        case OrderEventEmailType.OrderCancel:
          return t(
            'dashboard.orderEvents.cancelOrderInformationWasSentToCustomer',
            'Order cancel information was sent to customer'
          );
        case OrderEventEmailType.OrderConfirmation:
          return t(
            'dashboard.orderEvents.orderPlacedInformationWasSentToCustomer',
            'Order placed information was sent to customer'
          );
        case OrderEventEmailType.OrderRefund:
          return t(
            'dashboard.orderEvents.refundOrderInformationWasSentToCustomer',
            'Order refund information was sent to customer'
          );
        default:
          return t('dashboard.orderEvents.unknownEmailSent', 'Unknown email was sent');
      }
    }
    case OrderEventType.FulfillmentCanceled:
      return t('dashboard.orderEvents.fulfillmentWasCancelled', 'Fulfillment was cancelled');
    case OrderEventType.InvoiceRequested:
      return t(
        'dashboard.orderEvents.invoiceWasRequested',
        'Invoice was requested by {{requestedBy}}',
        {
          requestedBy: getUserOrApp(),
        }
      );
    case OrderEventType.InvoiceGenerated:
      return t(
        'dashboard.orderEvents.invoiceWasGenerated',
        'Invoice no. {{invoiceNumber}} was generated by {{generatedBy}}',
        {
          generatedBy: getUserOrApp(),
          invoiceNumber: event.invoiceNumber,
        }
      );
    case OrderEventType.InvoiceUpdated:
      return t(
        'dashboard.orderEvents.invoiceWasUpdated',
        'Invoice no. {{invoiceNumber}} was updated',
        {
          invoiceNumber: event.invoiceNumber,
        }
      );
    case OrderEventType.InvoiceSent:
      return t(
        'dashboard.orderEvents.invoiceWasSent',
        'Invoice was sent to customer by {{sentBy}}',
        {
          sentBy: getUserOrApp(),
        }
      );
    case OrderEventType.FulfillmentAwaitsApproval:
      return t('dashboard.orderEvents.fulfillmentAwaitsApproval', 'Fulfillment awaits approval');
    case OrderEventType.FulfillmentFulfilledItems:
      return t('dashboard.orderEvents.fulfilledItems', 'Fulfilled {{quantity}} items', {
        quantity: event.quantity,
      });
    case OrderEventType.FulfillmentRefunded:
      return t('dashboard.orderEvents.orderWasRefunded', 'Order was refunded by {{refundedBy}}', {
        refundedBy: getUserOrApp(),
      });
    case OrderEventType.FulfillmentRestockedItems:
      return t('dashboard.orderEvents.restockedItems', 'Restocked {{quantity}} items', {
        quantity: event.quantity,
      });
    case OrderEventType.NoteAdded:
      return t('dashboard.orderEvents.noteWasAddedToOrder', 'Note was added to the order');
    case OrderEventType.OrderFullyPaid:
      return t('dashboard.orderEvents.orderWasFullyPaid', 'Order was fully paid');
    case OrderEventType.OrderMarkedAsPaid:
      return t('dashboard.orderEvents.orderWasMarkedAsPaid', 'Order was marked as paid');
    case OrderEventType.Other:
      return event.message;
    case OrderEventType.OversoldItems:
      return t('dashboard.orderEvents.oversoldItems', 'Oversold {{quantity}} items', {
        quantity: event.quantity,
      });
    case OrderEventType.PaymentCaptured:
      return t('dashboard.orderEvents.paymentWasCaptured', 'Payment was captured');
    case OrderEventType.PaymentFailed:
      return t('dashboard.orderEvents.paymentFailed', 'Payment failed');
    case OrderEventType.PaymentRefunded:
      return t('dashboard.orderEvents.paymentWasRefunded', 'Payment was refunded');
    case OrderEventType.PaymentVoided:
      return t('dashboard.orderEvents.paymentWasVoided', 'Payment was voided');
    case OrderEventType.Placed:
      return t('dashboard.orderEvents.orderWasPlaced', 'Order was placed');
    case OrderEventType.PlacedFromDraft:
      return t('dashboard.orderEvents.orderWasCreatedFromDraft', 'Order was created from draft');
    case OrderEventType.TrackingUpdated:
      return t(
        'dashboard.orderEvents.updatedFulfillmentGroupTrackingNumber',
        "Updated fulfillment group's tracking number"
      );
    case OrderEventType.UpdatedAddress:
      return t('dashboard.orderEvents.orderAddressWasUpdated', 'Order address was updated');
    case OrderEventType.PaymentAuthorized:
      return t('dashboard.orderEvents.paymentWasAuthorized', 'Payment was authorized');
    case OrderEventType.Confirmed:
      return t('dashboard.orderEvents.orderWasConfirmed', 'Order was confirmed');
    case OrderEventType.TransactionRefundRequested:
      return t(
        'dashboard.orderEvents.transactionRefundRequested',
        'Transaction refund requested'
      );
    case OrderEventType.TransactionVoidRequested:
      return t('dashboard.orderEvents.transactionVoidRequested', 'Transaction void requested');
    case OrderEventType.TransactionCaptureRequested:
      return t(
        'dashboard.orderEvents.transactionCaptureRequested',
        'Transaction capture requested'
      );
    case OrderEventType.ExternalServiceNotification:
      return event.message;
    default:
      return t('dashboard.orderEvents.unknownEvent', 'Unknown event');
  }
};
