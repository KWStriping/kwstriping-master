import * as m from '@paraglide/messages';
import { OrderEventType } from '@tempo/api/generated/constants';
import { OrderEventEmailType } from '@tempo/api/generated/constants';
import type { OrderEventFragment } from '@tempo/api/generated/graphql';

export const getEventMessage = (event: OrderEventFragment) => {
  const getUserOrApp = () => {
    if (event.user) {
      return event.user.email;
    }
    if (event.app) {
      return event.app.name;
    }
  };

  switch (event.type) {
    case OrderEventType.Canceled:
      return (m.dashboard_orderEvents_orderWasCancelled() ?? 'Order was cancelled');
    case OrderEventType.AddedProducts:
      return t(
        'dashboard_orderEvents_productsWereAddedToAnOrder',
        'Products were added to an order'
      );
    case OrderEventType.DraftCreated:
      return (m.dashboard_orderEvents_draftOrderWasCreated() ?? 'Draft order was created');
    case OrderEventType.RemovedProducts:
      return t(
        'dashboard_orderEvents_productsWereRemovedFromAnOrder',
        'Products were deleted from an order'
      );
    case OrderEventType.EmailSent: {
      switch (event.emailType) {
        case OrderEventEmailType.DigitalLinks:
          return t(
            'dashboard_orderEvents_linksToTheOrdersDigitalGoodsWereSent',
            "Links to the order's digital goods were sent"
          );
        case OrderEventEmailType.FulfillmentConfirmation:
          return t(
            'dashboard_orderEvents_fulfillmentConfirmationWasSentToCustomer',
            'Fulfillment confirmation was sent to customer'
          );
        case OrderEventEmailType.Confirmed:
          return t(
            'dashboard_orderEvents_confirmOrderationWasSentToCustomer',
            'Order confirmation was sent to customer'
          );
        case OrderEventEmailType.PaymentConfirmation:
          return t(
            'dashboard_orderEvents_paymentConfirmationWasSentToCustomer',
            'Payment confirmation was sent to customer'
          );
        case OrderEventEmailType.ShippingConfirmation:
          return t(
            'dashboard_orderEvents_shippingDetailsWasSentToCustomer',
            'Shipping details was sent to customer'
          );
        case OrderEventEmailType.TrackingUpdated:
          return t(
            'dashboard_orderEvents_shippingTrackingNumberWasSentToCustomer',
            'Shipping tracking number was sent to customer'
          );
        case OrderEventEmailType.OrderCancel:
          return t(
            'dashboard_orderEvents_cancelOrderInformationWasSentToCustomer',
            'Order cancel information was sent to customer'
          );
        case OrderEventEmailType.OrderConfirmation:
          return t(
            'dashboard_orderEvents_orderPlacedInformationWasSentToCustomer',
            'Order placed information was sent to customer'
          );
        case OrderEventEmailType.OrderRefund:
          return t(
            'dashboard_orderEvents_refundOrderInformationWasSentToCustomer',
            'Order refund information was sent to customer'
          );
        default:
          return (m.dashboard_orderEvents_unknownEmailSent() ?? 'Unknown email was sent');
      }
    }
    case OrderEventType.FulfillmentCanceled:
      return (m.dashboard_orderEvents_fulfillmentWasCancelled() ?? 'Fulfillment was cancelled');
    case OrderEventType.InvoiceRequested:
      return t(
        'dashboard_orderEvents_invoiceWasRequested',
        'Invoice was requested by {{requestedBy}}',
        {
          requestedBy: getUserOrApp(),
        }
      );
    case OrderEventType.InvoiceGenerated:
      return t(
        'dashboard_orderEvents_invoiceWasGenerated',
        'Invoice no. {{invoiceNumber}} was generated by {{generatedBy}}',
        {
          generatedBy: getUserOrApp(),
          invoiceNumber: event.invoiceNumber,
        }
      );
    case OrderEventType.InvoiceUpdated:
      return t(
        'dashboard_orderEvents_invoiceWasUpdated',
        'Invoice no. {{invoiceNumber}} was updated',
        {
          invoiceNumber: event.invoiceNumber,
        }
      );
    case OrderEventType.InvoiceSent:
      return t(
        'dashboard_orderEvents_invoiceWasSent',
        'Invoice was sent to customer by {{sentBy}}',
        {
          sentBy: getUserOrApp(),
        }
      );
    case OrderEventType.FulfillmentAwaitsApproval:
      return (m.dashboard_orderEvents_fulfillmentAwaitsApproval() ?? 'Fulfillment awaits approval');
    case OrderEventType.FulfillmentFulfilledItems:
      return (m.dashboard_orderEvents_fulfilledItems({
        quantity: event.quantity,
      }) ?? 'Fulfilled {{quantity}} items');
    case OrderEventType.FulfillmentRefunded:
      return (m.dashboard_orderEvents_orderWasRefunded({
        refundedBy: getUserOrApp(),
      }) ?? 'Order was refunded by {{refundedBy}}');
    case OrderEventType.FulfillmentRestockedItems:
      return (m.dashboard_orderEvents_restockedItems({
        quantity: event.quantity,
      }) ?? 'Restocked {{quantity}} items');
    case OrderEventType.NoteAdded:
      return (m.dashboard_orderEvents_noteWasAddedToOrder() ?? 'Note was added to the order');
    case OrderEventType.OrderFullyPaid:
      return (m.dashboard_orderEvents_orderWasFullyPaid() ?? 'Order was fully paid');
    case OrderEventType.OrderMarkedAsPaid:
      return (m.dashboard_orderEvents_orderWasMarkedAsPaid() ?? 'Order was marked as paid');
    case OrderEventType.Other:
      return event.message;
    case OrderEventType.OversoldItems:
      return (m.dashboard_orderEvents_oversoldItems({
        quantity: event.quantity,
      }) ?? 'Oversold {{quantity}} items');
    case OrderEventType.PaymentCaptured:
      return (m.dashboard_orderEvents_paymentWasCaptured() ?? 'Payment was captured');
    case OrderEventType.PaymentFailed:
      return (m.dashboard_orderEvents_paymentFailed() ?? 'Payment failed');
    case OrderEventType.PaymentRefunded:
      return (m.dashboard_orderEvents_paymentWasRefunded() ?? 'Payment was refunded');
    case OrderEventType.PaymentVoided:
      return (m.dashboard_orderEvents_paymentWasVoided() ?? 'Payment was voided');
    case OrderEventType.Placed:
      return (m.dashboard_orderEvents_orderWasPlaced() ?? 'Order was placed');
    case OrderEventType.PlacedFromDraft:
      return (m.dashboard_orderEvents_orderWasCreatedFromDraft() ?? 'Order was created from draft');
    case OrderEventType.TrackingUpdated:
      return t(
        'dashboard_orderEvents_updatedFulfillmentGroupTrackingNumber',
        "Updated fulfillment group's tracking number"
      );
    case OrderEventType.UpdatedAddress:
      return (m.dashboard_orderEvents_orderAddressWasUpdated() ?? 'Order address was updated');
    case OrderEventType.PaymentAuthorized:
      return (m.dashboard_orderEvents_paymentWasAuthorized() ?? 'Payment was authorized');
    case OrderEventType.Confirmed:
      return (m.dashboard_orderEvents_orderWasConfirmed() ?? 'Order was confirmed');
    case OrderEventType.TransactionRefundRequested:
      return t(
        'dashboard_orderEvents_transactionRefundRequested',
        'Transaction refund requested'
      );
    case OrderEventType.TransactionVoidRequested:
      return (m.dashboard_orderEvents_transactionVoidRequested() ?? 'Transaction void requested');
    case OrderEventType.TransactionCaptureRequested:
      return t(
        'dashboard_orderEvents_transactionCaptureRequested',
        'Transaction capture requested'
      );
    case OrderEventType.ExternalServiceNotification:
      return event.message;
    default:
      return (m.dashboard_orderEvents_unknownEvent() ?? 'Unknown event');
  }
};
