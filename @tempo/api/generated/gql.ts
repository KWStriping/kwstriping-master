/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation login($email: String!, $password: String!) {\n    obtainToken(authInput: { email: $email, password: $password }) {\n      result {\n        accessToken\n        refreshToken\n        csrfToken\n        user {\n          ...UserDetails\n        }\n      }\n      errors {\n        message\n        field\n        code\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  query AvailableExternalAuthentications {\n    shop {\n      id\n      availableExternalAuthentications {\n        id\n        name\n      }\n    }\n  }\n": types.AvailableExternalAuthenticationsDocument,
    "mutation FileUpload($file: Upload!) {\n  uploadFile(file: $file) {\n    result {\n      ...File\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.FileUploadDocument,
    "query PublicMetafields($id: ID!, $keys: [String!]!) {\n  app(id: $id) {\n    id\n    metafields(keys: $keys)\n  }\n}\n\nquery PrivateMetafields($id: ID!, $keys: [String!]!) {\n  app(id: $id) {\n    id\n    privateMetafields(keys: $keys)\n  }\n}\n\nquery PublicMetafieldsInferred($keys: [String!]!) {\n  app {\n    id\n    metafields(keys: $keys)\n  }\n}\n\nquery PrivateMetafieldsInferred($keys: [String!]!) {\n  app {\n    id\n    privateMetafields(keys: $keys)\n  }\n}\n\nmutation UpdatePublicMetadata($id: ID!, $input: [MetadataInput!]!, $keys: [String!]!) {\n  updateMetadata(id: $id, data: $input) {\n    result {\n      metafields(keys: $keys)\n    }\n    errors {\n      ...Error\n    }\n  }\n}\n\nmutation UpdatePrivateMetadata($id: ID!, $input: [MetadataInput!]!, $keys: [String!]!) {\n  updatePrivateMetadata(id: $id, data: $input) {\n    result {\n      privateMetafields(keys: $keys)\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.PublicMetafieldsDocument,
    "query TransactionProcessedEvents($id: ID!) {\n  transaction(id: $id) {\n    processedEvents: metafield(key: \"processedEvents\")\n  }\n}\n\nmutation TransactionUpdateProcessedEvents($id: ID!, $input: String!) {\n  updateMetadata(id: $id, data: {key: \"processedEvents\", value: $input}) {\n    __typename\n    errors {\n      field\n      message\n    }\n  }\n}": types.TransactionProcessedEventsDocument,
    "subscription TransactionActionRequestSubscription {\n  event {\n    ... on TransactionActionRequest {\n      transaction {\n        id\n        reference\n        type\n        amountAuthorized {\n          amount\n          currency\n        }\n        amountCharged {\n          amount\n        }\n        amountVoided {\n          amount\n        }\n        amountRefunded {\n          amount\n        }\n      }\n      action {\n        actionType\n        amount\n      }\n    }\n  }\n}\n\nfragment TransactionActionPayload on TransactionActionRequest {\n  transaction {\n    id\n    reference\n    type\n    amountAuthorized {\n      amount\n      currency\n    }\n    amountCharged {\n      amount\n    }\n    amountVoided {\n      amount\n    }\n    amountRefunded {\n      amount\n    }\n  }\n  action {\n    actionType\n    amount\n  }\n}": types.TransactionActionRequestSubscriptionDocument,
    "mutation CreateWebhooks($targetUrl: String!, $query: String) {\n  createWebhook(\n    data: {name: \"Checkout app payment notifications\", targetUrl: $targetUrl, events: [TRANSACTION_ACTION_REQUEST], isActive: true, query: $query}\n  ) {\n    __typename\n    errors {\n      ...Error\n    }\n  }\n}\n\nquery CheckWebhooks {\n  app {\n    webhooks {\n      id\n      targetUrl\n    }\n  }\n}": types.CreateWebhooksDocument,
    "fragment Address on Address {\n  id\n  phone\n  firstName\n  lastName\n  companyName\n  streetAddress1\n  streetAddress2\n  city\n  cityArea\n  postalCode\n  isDefaultBillingAddress\n  isDefaultShippingAddress\n  countryArea\n  country {\n    code\n    name\n  }\n  coordinates {\n    latitude\n    longitude\n  }\n}": types.AddressFragmentDoc,
    "fragment Attribute on Attribute {\n  id\n  name\n  slug\n  type\n  visibleInStorefront\n  filterableInDashboard\n  filterableInStorefront\n  unit\n  inputType\n}": types.AttributeFragmentDoc,
    "fragment AttributeDetails on Attribute {\n  ...Attribute\n  ...Metadata\n  availableInGrid\n  inputType\n  entityType\n  unit\n  storefrontSearchPosition\n  valueRequired\n}": types.AttributeDetailsFragmentDoc,
    "fragment AttributeFilterChoice on Value {\n  id\n  name\n  slug\n  translation {\n    name\n  }\n}": types.AttributeFilterChoiceFragmentDoc,
    "fragment AttributeFilter on Attribute {\n  id\n  inputType\n  name\n  translation {\n    id\n    name\n  }\n  slug\n  withChoices\n  values(first: 20) {\n    edges {\n      node {\n        ...AttributeFilterChoice\n      }\n      cursor\n    }\n  }\n}": types.AttributeFilterFragmentDoc,
    "fragment CategoryBasic on Category {\n  id\n  name\n  slug\n  translation {\n    id\n    name\n  }\n}": types.CategoryBasicFragmentDoc,
    "fragment CategoryDetails on Category {\n  id\n  ...CategoryBasic\n  seoTitle\n  seoDescription\n  description\n  translation {\n    id\n    description\n  }\n  backgroundImage {\n    ...Image\n  }\n  ancestors(first: 5) {\n    edges {\n      node {\n        ...CategoryBasic\n      }\n    }\n  }\n  ...Metadata\n}": types.CategoryDetailsFragmentDoc,
    "fragment Channel on Channel {\n  id\n  name\n  slug\n  countries {\n    code\n  }\n  isActive\n  currencyCode\n  defaultCountry {\n    code\n    name\n  }\n  stockSettings {\n    allocationStrategy\n  }\n}": types.ChannelFragmentDoc,
    "fragment CheckoutError on CheckoutError {\n  message\n  field\n  code\n}": types.CheckoutErrorFragmentDoc,
    "fragment Checkout on Checkout {\n  id\n  customerEmail\n  customerFirstName\n  customerLastName\n  customerPhone\n  voucherCode\n  billingAddress {\n    ...Address\n  }\n  shippingAddress {\n    ...Address\n  }\n  fulfillmentMethod {\n    ...FulfillmentMethod\n  }\n  isShippingRequired\n  availableShippingMethods {\n    ...FulfillmentMethod\n  }\n  availablePaymentGateways {\n    id\n    name\n    config {\n      field\n      value\n    }\n  }\n  lines {\n    ...CheckoutLine\n  }\n  discount {\n    ...Money\n  }\n  discountName\n  translatedDiscountName\n  giftCards {\n    ...GiftCard\n  }\n  subtotalPrice {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  channel {\n    id\n    slug\n  }\n  user {\n    id\n    email\n    firstName\n    lastName\n  }\n  fulfillmentDeadline\n  pointsOfContact {\n    ...PointOfContact\n  }\n  validationErrors {\n    field\n    message\n  }\n}": types.CheckoutFragmentDoc,
    "fragment CheckoutLine on CheckoutLine {\n  id\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    ...Money\n  }\n  product {\n    id\n    name\n    parent {\n      id\n      name\n      translation {\n        id\n        name\n      }\n      slug\n      thumbnail {\n        ...Image\n      }\n      media {\n        alt\n        type\n        url(size: 72)\n      }\n    }\n    attributes(variantSelection: ALL) {\n      values {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n    pricing {\n      price {\n        gross {\n          ...Money\n        }\n      }\n    }\n    translation {\n      id\n      name\n    }\n    media {\n      alt\n      type\n      url(size: 72)\n    }\n  }\n  quantity\n}": types.CheckoutLineFragmentDoc,
    "fragment CollectionBasic on Collection {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  slug\n}": types.CollectionBasicFragmentDoc,
    "fragment CollectionDetails on Collection {\n  id\n  ...CollectionBasic\n  seoTitle\n  seoDescription\n  description\n  translation {\n    id\n    description\n  }\n  backgroundImage {\n    ...Image\n  }\n  ...Metadata\n  channelListings {\n    id\n    isPublished\n    publishedAt\n    channel {\n      id\n      name\n    }\n  }\n}": types.CollectionDetailsFragmentDoc,
    "fragment FulfillmentMethod on FulfillmentMethod {\n  ... on ShippingMethod {\n    id\n    name\n    description\n    translation {\n      id\n      name\n      description\n    }\n    price {\n      ...Money\n    }\n    minimumDeliveryDays\n    maximumDeliveryDays\n  }\n  ... on Warehouse {\n    id\n  }\n}": types.FulfillmentMethodFragmentDoc,
    "fragment ErrorDetails on CheckoutError {\n  field\n  message\n  code\n}": types.ErrorDetailsFragmentDoc,
    "fragment Error on ErrorInterface {\n  message\n  field\n  code\n}": types.ErrorFragmentDoc,
    "fragment File on File {\n  url\n  contentType\n}": types.FileFragmentDoc,
    "fragment GiftCard on GiftCard {\n  displayCode\n  id\n  currentBalance {\n    ...Money\n  }\n}": types.GiftCardFragmentDoc,
    "fragment HomepageBlock on MenuItem {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  page {\n    id\n    content\n    title\n    translation {\n      content\n      title\n    }\n  }\n}": types.HomepageBlockFragmentDoc,
    "fragment Image on Image {\n  url\n  alt\n}": types.ImageFragmentDoc,
    "fragment MenuItem on MenuItem {\n  id\n  name\n  level\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  url\n}": types.MenuItemFragmentDoc,
    "fragment MenuItemWithChildren on MenuItem {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  children {\n    ...MenuItem\n    children {\n      ...MenuItem\n    }\n  }\n  url\n}": types.MenuItemWithChildrenFragmentDoc,
    "fragment MetadataItem on MetadataItem {\n  key\n  value\n}\n\nfragment Metadata on ObjectWithMetadata {\n  metadata {\n    ...MetadataItem\n  }\n  privateMetadata {\n    ...MetadataItem\n  }\n}": types.MetadataItemFragmentDoc,
    "fragment Money on Money {\n  currency\n  amount\n}": types.MoneyFragmentDoc,
    "fragment Order on Order {\n  id\n  createdAt\n  number\n  status\n  userEmail\n  isPaid\n  shippingTaxRate\n  shippingMethodName\n  privateMetafield(key: \"payment\")\n  discounts {\n    type\n    name\n    amount {\n      ...Money\n    }\n  }\n  shippingAddress {\n    ...Address\n  }\n  billingAddress {\n    ...Address\n  }\n  fulfillmentMethod {\n    ...ShippingMethod\n  }\n  total {\n    currency\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  voucher {\n    code\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n  }\n  lines {\n    ...OrderLine\n  }\n  totalBalance {\n    ...Money\n  }\n  totalCaptured {\n    ...Money\n  }\n}": types.OrderFragmentDoc,
    "fragment OrderLine on OrderLine {\n  id\n  isShippingRequired\n  productName\n  quantity\n  taxRate\n  quantity\n  quantityFulfilled\n  quantityToFulfill\n  allocations {\n    id\n    quantity\n    warehouse {\n      id\n      name\n    }\n  }\n  product {\n    id\n    name\n    sku\n    preorder {\n      endDate\n    }\n    category {\n      name\n    }\n    productKlass {\n      isDigital\n      kind\n    }\n    trackInventory\n    stocks {\n      ...Stock\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    gross {\n      ...Money\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n}": types.OrderLineFragmentDoc,
    "fragment PageInfo on PageInfo {\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  endCursor\n}": types.PageInfoFragmentDoc,
    "fragment PointOfContact on PointOfContact {\n  id\n  firstName\n  lastName\n  email\n  phone\n  notes\n}": types.PointOfContactFragmentDoc,
    "fragment ProductCard on Product {\n  id\n  slug\n  name\n  translation {\n    id\n    name\n  }\n  thumbnail {\n    ...Image\n  }\n  category {\n    id\n    name\n    translation {\n      id\n      name\n    }\n  }\n  media {\n    url\n    alt\n    type\n  }\n  attributes {\n    slug\n    values {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}": types.ProductCardFragmentDoc,
    "fragment ProductVariant on Product {\n  id\n  name\n  slug\n}\n\nfragment ProductAncestor on AbstractProduct {\n  id\n  name\n  slug\n  variants {\n    ...ProductVariant\n  }\n}\n\nfragment BaseProductDetails on Product {\n  id\n  name\n  slug\n  description\n  seoDescription\n  seoTitle\n  isAvailableForPurchase\n  translation {\n    id\n    description\n    name\n  }\n  attributes {\n    ...AttributeDetails\n  }\n  category {\n    ...CategoryBasic\n  }\n  media {\n    ...ProductMediaItem\n  }\n  thumbnail {\n    ...Image\n  }\n  category {\n    name\n  }\n}\n\nfragment AbstractProductDetails on AbstractProduct {\n  ...BaseProductDetails\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n  ancestors {\n    ...ProductAncestor\n  }\n  variants {\n    ...ProductVariant\n  }\n}\n\nfragment ConcreteProductDetails on ConcreteProduct {\n  ...BaseProductDetails\n  quantityAvailable\n  ancestors {\n    ...ProductAncestor\n  }\n  pricing {\n    price {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nfragment ProductDetails on Product {\n  ... on ConcreteProduct {\n    ...ConcreteProductDetails\n  }\n  ... on AbstractProduct {\n    ...AbstractProductDetails\n  }\n}": types.ProductVariantFragmentDoc,
    "fragment ProductMediaItem on ProductMediaItem {\n  id\n  alt\n  sortOrder\n  url\n  type\n  oembedData\n}": types.ProductMediaItemFragmentDoc,
    "fragment SelectedAttributeDetails on Attribute {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  type\n  unit\n  values {\n    edges {\n      node {\n        id\n        name\n        translation {\n          id\n          name\n          richText\n        }\n        value\n      }\n    }\n  }\n}": types.SelectedAttributeDetailsFragmentDoc,
    "fragment ShippingMethod on ShippingMethod {\n  name\n  minimumDeliveryDays\n  maximumDeliveryDays\n}": types.ShippingMethodFragmentDoc,
    "fragment Stock on Stock {\n  id\n  quantity\n  quantityAllocated\n  warehouse {\n    ...Warehouse\n  }\n}": types.StockFragmentDoc,
    "fragment TransactionEvent on TransactionEvent {\n  name\n  reference\n}": types.TransactionEventFragmentDoc,
    "fragment TransactionItem on TransactionItem {\n  id\n  reference\n  amountVoided {\n    ...Money\n  }\n  amountRefunded {\n    ...Money\n  }\n  amountCharged {\n    ...Money\n  }\n  amountAuthorized {\n    ...Money\n  }\n  events {\n    ...TransactionEvent\n  }\n}": types.TransactionItemFragmentDoc,
    "fragment UserBase on User {\n  id\n  email\n  firstName\n  lastName\n  isStaff\n  userPermissions {\n    ...UserPermission\n  }\n  avatar {\n    url\n  }\n}": types.UserBaseFragmentDoc,
    "fragment UserDetails on User {\n  ...UserBase\n  metadata {\n    key\n    value\n  }\n  defaultShippingAddress {\n    ...Address\n  }\n  defaultBillingAddress {\n    ...Address\n  }\n  addresses {\n    ...Address\n  }\n}": types.UserDetailsFragmentDoc,
    "fragment UserPermission on UserPermission {\n  code\n  name\n}": types.UserPermissionFragmentDoc,
    "fragment ValidationRules on AddressValidationData {\n  addressFormat\n  allowedFields\n  requiredFields\n  countryAreaType\n  postalCodeType\n  cityType\n  countryAreaChoices {\n    raw\n    verbose\n  }\n}": types.ValidationRulesFragmentDoc,
    "fragment Warehouse on Warehouse {\n  id\n  name\n}": types.WarehouseFragmentDoc,
    "mutation AddressDelete($id: ID!) {\n  deleteAddress(id: $id) {\n    user {\n      addresses {\n        ...Address\n      }\n    }\n  }\n}": types.AddressDeleteDocument,
    "mutation AddressSetDefault($addressID: ID!, $userID: ID!, $addressType: AddressType!) {\n  setDefaultAddress(addressId: $addressID, type: $addressType, userId: $userID) {\n    __typename\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": types.AddressSetDefaultDocument,
    "mutation CheckoutAddProductLine($checkoutId: ID!, $productId: ID!) {\n  addCheckoutLines(id: $checkoutId, lines: [{quantity: 1, productId: $productId}]) {\n    result {\n      ...Checkout\n    }\n    errors {\n      message\n      ... on CheckoutError {\n        code\n        field\n      }\n    }\n  }\n}": types.CheckoutAddProductLineDocument,
    "mutation CheckoutAddPromoCode($id: ID!, $promoCode: String!) {\n  addPromoCodeToCheckout(id: $id, promoCode: $promoCode) {\n    result {\n      ...Checkout\n    }\n    errors {\n      message\n      field\n    }\n  }\n}": types.CheckoutAddPromoCodeDocument,
    "mutation CheckoutBillingAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateCheckoutBillingAddress(data: $address, id: $id) {\n    result {\n      ...Checkout\n    }\n    errors {\n      field\n      message\n    }\n  }\n}": types.CheckoutBillingAddressUpdateDocument,
    "mutation completeCheckout($checkoutId: ID!, $paymentData: JSONString) {\n  completeCheckout(id: $checkoutId, paymentData: $paymentData) {\n    order {\n      id\n      status\n      billingAddress {\n        id\n        ...Address\n      }\n      shippingAddress {\n        id\n        ...Address\n      }\n    }\n    confirmationNeeded\n    confirmationData\n    errors {\n      field\n      message\n    }\n  }\n}": types.CompleteCheckoutDocument,
    "mutation CheckoutContactInfoUpdate($id: ID!, $input: CheckoutContactInfoUpdateInput!) {\n  updateCheckoutContactInfo(data: $input, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.CheckoutContactInfoUpdateDocument,
    "mutation createCheckoutPayment($checkoutId: ID!, $paymentInput: PaymentInput!) {\n  createCheckoutPayment(id: $checkoutId, data: $paymentInput) {\n    payment {\n      id\n      total {\n        ...Money\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": types.CreateCheckoutPaymentDocument,
    "mutation attachCustomerToCheckout($id: ID!) {\n  attachCustomerToCheckout(id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.AttachCustomerToCheckoutDocument,
    "mutation detachCustomerFromCheckout($id: ID!) {\n  detachCustomerFromCheckout(id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.DetachCustomerFromCheckoutDocument,
    "mutation updateCheckoutFulfillmentMethod($id: ID!, $fulfillmentMethodId: ID!, $fulfillmentDeadline: DateTime) {\n  updateCheckoutFulfillmentMethod(\n    id: $id\n    fulfillmentMethodId: $fulfillmentMethodId\n    fulfillmentDeadline: $fulfillmentDeadline\n  ) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.UpdateCheckoutFulfillmentMethodDocument,
    "mutation CheckoutLineDelete($checkoutId: ID!, $lineId: ID!) {\n  deleteCheckoutLine(id: $checkoutId, lineId: $lineId) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.CheckoutLineDeleteDocument,
    "mutation CheckoutLineUpdate($id: ID!, $lines: [CheckoutLineUpdateInput!]!) {\n  updateCheckoutLines(id: $id, lines: $lines) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.CheckoutLineUpdateDocument,
    "mutation updateCheckoutLines($checkoutId: ID!, $lines: [CheckoutLineUpdateInput!]!) {\n  updateCheckoutLines(id: $checkoutId, lines: $lines) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.UpdateCheckoutLinesDocument,
    "mutation removePromoCodeFromCheckout($id: ID!, $promoCode: String, $promoCodeId: ID) {\n  removePromoCodeFromCheckout(\n    id: $id\n    promoCode: $promoCode\n    promoCodeId: $promoCodeId\n  ) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.RemovePromoCodeFromCheckoutDocument,
    "mutation CheckoutShippingAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateCheckoutShippingAddress(data: $address, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.CheckoutShippingAddressUpdateDocument,
    "mutation CheckoutShippingMethodUpdate($id: ID!, $shippingMethodId: ID!) {\n  updateCheckoutShippingMethod(shippingMethodId: $shippingMethodId, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}": types.CheckoutShippingMethodUpdateDocument,
    "mutation accountConfirm($email: String!, $token: String!) {\n  confirmAccount(email: $email, token: $token) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.AccountConfirmDocument,
    "mutation confirmEmailChange($token: String!, $channel: String!) {\n  confirmEmailChange(token: $token, channel: $channel) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.ConfirmEmailChangeDocument,
    "mutation createAccountAddress($input: AddressUpdateInput!) {\n  addAddress(data: $input) {\n    address {\n      ...Address\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.CreateAccountAddressDocument,
    "mutation CreateOrder($id: ID!) {\n  createOrderFromCheckout(id: $id) {\n    result {\n      ...Order\n    }\n  }\n}": types.CreateOrderDocument,
    "mutation SetAddressDefault($id: ID!, $type: AddressType!) {\n  setDefaultAddress(addressId: $id, type: $type) {\n    result {\n      addresses {\n        ...Address\n      }\n    }\n    errors {\n      code\n      message\n    }\n  }\n}": types.SetAddressDefaultDocument,
    "mutation deleteAccount($token: String!) {\n  deleteAccount(token: $token) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.DeleteAccountDocument,
    "mutation deleteAddress($addressId: ID!) {\n  deleteAddress(id: $addressId) {\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.DeleteAddressDocument,
    "mutation externalAuthenticationUrl($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  externalAuthenticationUrl(pluginInput: {pluginId: $pluginId, data: $input}) {\n    data\n    errors {\n      ...Error\n    }\n  }\n}": types.ExternalAuthenticationUrlDocument,
    "mutation refreshExternalToken($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  refreshToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    errors {\n      ...Error\n    }\n    result {\n      accessToken\n      csrfToken\n    }\n  }\n}": types.RefreshExternalTokenDocument,
    "mutation externalRefreshWithUser($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  refreshToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.ExternalRefreshWithUserDocument,
    "mutation verifyExternalToken($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  verifyToken(token: \"\", pluginInput: {pluginId: $pluginId, data: $input}) {\n    isValid\n    payload {\n      __typename\n    }\n    user {\n      ...UserDetails\n      userPermissions {\n        code\n        name\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.VerifyExternalTokenDocument,
    "mutation loginWithoutDetails($email: String!, $password: String!) {\n  obtainToken(authInput: {email: $email, password: $password}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserBase\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}": types.LoginWithoutDetailsDocument,
    "mutation logout($input: AuthPluginInput) {\n  logout(pluginInput: $input) {\n    data\n    errors {\n      ...Error\n    }\n  }\n}": types.LogoutDocument,
    "mutation ObtainExternalAccessTokens($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  obtainToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}": types.ObtainExternalAccessTokensDocument,
    "mutation OrderUpdatePaymentMetafield($orderId: ID!, $data: String!) {\n  updatePrivateMetadata(id: $orderId, data: {key: \"payment\", value: $data}) {\n    __typename\n  }\n}": types.OrderUpdatePaymentMetafieldDocument,
    "mutation PasswordChange($newPassword: String!, $oldPassword: String!) {\n  changePassword(newPassword: $newPassword, oldPassword: $oldPassword) {\n    __typename\n    errors {\n      field\n      message\n    }\n  }\n}": types.PasswordChangeDocument,
    "mutation refreshToken($csrfToken: String!, $refreshToken: String, $pluginInput: AuthPluginInput) {\n  refreshToken(\n    csrfToken: $csrfToken\n    refreshToken: $refreshToken\n    pluginInput: $pluginInput\n  ) {\n    result {\n      accessToken\n      csrfToken\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.RefreshTokenDocument,
    "mutation refreshTokenWithUser($csrfToken: String!) {\n  refreshToken(csrfToken: $csrfToken) {\n    result {\n      accessToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.RefreshTokenWithUserDocument,
    "mutation register($input: UserCreationInput!) {\n  createUser(data: $input) {\n    errors {\n      ...Error\n    }\n    requiresConfirmation\n  }\n}": types.RegisterDocument,
    "mutation requestAccountDeletion($channel: String!) {\n  requestAccountDeletion(channel: $channel) {\n    __typename\n  }\n}": types.RequestAccountDeletionDocument,
    "mutation RequestEmailChange($newEmail: String!, $password: String!, $channel: String) {\n  requestEmailChange(newEmail: $newEmail, password: $password, channel: $channel) {\n    result {\n      email\n    }\n    errors {\n      code\n      field\n      message\n    }\n  }\n}": types.RequestEmailChangeDocument,
    "mutation requestPasswordReset($email: String!, $channel: String!) {\n  requestPasswordReset(email: $email, channel: $channel)\n}": types.RequestPasswordResetDocument,
    "mutation setAccountDefaultAddress($id: ID!, $type: AddressType!) {\n  setDefaultAddress(addressId: $id, type: $type) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.SetAccountDefaultAddressDocument,
    "mutation setPassword($token: String!, $email: String!, $password: String!) {\n  setPassword(token: $token, email: $email, password: $password) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.SetPasswordDocument,
    "mutation TransactionCreate($id: ID!, $transaction: TransactionCreationInput!, $transactionEvent: TransactionEventInput) {\n  createTransaction(\n    id: $id\n    transaction: $transaction\n    transactionEvent: $transactionEvent\n  ) {\n    result {\n      id\n    }\n  }\n}": types.TransactionCreateDocument,
    "mutation TransactionUpdate($id: ID!, $transaction: TransactionUpdateInput!, $transactionEvent: TransactionEventInput) {\n  updateTransaction(\n    id: $id\n    transaction: $transaction\n    transactionEvent: $transactionEvent\n  ) {\n    result {\n      id\n    }\n  }\n}": types.TransactionUpdateDocument,
    "mutation updateUser($input: UserUpdateInput!) {\n  updateUser(data: $input) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.UpdateUserDocument,
    "mutation updateUserAddress($input: AddressUpdateInput!, $id: ID!) {\n  updateAddress(data: $input, id: $id) {\n    address {\n      ...Address\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.UpdateUserAddressDocument,
    "mutation userAddressCreate($address: AddressUpdateInput!, $type: AddressType) {\n  addAddress(type: $type, data: $address) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.UserAddressCreateDocument,
    "mutation userAddressDelete($id: ID!) {\n  deleteAddress(id: $id) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.UserAddressDeleteDocument,
    "mutation userAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateAddress(id: $id, data: $address) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.UserAddressUpdateDocument,
    "mutation verifyToken($token: String!) {\n  verifyToken(token: $token) {\n    isValid\n    payload {\n      accessToken\n      refreshToken\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}": types.VerifyTokenDocument,
    "query addressValidationRules($countryCode: CountryCode!) {\n  addressValidationRules(countryCode: $countryCode) {\n    ...ValidationRules\n  }\n}": types.AddressValidationRulesDocument,
    "query App {\n  app {\n    id\n    name\n  }\n}": types.AppDocument,
    "query AvailableShippingMethods($channel: String!) {\n  shop {\n    id\n    availableShippingMethods(channelSlug: $channel) {\n      id\n      translation {\n        id\n        name\n      }\n      price {\n        ...Money\n      }\n    }\n  }\n}": types.AvailableShippingMethodsDocument,
    "query CategoryBySlug($slug: String!) {\n  category(slug: $slug) {\n    ...CategoryDetails\n  }\n}": types.CategoryBySlugDocument,
    "query CategoryPaths($after: String) {\n  categories(first: 100, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}": types.CategoryPathsDocument,
    "query Channel($id: ID!) {\n  channel(id: $id) {\n    ...Channel\n  }\n}": types.ChannelDocument,
    "query ChannelBySlug($slug: String!) {\n  channel(slug: $slug) {\n    ...Channel\n  }\n}": types.ChannelBySlugDocument,
    "query Channels {\n  channels {\n    ...Channel\n  }\n}": types.ChannelsDocument,
    "query Checkout($id: ID!) {\n  checkout(id: $id) {\n    ...Checkout\n  }\n}": types.CheckoutDocument,
    "query CollectionBySlug($slug: String!, $channel: String!) {\n  collection(slug: $slug, channel: $channel) {\n    id\n    ...CollectionDetails\n    backgroundImage {\n      ...Image\n    }\n  }\n}": types.CollectionBySlugDocument,
    "query CollectionPaths($after: String, $channel: String) {\n  collections(first: 20, channel: $channel, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}": types.CollectionPathsDocument,
    "query CurrentUserDetails {\n  me {\n    id\n    lastLogin\n    dateJoined\n    email\n    firstName\n    lastName\n    avatar {\n      ...Image\n    }\n    orders {\n      totalCount\n    }\n  }\n}": types.CurrentUserDetailsDocument,
    "query FilteringAttributes($filter: AttributeFilter!, $channel: String!) {\n  attributes(filters: $filter, first: 100, channel: $channel) {\n    totalCount\n    edges {\n      node {\n        ...AttributeFilter\n      }\n    }\n  }\n}": types.FilteringAttributesDocument,
    "query FooterMenu($channel: String!) {\n  menu(slug: \"footer\", channel: $channel) {\n    id\n    items {\n      children {\n        ...MenuItem\n      }\n      ...MenuItem\n    }\n  }\n}": types.FooterMenuDocument,
    "query HomepageBlocks($slug: String!, $channel: String!) {\n  menu(channel: $channel, slug: $slug) {\n    id\n    name\n    slug\n    items {\n      ...HomepageBlock\n    }\n  }\n}": types.HomepageBlocksDocument,
    "query MainMenu($channel: String!) {\n  menu(slug: \"navbar\", channel: $channel) {\n    id\n    items {\n      ...MenuItemWithChildren\n    }\n  }\n}": types.MainMenuDocument,
    "query Order($id: ID!) {\n  order(id: $id) {\n    ...Order\n  }\n}": types.OrderDocument,
    "query OrderPaymentDetails($id: ID!) {\n  order(id: $id) {\n    authorizeStatus\n    chargeStatus\n    isPaid\n    status\n    privateMetafield(key: \"payment\")\n  }\n}": types.OrderPaymentDetailsDocument,
    "query OrderTransactions($id: ID!) {\n  order(id: $id) {\n    transactions {\n      ...TransactionItem\n    }\n  }\n}": types.OrderTransactionsDocument,
    "query Orders($before: String, $after: String) {\n  me {\n    orders(first: 10, before: $before, after: $after) {\n      edges {\n        cursor\n        node {\n          ...Order\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n}": types.OrdersDocument,
    "query Page($slug: String!) {\n  page(slug: $slug) {\n    id\n    title\n    translation {\n      id\n      title\n      content\n    }\n    seoTitle\n    seoDescription\n    slug\n    createdAt\n    content\n  }\n}": types.PageDocument,
    "query PagePaths($after: String) {\n  pages(first: 100, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}": types.PagePathsDocument,
    "query ProductById($id: ID!, $channel: String!) {\n  product(id: $id, channel: $channel) {\n    ...ProductDetails\n  }\n}": types.ProductByIdDocument,
    "query ProductCollection($before: String, $after: String, $first: Int = 4, $filter: ProductFilter, $sortBy: ProductOrderingInput, $channel: String!) {\n  products(\n    first: $first\n    channel: $channel\n    after: $after\n    before: $before\n    filters: $filter\n    sortBy: $sortBy\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        ...ProductCard\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}": types.ProductCollectionDocument,
    "query ProductPaths($after: String, $channel: String) {\n  products(first: 100, channel: $channel, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}": types.ProductPathsDocument,
    "query User {\n  me {\n    ...UserDetails\n    checkout {\n      ...Checkout\n    }\n  }\n}\n\nquery UserWithoutDetails {\n  me {\n    ...UserBase\n  }\n}": types.UserDocument,
    "query CurrentUserAddresses {\n  me {\n    id\n    addresses {\n      ...Address\n    }\n  }\n}": types.CurrentUserAddressesDocument,
    "\n  mutation DeleteProducts($ids: [ID!]!) {\n    deleteProducts(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.DeleteProductsDocument,
    "\n  mutation ProductCreate($input: ProductCreationInput!) {\n    createProduct(data: $input) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n      result {\n        id\n      }\n    }\n  }\n": types.ProductCreateDocument,
    "\n  query SearchValues($id: ID, $after: String, $first: Int!, $query: String!) {\n    attribute(id: $id) {\n      id\n      values(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...ValueDetails\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n": types.SearchValuesDocument,
    "\n  query SearchAttributes($after: String, $first: Int!, $query: String!) {\n    search: attributes(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchAttributesDocument,
    "\n  mutation ProductExport($input: ExportProductsInput!) {\n    exportProducts(data: $input) {\n      result {\n        ...ExportFile\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ProductExportDocument,
    "\n  mutation UpdateValueTranslations(\n    $id: ID!\n    $input: ValueTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateValue(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        richText\n        translation(languageCode: $language) {\n          id\n          name\n          richText\n        }\n      }\n    }\n  }\n": types.UpdateValueTranslationsDocument,
    "\n  mutation UpdateSaleTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateSale(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            code\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n": types.UpdateSaleTranslationsDocument,
    "\n  mutation UpdateShippingMethodTranslations(\n    $id: ID!\n    $input: ShippingPriceTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateShippingPrice(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        translation(languageCode: $language) {\n          id\n          language {\n            language\n          }\n          name\n          description\n        }\n      }\n    }\n  }\n": types.UpdateShippingMethodTranslationsDocument,
    "\n  mutation UpdateVoucherTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateVoucher(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            code\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n": types.UpdateVoucherTranslationsDocument,
    "\n  query Home(\n    $channel: String!\n    $datePeriod: DateRangeInput!\n    $PERMISSION_MANAGE_PRODUCTS: Boolean!\n    $PERMISSION_MANAGE_ORDERS: Boolean!\n  ) {\n    salesToday: ordersTotal(period: TODAY, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      gross {\n        amount\n        currency\n      }\n    }\n    ordersToday: orders(filters: { created: $datePeriod }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToConfirm: orders(filters: { status: UNCONFIRMED }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToFulfill: orders(filters: { status: READY_TO_FULFILL }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToCapture: orders(filters: { status: READY_TO_CAPTURE }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    productsOutOfStock: products(\n      filters: { stockAvailability: OUT_OF_STOCK }\n      channel: $channel\n    ) {\n      totalCount\n    }\n    productTopToday: reportProductSales(period: TODAY, first: 5, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_PRODUCTS) {\n      edges {\n        node {\n          ...TopProduct\n        }\n      }\n    }\n    activities: homepageEvents(last: 10) @include(if: $PERMISSION_MANAGE_ORDERS) {\n      edges {\n        node {\n          ...Activity\n          amount\n          date\n          email\n          emailType\n          id\n          message\n          orderNumber\n          oversoldItems\n          quantity\n        }\n      }\n    }\n  }\n": types.HomeDocument,
    "\n  query ShopCountries($filter: CountryFilter) {\n    shop {\n      id\n      countries(filters: $filter) {\n        code\n        name\n      }\n    }\n  }\n": types.ShopCountriesDocument,
    "\n  query RefreshLimits(\n    $channels: Boolean!\n    $orders: Boolean!\n    $productVariants: Boolean!\n    $staffUsers: Boolean!\n    $warehouses: Boolean!\n  ) {\n    shop {\n      id\n      ...ShopLimit\n    }\n  }\n": types.RefreshLimitsDocument,
    "\n  query CustomerGiftCardList($first: Int, $filter: GiftCardFilter) {\n    giftCards(first: $first, filters: $filter) {\n      edges {\n        node {\n          ...CustomerGiftCard\n        }\n      }\n    }\n  }\n": types.CustomerGiftCardListDocument,
    "\n  fragment Activity on OrderEvent {\n    date\n    type\n    relatedOrder {\n      id\n      number\n    }\n    user {\n      id\n      email\n      firstName\n      lastName\n    }\n    message\n  }\n": types.ActivityFragmentDoc,
    "\n  fragment TopProduct on Product {\n    id\n    name\n    thumbnail {\n      url\n    }\n    revenue(period: TODAY) {\n      gross {\n        amount\n        currency\n      }\n    }\n    attributes {\n      values {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n    quantityOrdered\n  }\n": types.TopProductFragmentDoc,
    "\n  query CheckIfOrderExists($id: ID!) {\n    order(id: $id) {\n      id\n      status\n    }\n  }\n": types.CheckIfOrderExistsDocument,
    "\n  query SearchCatalog($first: Int!, $query: String!) {\n    categories(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n\n    collections(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          ...Collection\n        }\n      }\n    }\n\n    products(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          category {\n            id\n            name\n          }\n          name\n        }\n      }\n    }\n  }\n": types.SearchCatalogDocument,
    "\n  query SearchCustomers($after: String, $first: Int!, $query: String!) {\n    search: customers(\n      after: $after\n      first: $first\n      filters: { search: $query }\n    ) {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchCustomersDocument,
    "\n  mutation AttributeBulkDelete($ids: [ID!]!) {\n    deleteAttributes(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.AttributeBulkDeleteDocument,
    "\n  mutation AttributeDelete($id: ID!) {\n    deleteAttribute(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.AttributeDeleteDocument,
    "\n  mutation AttributeUpdate($id: ID!, $input: AttributeUpdateInput!) {\n    updateAttribute(id: $id, data: $input) {\n      result {\n        ...AttributeDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.AttributeUpdateDocument,
    "\n  mutation ValueDelete(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    deleteValue(id: $id) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ValueDeleteDocument,
    "\n  mutation ValueUpdate(\n    $id: ID!\n    $input: ValueUpdateInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    updateValue(id: $id, data: $input) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ValueUpdateDocument,
    "\n  mutation ValueCreate(\n    $id: ID!\n    $input: ValueCreationInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    createValue(attributeId: $id, data: $input) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ValueCreateDocument,
    "\n  mutation AttributeCreate($input: AttributeCreationInput!) {\n    createAttribute(data: $input) {\n      result {\n        id\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.AttributeCreateDocument,
    "\n  mutation ValueReorder(\n    $id: ID!\n    $move: ReorderInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    reorderValues(attributeId: $id, moves: [$move]) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          pageInfo {\n            ...PageInfo\n          }\n          edges {\n            cursor\n            node {\n              id\n            }\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ValueReorderDocument,
    "\n  query AttributeDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    attribute(id: $id) {\n      ...AttributeDetails\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...ValueList\n      }\n    }\n  }\n": types.AttributeDetailsDocument,
    "\n  query AttributeList(\n    $filter: AttributeFilter\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $sort: AttributeOrderingInput\n  ) {\n    attributes(\n      filters: $filter\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Attribute\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.AttributeListDocument,
    "\n  mutation CategoryDelete($id: ID!) {\n    deleteCategory(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.CategoryDeleteDocument,
    "\n  mutation CategoryCreate($parentId: ID, $input: CategoryInput!) {\n    createCategory(parentId: $parentId, data: $input) {\n      result {\n        ...CategoryDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.CategoryCreateDocument,
    "\n  mutation CategoryUpdate($id: ID!, $input: CategoryInput!) {\n    updateCategory(id: $id, data: $input) {\n      result {\n        ...CategoryDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.CategoryUpdateDocument,
    "\n  mutation CategoryBulkDelete($ids: [ID!]!) {\n    deleteCategories(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.CategoryBulkDeleteDocument,
    "\n  query RootCategories(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: CategoryFilter\n    $sort: CategoryOrderingInput\n  ) {\n    categories(\n      level: 0\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Category\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.RootCategoriesDocument,
    "\n  query CategoryDetails(\n    $id: ID!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    category(id: $id) {\n      ...CategoryDetails\n      children(first: $first, after: $after, last: $last, before: $before) {\n        edges {\n          node {\n            ...Category\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n      products(first: $first, after: $after, last: $last, before: $before) {\n        pageInfo {\n          ...PageInfo\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            thumbnail {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CategoryDetailsDocument,
    "\n  mutation ChannelCreate($input: ChannelCreationInput!) {\n    createChannel(data: $input) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n": types.ChannelCreateDocument,
    "\n  mutation ChannelUpdate($id: ID!, $input: ChannelUpdateInput!) {\n    updateChannel(id: $id, data: $input) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n": types.ChannelUpdateDocument,
    "\n  mutation ChannelDelete($id: ID!, $input: ChannelDeleteInput) {\n    deleteChannel(id: $id, data: $input) {\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n": types.ChannelDeleteDocument,
    "\n  mutation ChannelActivate($id: ID!) {\n    activateChannel(id: $id) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n": types.ChannelActivateDocument,
    "\n  mutation ChannelDeactivate($id: ID!) {\n    deactivateChannel(id: $id) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n": types.ChannelDeactivateDocument,
    "\n  mutation ChannelReorderWarehouses($channelId: ID!, $moves: [ReorderInput!]!) {\n    reorderChannelWarehouses(channelId: $channelId, moves: $moves) {\n      channel {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n": types.ChannelReorderWarehousesDocument,
    "\n  query BaseChannels {\n    channels {\n      ...Channel\n    }\n  }\n": types.BaseChannelsDocument,
    "\n  mutation CollectionUpdate($id: ID!, $input: CollectionInput!) {\n    updateCollection(id: $id, data: $input) {\n      result {\n        ...CollectionDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.CollectionUpdateDocument,
    "\n  mutation CollectionAssignProduct(\n    $collectionId: ID!\n    $productIds: [ID!]!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    addProductsToCollection(collectionId: $collectionId, products: $productIds) {\n      result {\n        id\n        products(first: $first, after: $after, before: $before, last: $last) {\n          edges {\n            node {\n              ...CollectionProduct\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.CollectionAssignProductDocument,
    "\n  mutation CreateCollection($input: CollectionCreationInput!) {\n    createCollection(data: $input) {\n      result {\n        ...CollectionDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.CreateCollectionDocument,
    "\n  mutation RemoveCollection($id: ID!) {\n    deleteCollection(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.RemoveCollectionDocument,
    "\n  mutation UnassignCollectionProduct(\n    $collectionId: ID!\n    $productIds: [ID!]!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    removeProductsFromCollection(collectionId: $collectionId, products: $productIds) {\n      result {\n        id\n        products(first: $first, after: $after, before: $before, last: $last) {\n          edges {\n            node {\n              id\n              name\n              productKlass {\n                id\n                name\n              }\n              thumbnail {\n                url\n              }\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.UnassignCollectionProductDocument,
    "\n  mutation CollectionBulkDelete($ids: [ID!]!) {\n    deleteCollections(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.CollectionBulkDeleteDocument,
    "\n  mutation CollectionChannelListingUpdate(\n    $id: ID!\n    $input: CollectionChannelListingUpdateInput!\n  ) {\n    updateCollectionChannelListing(id: $id, data: $input) {\n      errors {\n        ...CollectionChannelListingError\n      }\n    }\n  }\n": types.CollectionChannelListingUpdateDocument,
    "\n  query CollectionList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: CollectionFilter\n    $sort: CollectionOrderingInput\n    $channel: String\n  ) {\n    collections(\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Collection\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.CollectionListDocument,
    "\n  query CollectionDetails(\n    $id: ID!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    collection(id: $id) {\n      ...CollectionDetails\n      products(first: $first, after: $after, before: $before, last: $last) {\n        edges {\n          node {\n            ...CollectionProduct\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.CollectionDetailsDocument,
    "\n  query CheckExportFileStatus($id: ID!) {\n    exportFile(id: $id) {\n      id\n      status\n    }\n  }\n": types.CheckExportFileStatusDocument,
    "\n  query CheckOrderInvoicesStatus($id: ID!) {\n    order(id: $id) {\n      id\n      invoices {\n        ...Invoice\n      }\n    }\n  }\n": types.CheckOrderInvoicesStatusDocument,
    "\n  mutation UpdateCustomer($id: ID!, $input: UserUpdateInput!) {\n    updateUser(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...CustomerDetails\n      }\n    }\n  }\n": types.UpdateCustomerDocument,
    "\n  mutation CreateCustomer($input: UserCreationInput!) {\n    createUser(data: $input) {\n      errors {\n        ...Error\n      }\n      user {\n        id\n      }\n    }\n  }\n": types.CreateCustomerDocument,
    "\n  mutation RemoveCustomer($id: ID!) {\n    deleteCustomer(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.RemoveCustomerDocument,
    "\n  mutation SetCustomerDefaultAddress(\n    $addressId: ID!\n    $userId: ID!\n    $type: AddressType!\n  ) {\n    setDefaultAddress(addressId: $addressId, userId: $userId, type: $type) {\n      errors {\n        ...Error\n      }\n      result {\n        ...CustomerAddresses\n      }\n    }\n  }\n": types.SetCustomerDefaultAddressDocument,
    "\n  mutation CreateCustomerAddress($id: ID!, $input: AddressUpdateInput!) {\n    addAddress(userId: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      address {\n        ...Address\n      }\n      user {\n        ...CustomerAddresses\n      }\n    }\n  }\n": types.CreateCustomerAddressDocument,
    "\n  mutation UpdateCustomerAddress($id: ID!, $input: AddressUpdateInput!) {\n    updateAddress(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      address {\n        ...Address\n      }\n    }\n  }\n": types.UpdateCustomerAddressDocument,
    "\n  mutation RemoveCustomerAddress($id: ID!) {\n    deleteAddress(id: $id) {\n      errors {\n        ...Error\n      }\n      user {\n        ...CustomerAddresses\n      }\n    }\n  }\n": types.RemoveCustomerAddressDocument,
    "\n  mutation BulkRemoveCustomers($ids: [ID!]!) {\n    deleteCustomers(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.BulkRemoveCustomersDocument,
    "\n  query ListCustomers(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: CustomerFilter\n    $sort: UserOrderingInput\n    $PERMISSION_MANAGE_ORDERS: Boolean!\n  ) {\n    customers(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Customer\n          orders @include(if: $PERMISSION_MANAGE_ORDERS) {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.ListCustomersDocument,
    "\n  query CustomerDetails($id: ID!, $PERMISSION_MANAGE_ORDERS: Boolean!) {\n    user(id: $id) {\n      ...CustomerDetails\n      orders(last: 5) @include(if: $PERMISSION_MANAGE_ORDERS) {\n        edges {\n          node {\n            id\n            createdAt\n            number\n            paymentStatus\n            total {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n      }\n      lastPlacedOrder: orders(last: 1) @include(if: $PERMISSION_MANAGE_ORDERS) {\n        edges {\n          node {\n            id\n            createdAt\n          }\n        }\n      }\n    }\n  }\n": types.CustomerDetailsDocument,
    "\n  query CustomerAddresses($id: ID!) {\n    user(id: $id) {\n      ...CustomerAddresses\n    }\n  }\n": types.CustomerAddressesDocument,
    "\n  query CustomerCreateData {\n    shop {\n      id\n      countries {\n        code\n        name\n      }\n    }\n  }\n": types.CustomerCreateDataDocument,
    "\n  mutation SaleUpdate(\n    $input: SaleInput!\n    $id: ID!\n    $channelInput: SaleChannelListingInput!\n  ) {\n    updateSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n    }\n    updateSaleChannelListing(id: $id, data: $channelInput) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n": types.SaleUpdateDocument,
    "\n  mutation SaleCataloguesAdd(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    addCataloguesToSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...SaleDetails\n      }\n    }\n  }\n": types.SaleCataloguesAddDocument,
    "\n  mutation SaleCataloguesRemove(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    removeCataloguesFromSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...SaleDetails\n      }\n    }\n  }\n": types.SaleCataloguesRemoveDocument,
    "\n  mutation SaleCreate($input: SaleInput!) {\n    createSale(data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n": types.SaleCreateDocument,
    "\n  mutation SaleDelete($id: ID!) {\n    deleteSale(id: $id) {\n      errors {\n        ...DiscountError\n      }\n    }\n  }\n": types.SaleDeleteDocument,
    "\n  mutation SaleBulkDelete($ids: [ID!]!) {\n    deleteSales(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.SaleBulkDeleteDocument,
    "\n  mutation SaleChannelListingUpdate($id: ID!, $input: SaleChannelListingInput!) {\n    updateSaleChannelListing(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n": types.SaleChannelListingUpdateDocument,
    "\n  mutation VoucherChannelListingUpdate($id: ID!, $input: VoucherChannelListingInput!) {\n    updateVoucherChannelListing(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n": types.VoucherChannelListingUpdateDocument,
    "\n  mutation VoucherUpdate($input: VoucherInput!, $id: ID!) {\n    updateVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n": types.VoucherUpdateDocument,
    "\n  mutation VoucherCataloguesAdd(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    addCataloguesToVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...VoucherDetails\n      }\n    }\n  }\n": types.VoucherCataloguesAddDocument,
    "\n  mutation VoucherCataloguesRemove(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    removeCataloguesFromVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...VoucherDetails\n      }\n    }\n  }\n": types.VoucherCataloguesRemoveDocument,
    "\n  mutation VoucherCreate($input: VoucherInput!) {\n    createVoucher(data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n": types.VoucherCreateDocument,
    "\n  mutation VoucherDelete($id: ID!) {\n    deleteVoucher(id: $id) {\n      errors {\n        ...DiscountError\n      }\n    }\n  }\n": types.VoucherDeleteDocument,
    "\n  mutation VoucherBulkDelete($ids: [ID!]!) {\n    deleteVouchers(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.VoucherBulkDeleteDocument,
    "\n  query SaleList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: SaleFilter\n    $sort: SaleOrderingInput\n    $channel: String\n  ) {\n    sales(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Sale\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SaleListDocument,
    "\n  query VoucherList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: VoucherFilter\n    $sort: VoucherOrderingInput\n    $channel: String\n  ) {\n    vouchers(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Voucher\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.VoucherListDocument,
    "\n  query SaleDetails(\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    sale(id: $id) {\n      ...SaleDetails\n    }\n  }\n": types.SaleDetailsDocument,
    "\n  query VoucherDetails(\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    voucher(id: $id) {\n      ...VoucherDetails\n    }\n  }\n": types.VoucherDetailsDocument,
    "\n  fragment App on App {\n    id\n    name\n    createdAt\n    isActive\n    type\n    homepageUrl\n    appUrl\n    manifestUrl\n    configurationUrl\n    supportUrl\n    version\n    accessToken\n    privateMetadata {\n      key\n      value\n    }\n    metadata {\n      key\n      value\n    }\n    tokens {\n      authToken\n      id\n      name\n    }\n    webhooks {\n      ...Webhook\n    }\n  }\n": types.AppFragmentDoc,
    "\n  fragment AppListItem on App {\n    id\n    name\n    isActive\n    type\n    appUrl\n    manifestUrl\n    permissions {\n      ...AppPermission\n    }\n  }\n": types.AppListItemFragmentDoc,
    "\n  fragment AppPermission on Permission {\n    name\n    code\n  }\n": types.AppPermissionFragmentDoc,
    "\n  fragment Value on Value {\n    id\n    name\n    slug\n    file {\n      ...File\n    }\n    reference\n    boolean\n    date\n    dateTime\n    value\n  }\n": types.ValueFragmentDoc,
    "\n  fragment ValueDetails on Value {\n    ...Value\n    plainText\n    richText\n  }\n": types.ValueDetailsFragmentDoc,
    "\n  fragment ValueList on ValueConnection {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      cursor\n      node {\n        ...ValueDetails\n      }\n    }\n  }\n": types.ValueListFragmentDoc,
    "\n  fragment AvailableAttribute on Attribute {\n    id\n    name\n    slug\n  }\n": types.AvailableAttributeFragmentDoc,
    "\n  fragment UserPermission on UserPermission {\n    code\n    name\n  }\n": types.UserPermissionFragmentDoc,
    "\n  fragment User on User {\n    id\n    email\n    firstName\n    lastName\n    isStaff\n    userPermissions {\n      ...UserPermission\n    }\n    avatar {\n      url\n    }\n  }\n": types.UserFragmentDoc,
    "\n  fragment Category on Category {\n    id\n    name\n    children {\n      totalCount\n    }\n    products {\n      totalCount\n    }\n  }\n": types.CategoryFragmentDoc,
    "\n  fragment ChannelError on ChannelError {\n    code\n    field\n    message\n  }\n": types.ChannelErrorFragmentDoc,
    "\n  fragment ChannelDetails on Channel {\n    ...Channel\n    hasOrders\n    warehouses {\n      ...Warehouse\n    }\n  }\n": types.ChannelDetailsFragmentDoc,
    "\n  fragment Collection on Collection {\n    id\n    name\n    channelListings {\n      id\n      isPublished\n      publishedAt\n      channel {\n        id\n        name\n      }\n    }\n  }\n": types.CollectionFragmentDoc,
    "\n  fragment CollectionProduct on Product {\n    id\n    name\n    productKlass {\n      id\n      name\n    }\n    thumbnail {\n      url\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n    }\n  }\n": types.CollectionProductFragmentDoc,
    "\n  fragment Customer on User {\n    id\n    email\n    firstName\n    lastName\n  }\n": types.CustomerFragmentDoc,
    "\n  fragment CustomerDetails on User {\n    ...Customer\n    ...Metadata\n    dateJoined\n    lastLogin\n    defaultShippingAddress {\n      ...Address\n    }\n    defaultBillingAddress {\n      ...Address\n    }\n    note\n    isActive\n  }\n": types.CustomerDetailsFragmentDoc,
    "\n  fragment CustomerAddresses on User {\n    ...Customer\n    addresses {\n      ...Address\n    }\n    defaultBillingAddress {\n      id\n    }\n    defaultShippingAddress {\n      id\n    }\n  }\n": types.CustomerAddressesFragmentDoc,
    "\n  fragment Sale on Sale {\n    ...Metadata\n    id\n    name\n    type\n    startDate\n    endDate\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      discountValue\n      currency\n    }\n  }\n": types.SaleFragmentDoc,
    "\n  fragment SaleDetails on Sale {\n    ...Sale\n    productsCount: products {\n      totalCount\n    }\n    collectionsCount: collections {\n      totalCount\n    }\n    categoriesCount: categories {\n      totalCount\n    }\n    products(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeProducts) {\n      edges {\n        node {\n          id\n          name\n          productKlass {\n            id\n            name\n          }\n          thumbnail {\n            url\n          }\n          channelListings {\n            ...ChannelListingProductWithoutPricing\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    categories(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCategories) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    collections(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCollections) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SaleDetailsFragmentDoc,
    "\n  fragment Voucher on Voucher {\n    ...Metadata\n    id\n    code\n    startDate\n    endDate\n    usageLimit\n    type\n    discountValueType\n    countries {\n      code\n      name\n    }\n    minCheckoutItemsQuantity\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      discountValue\n      currency\n      minSpent {\n        amount\n        currency\n      }\n    }\n  }\n": types.VoucherFragmentDoc,
    "\n  fragment VoucherDetails on Voucher {\n    ...Voucher\n    code\n    usageLimit\n    used\n    applyOncePerOrder\n    applyOncePerCustomer\n    onlyForStaff\n    productsCount: products {\n      totalCount\n    }\n    collectionsCount: collections {\n      totalCount\n    }\n    categoriesCount: categories {\n      totalCount\n    }\n    products(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeProducts) {\n      edges {\n        node {\n          id\n          name\n          productKlass {\n            id\n            name\n          }\n          thumbnail {\n            url\n          }\n          channelListings {\n            ...ChannelListingProductWithoutPricing\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    collections(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCollections) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    categories(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCategories) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.VoucherDetailsFragmentDoc,
    "\n  fragment ProductErrorWithAttributes on ProductError {\n    ...Error\n    attributes\n  }\n": types.ProductErrorWithAttributesFragmentDoc,
    "\n  fragment ProductChannelListingError on ProductChannelListingError {\n    ...Error\n    channels\n  }\n": types.ProductChannelListingErrorFragmentDoc,
    "\n  fragment CollectionChannelListingError on CollectionChannelListingError {\n    ...Error\n    channels\n  }\n": types.CollectionChannelListingErrorFragmentDoc,
    "\n  fragment AccountError on AccountError {\n    ...Error\n    addressType\n  }\n": types.AccountErrorFragmentDoc,
    "\n  fragment DiscountError on DiscountError {\n    ...Error\n    channels\n  }\n": types.DiscountErrorFragmentDoc,
    "\n  fragment OrderError on OrderError {\n    ...Error\n    addressType\n    orderLines\n  }\n": types.OrderErrorFragmentDoc,
    "\n  fragment PageErrorWithAttributes on PageError {\n    ...Error\n    attributes\n  }\n": types.PageErrorWithAttributesFragmentDoc,
    "\n  fragment BulkProductError on BulkProductError {\n    ...Error\n    index\n    channels\n  }\n": types.BulkProductErrorFragmentDoc,
    "\n  fragment BulkStockError on BulkStockError {\n    ...Error\n    index\n  }\n": types.BulkStockErrorFragmentDoc,
    "\n  fragment ShippingChannelsError on ShippingError {\n    ...Error\n    channels\n  }\n": types.ShippingChannelsErrorFragmentDoc,
    "\n  fragment AppError on AppError {\n    ...Error\n    permissions\n  }\n": types.AppErrorFragmentDoc,
    "\n  fragment ProductAttributeAssignmentUpdateError on ProductError {\n    ...Error\n    attributes\n  }\n": types.ProductAttributeAssignmentUpdateErrorFragmentDoc,
    "\n  fragment GiftCardsSettings on GiftCardSettings {\n    expiryType\n    expiryPeriod {\n      type\n      amount\n    }\n  }\n": types.GiftCardsSettingsFragmentDoc,
    "\n  fragment GiftCardEvent on GiftCardEvent {\n    expiryDate\n    oldExpiryDate\n    id\n    date\n    type\n    user {\n      ...UserBase\n      email\n    }\n    app {\n      id\n      name\n    }\n    message\n    email\n    orderId\n    orderNumber\n    tags\n    oldTags\n    balance {\n      initialBalance {\n        ...Money\n      }\n      currentBalance {\n        ...Money\n      }\n      oldInitialBalance {\n        ...Money\n      }\n      oldCurrentBalance {\n        ...Money\n      }\n    }\n  }\n": types.GiftCardEventFragmentDoc,
    "\n  fragment GiftCardData on GiftCard {\n    ...Metadata\n    last4CodeChars\n    boughtInChannel\n    createdBy {\n      ...UserBase\n    }\n    product {\n      id\n      name\n    }\n    createdBy {\n      ...UserBase\n    }\n    usedBy {\n      ...UserBase\n    }\n    usedByEmail\n    createdByEmail\n    app {\n      id\n      name\n    }\n    createdAt\n    expiryDate\n    lastUsedOn\n    isActive\n    initialBalance {\n      ...Money\n    }\n    currentBalance {\n      ...Money\n    }\n\n    id\n    tags {\n      name\n    }\n  }\n": types.GiftCardDataFragmentDoc,
    "\n  fragment CustomerGiftCard on GiftCard {\n    id\n    last4CodeChars\n    expiryDate\n    isActive\n    currentBalance {\n      ...Money\n    }\n  }\n": types.CustomerGiftCardFragmentDoc,
    "\n  fragment Group on Group {\n    id\n    name\n    userCanManage\n    users {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.GroupFragmentDoc,
    "\n  fragment Permission on Permission {\n    code\n    name\n  }\n": types.PermissionFragmentDoc,
    "\n  fragment GroupMember on User {\n    ...StaffMember\n    avatar(size: 48) {\n      url\n    }\n  }\n": types.GroupMemberFragmentDoc,
    "\n  fragment GroupDetails on Group {\n    ...Group\n    permissions {\n      ...Permission\n    }\n    users {\n      ...GroupMember\n    }\n  }\n": types.GroupDetailsFragmentDoc,
    "\n  fragment MediaItem on MediaItem {\n    id\n    title\n    alt\n    # sortOrder\n    file {\n      url\n    }\n    placeholder\n    isPublished\n    type\n  }\n": types.MediaItemFragmentDoc,
    "\n  fragment MediaItemDetails on MediaItem {\n    ...MediaItem\n    ...Metadata\n    file {\n      __typename\n      url\n      contentType\n    }\n    description\n    publishedAt\n  }\n": types.MediaItemDetailsFragmentDoc,
    "\n  fragment Menu on Menu {\n    id\n    name\n    items {\n      id\n    }\n  }\n": types.MenuFragmentDoc,
    "\n  fragment MenuItemNested on MenuItem {\n    ...MenuItem\n    children {\n      ...MenuItem\n      children {\n        ...MenuItem\n        children {\n          ...MenuItem\n          children {\n            ...MenuItem\n            children {\n              ...MenuItem\n              children {\n                ...MenuItem\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MenuItemNestedFragmentDoc,
    "\n  fragment MenuDetails on Menu {\n    id\n    items {\n      ...MenuItemNested\n    }\n    name\n  }\n": types.MenuDetailsFragmentDoc,
    "\n  fragment OrderEvent on OrderEvent {\n    id\n    amount\n    shippingCostsIncluded\n    date\n    email\n    emailType\n    invoiceNumber\n    discount {\n      valueType\n      value\n      reason\n      amount {\n        amount\n        currency\n      }\n      # oldValueType\n      # oldValue\n      # oldAmount {\n      #   amount\n      #   currency\n      # }\n    }\n    relatedOrder {\n      id\n      number\n    }\n    message\n    quantity\n    transactionReference\n    type\n    user {\n      id\n      email\n      firstName\n      lastName\n    }\n    app {\n      id\n      name\n      appUrl\n    }\n    lines {\n      quantity\n      itemName\n      discount {\n        valueType\n        value\n        reason\n        amount {\n          amount\n          currency\n        }\n        # oldValueType\n        # oldValue\n        # oldAmount {\n        #   amount\n        #   currency\n        # }\n      }\n      orderLine {\n        id\n        productName\n        # productName\n      }\n    }\n  }\n": types.OrderEventFragmentDoc,
    "\n  fragment OrderLine_ on OrderLine {\n    id\n    isShippingRequired\n    allocations {\n      id\n      quantity\n      warehouse {\n        id\n        name\n      }\n    }\n    product {\n      id\n      quantityAvailable\n      preorder {\n        endDate\n      }\n      stocks {\n        ...Stock\n      }\n      parent {\n        id\n        isAvailableForPurchase\n      }\n    }\n    productName\n    productSku\n    quantity\n    quantityFulfilled\n    quantityToFulfill\n    unitDiscount {\n      amount\n      currency\n    }\n    unitDiscountValue\n    unitDiscountReason\n    unitDiscountType\n    undiscountedUnitPrice {\n      currency\n      gross {\n        amount\n        currency\n      }\n      net {\n        amount\n        currency\n      }\n    }\n    unitPrice {\n      gross {\n        amount\n        currency\n      }\n      net {\n        amount\n        currency\n      }\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n": types.OrderLine_FragmentDoc,
    "\n  fragment RefundOrderLine on OrderLine {\n    id\n    productName\n    quantity\n    unitPrice {\n      gross {\n        ...Money\n      }\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n": types.RefundOrderLineFragmentDoc,
    "\n  fragment Fulfillment on Fulfillment {\n    id\n    lines {\n      id\n      quantity\n      orderLine {\n        ...OrderLine\n      }\n    }\n    fulfillmentOrder\n    status\n    trackingNumber\n    warehouse {\n      id\n      name\n    }\n  }\n": types.FulfillmentFragmentDoc,
    "\n  fragment Invoice on Invoice {\n    id\n    number\n    createdAt\n    url\n    status\n  }\n": types.InvoiceFragmentDoc,
    "\n  fragment OrderDetails on Order {\n    id\n    ...Metadata\n    billingAddress {\n      ...Address\n    }\n    giftCards {\n      events {\n        id\n        type\n        orderId\n        balance {\n          initialBalance {\n            ...Money\n          }\n          currentBalance {\n            ...Money\n          }\n          oldInitialBalance {\n            ...Money\n          }\n          oldCurrentBalance {\n            ...Money\n          }\n        }\n      }\n    }\n    isShippingRequired\n    canFinalize\n    createdAt\n    customerNote\n    discounts {\n      id\n      type\n      calculationMode: valueType\n      value\n      reason\n      amount {\n        ...Money\n      }\n    }\n    events {\n      ...OrderEvent\n    }\n    fulfillments {\n      ...Fulfillment\n    }\n    lines {\n      ...OrderLine\n      ...OrderFulfillmentLine\n    }\n    number\n    isPaid\n    paymentStatus\n    shippingAddress {\n      ...Address\n    }\n    fulfillmentMethod {\n      __typename\n      ... on ShippingMethod {\n        id\n      }\n      ... on Warehouse {\n        id\n        clickAndCollectOption\n      }\n    }\n    shippingMethod {\n      id\n    }\n    shippingMethodName\n    collectionPointName\n    shippingPrice {\n      gross {\n        amount\n        currency\n      }\n    }\n    status\n    subtotal {\n      gross {\n        ...Money\n      }\n      net {\n        ...Money\n      }\n    }\n    total {\n      gross {\n        ...Money\n      }\n      net {\n        ...Money\n      }\n      tax {\n        ...Money\n      }\n    }\n    actions\n    totalAuthorized {\n      ...Money\n    }\n    totalCaptured {\n      ...Money\n    }\n    totalBalance {\n      ...Money\n    }\n    undiscountedTotal {\n      net {\n        ...Money\n      }\n      gross {\n        ...Money\n      }\n    }\n    user {\n      id\n      email\n    }\n    userEmail\n    shippingMethods {\n      id\n      name\n      price {\n        ...Money\n      }\n      active\n      message\n    }\n    invoices {\n      ...Invoice\n    }\n    channel {\n      isActive\n      id\n      name\n      currencyCode\n      slug\n      defaultCountry {\n        code\n      }\n    }\n    isPaid\n  }\n": types.OrderDetailsFragmentDoc,
    "\n  fragment OrderSettings on OrderSettings {\n    autoConfirmAllNewOrders\n    autoFulfillNonShippableGiftCard\n  }\n": types.OrderSettingsFragmentDoc,
    "\n  fragment ShopOrderSettings on Site {\n    autoApproveFulfillment\n    fulfillmentAllowUnpaid\n  }\n": types.ShopOrderSettingsFragmentDoc,
    "\n  fragment OrderFulfillmentLine on OrderLine {\n    id\n    isShippingRequired\n    productName\n    quantity\n    allocations {\n      id\n      quantity\n      warehouse {\n        id\n        name\n      }\n    }\n    quantityFulfilled\n    quantityToFulfill\n    product {\n      id\n      name\n      sku\n      preorder {\n        endDate\n      }\n      attributes {\n        values {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n      }\n      stocks {\n        ...Stock\n      }\n      trackInventory\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n": types.OrderFulfillmentLineFragmentDoc,
    "\n  fragment OrderLineStockData on OrderLine {\n    id\n    allocations {\n      quantity\n      warehouse {\n        id\n      }\n    }\n    quantity\n    quantityToFulfill\n    product {\n      stocks {\n        ...Stock\n      }\n    }\n  }\n": types.OrderLineStockDataFragmentDoc,
    "\n  fragment PageKlass on PageKlass {\n    id\n    name\n    hasPages\n  }\n": types.PageKlassFragmentDoc,
    "\n  fragment PageKlassDetails on PageKlass {\n    ...PageKlass\n    ...Metadata\n    attributes {\n      ...Attribute\n    }\n  }\n": types.PageKlassDetailsFragmentDoc,
    "\n  fragment Page on Page {\n    id\n    title\n    slug\n    isPublished\n    content\n  }\n": types.PageFragmentDoc,
    "\n  fragment PageSelectedAttribute on Attribute {\n    id\n    slug\n    name\n    inputType\n    entityType\n    valueRequired\n    unit\n    values(\n      first: $firstValues\n      after: $afterValues\n      last: $lastValues\n      before: $beforeValues\n    ) {\n      ...ValueList\n    }\n    # values {\n    #   edges {\n    #     node {\n    #       ...ValueDetails\n    #     }\n    #   }\n    # }\n  }\n": types.PageSelectedAttributeFragmentDoc,
    "\n  fragment PageAttributes on Page {\n    attributes {\n      ...PageSelectedAttribute\n    }\n    pageKlass {\n      id\n      name\n      attributes {\n        id\n        name\n        inputType\n        entityType\n        valueRequired\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n  }\n": types.PageAttributesFragmentDoc,
    "\n  fragment PageDetails on Page {\n    ...Page\n    ...PageAttributes\n    ...Metadata\n    content\n    seoTitle\n    seoDescription\n    publishedAt\n  }\n": types.PageDetailsFragmentDoc,
    "\n  fragment ConfigurationItem on ConfigurationItem {\n    name\n    value\n    type\n    helpText\n    label\n  }\n": types.ConfigurationItemFragmentDoc,
    "\n  fragment PluginConfigurationBase on PluginConfiguration {\n    active\n    channel {\n      id\n      name\n      slug\n    }\n  }\n": types.PluginConfigurationBaseFragmentDoc,
    "\n  fragment PluginConfigurationExtended on PluginConfiguration {\n    ...PluginConfigurationBase\n    configuration {\n      ...ConfigurationItem\n    }\n  }\n": types.PluginConfigurationExtendedFragmentDoc,
    "\n  fragment PluginBase on Plugin {\n    id\n    name\n    description\n    channelConfigurations {\n      ...PluginConfigurationBase\n    }\n    globalConfiguration {\n      ...PluginConfigurationBase\n    }\n  }\n": types.PluginBaseFragmentDoc,
    "\n  fragment PluginsDetails on Plugin {\n    id\n    name\n    description\n    globalConfiguration {\n      ...PluginConfigurationExtended\n    }\n    channelConfigurations {\n      ...PluginConfigurationExtended\n    }\n  }\n": types.PluginsDetailsFragmentDoc,
    "\n  fragment ProductKlass on ProductKlass {\n    id\n    name\n    kind\n    hasVariants\n    isShippingRequired\n    taxClass {\n      id\n      name\n    }\n  }\n": types.ProductKlassFragmentDoc,
    "\n  fragment ProductKlassDetails on ProductKlass {\n    ...ProductKlass\n    ...Metadata\n    productAttributes {\n      ...Attribute\n    }\n    variantAttributes {\n      ...Attribute\n    }\n    productVariantAttributeAssignments {\n      attribute {\n        ...Attribute\n      }\n      variantSelection\n    }\n    weight\n    # {\n    #   unit\n    #   value\n    # }\n  }\n": types.ProductKlassDetailsFragmentDoc,
    "\n  fragment Stock on Stock {\n    id\n    quantity\n    quantityAllocated\n    warehouse {\n      ...Warehouse\n    }\n  }\n": types.StockFragmentDoc,
    "\n  fragment Preorder on PreorderData {\n    globalThreshold\n    globalSoldUnits\n    endDate\n  }\n": types.PreorderFragmentDoc,
    "\n  fragment PriceRange on TaxedMoneyRange {\n    start {\n      net {\n        ...Money\n      }\n    }\n    stop {\n      net {\n        ...Money\n      }\n    }\n  }\n": types.PriceRangeFragmentDoc,
    "\n  fragment ChannelListingProductWithoutPricing on ProductChannelListing {\n    id\n    isPublished\n    publishedAt\n    isAvailableForPurchase\n    visibleInListings\n    channel {\n      id\n      name\n      currencyCode\n    }\n  }\n": types.ChannelListingProductWithoutPricingFragmentDoc,
    "\n  fragment ChannelListingProduct on ProductChannelListing {\n    ...ChannelListingProductWithoutPricing\n    pricing {\n      priceRange {\n        ...PriceRange\n      }\n    }\n  }\n": types.ChannelListingProductFragmentDoc,
    "\n  fragment ProductWithChannelListings on Product {\n    id\n    name\n    thumbnail {\n      url\n    }\n    productKlass {\n      id\n      name\n      hasVariants\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n      pricing @include(if: $hasChannel) {\n        priceRange {\n          ...PriceRange\n        }\n      }\n    }\n  }\n": types.ProductWithChannelListingsFragmentDoc,
    "\n  fragment ProductAttributes on Product {\n    id\n    attributes {\n      id\n      slug\n      name\n      inputType\n      entityType\n      valueRequired\n      unit\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...ValueList\n      }\n      # values {\n      #   ...ValueDetails\n      # }\n    }\n    productKlass {\n      id\n      variantAttributes {\n        id\n        name\n        inputType\n        valueRequired\n        unit\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n    }\n  }\n": types.ProductAttributesFragmentDoc,
    "\n  fragment ProductDetailsVariant on Product {\n    id\n    ... on ConcreteProduct {\n      sku\n      trackInventory\n      quantityLimitPerCustomer\n    }\n    name\n    attributes {\n      id\n      name\n      values {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n    media {\n      url(size: 200)\n    }\n    stocks {\n      ...Stock\n    }\n    preorder {\n      ...Preorder\n    }\n    channelListings {\n      ...ChannelListingProduct\n    }\n  }\n": types.ProductDetailsVariantFragmentDoc,
    "\n  fragment Product on Product {\n    id\n    ...ProductAttributes\n    ...Metadata\n    name\n    slug\n    description\n    seoTitle\n    seoDescription\n    rating\n    defaultVariant {\n      id\n    }\n    category {\n      id\n      name\n    }\n    collections {\n      id\n      name\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n    }\n    media {\n      ...ProductMediaItem\n    }\n    isAvailableForPurchase\n    variants {\n      ...ProductDetailsVariant\n    }\n    productKlass {\n      id\n      name\n      hasVariants\n    }\n    weight\n    taxClass {\n      id\n      name\n    }\n    name\n    parent {\n      id\n      defaultVariant {\n        id\n      }\n      media {\n        ...ProductMediaItem\n      }\n      name\n      thumbnail {\n        url\n      }\n      channelListings {\n        id\n        publishedAt\n        isPublished\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n      variants {\n        id\n        name\n        ... on ConcreteProduct {\n            sku\n        }\n        media {\n          id\n          url\n          type\n          oembedData\n        }\n      }\n      defaultVariant {\n        id\n      }\n    }\n    selectionAttributes: attributes(variantSelection: VARIANT_SELECTION) {\n      ...Attribute\n    }\n    nonSelectionAttributes: attributes(variantSelection: NOT_VARIANT_SELECTION) {\n      ...Attribute\n    }\n    media {\n      id\n      url\n      type\n      # oembedData\n    }\n    channelListings {\n      ...ChannelListingProduct\n    }\n    ... on ConcreteProduct {\n      trackInventory\n      sku\n      quantityLimitPerCustomer\n    }\n    stocks {\n      ...Stock\n    }\n    preorder {\n      ...Preorder\n    }\n  }\n": types.ProductFragmentDoc,
    "\n  fragment ProductAttribute on Attribute {\n    id\n    name\n    slug\n    inputType\n    entityType\n    valueRequired\n    unit\n    values(\n      first: $firstValues\n      after: $afterValues\n      last: $lastValues\n      before: $beforeValues\n    ) {\n      ...ValueList\n    }\n  }\n": types.ProductAttributeFragmentDoc,
    "\n  fragment ExportFile on ExportFile {\n    id\n    status\n    url\n  }\n": types.ExportFileFragmentDoc,
    "\n  fragment ProductListAttribute on Attribute {\n    id\n    values {\n      edges {\n        node {\n          ...Value\n        }\n      }\n    }\n  }\n": types.ProductListAttributeFragmentDoc,
    "\n  fragment ShippingZone on ShippingZone {\n    ...Metadata\n    id\n    countries {\n      code\n      name\n    }\n    name\n    description\n  }\n": types.ShippingZoneFragmentDoc,
    "\n  fragment ShippingMethodWithPostalCodes on ShippingMethod {\n    id\n    postalCodeRules {\n      id\n      inclusionType\n      start\n      end\n    }\n  }\n": types.ShippingMethodWithPostalCodesFragmentDoc,
    "\n  fragment ShippingMethod_ on ShippingMethod {\n    ...ShippingMethodWithPostalCodes\n    ...Metadata\n    taxClass {\n      name\n      id\n    }\n    minimumOrderWeight\n    # {\n    #   unit\n    #   value\n    # }\n    maximumOrderWeight\n    # {\n    #   unit\n    #   value\n    # }\n    minimumDeliveryDays\n    maximumDeliveryDays\n    name\n    description\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      price {\n        ...Money\n      }\n      minimumOrderPrice {\n        ...Money\n      }\n      maximumOrderPrice {\n        ...Money\n      }\n    }\n  }\n": types.ShippingMethod_FragmentDoc,
    "\n  fragment ShippingMethodWithExcludedProducts on ShippingMethod {\n    ...ShippingMethod\n    excludedProducts(before: $before, after: $after, first: $first, last: $last) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n        startCursor\n      }\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n        }\n      }\n    }\n  }\n": types.ShippingMethodWithExcludedProductsFragmentDoc,
    "\n  fragment ShippingZoneDetails on ShippingZone {\n    ...ShippingZone\n    shippingMethods {\n      ...ShippingMethod\n    }\n    warehouses {\n      id\n      name\n    }\n  }\n": types.ShippingZoneDetailsFragmentDoc,
    "\n  fragment CountryWithCode on Country {\n    name\n    code\n  }\n": types.CountryWithCodeFragmentDoc,
    "\n  fragment Language on LanguageDisplay {\n    code\n    language\n  }\n": types.LanguageFragmentDoc,
    "\n  fragment LimitInfo on Limits {\n    channels @include(if: $channels)\n    orders @include(if: $orders)\n    productVariants @include(if: $productVariants)\n    staffUsers @include(if: $staffUsers)\n    warehouses @include(if: $warehouses)\n  }\n\n  fragment ShopLimit on Site {\n    limits {\n      currentUsage {\n        ...LimitInfo\n      }\n      allowedUsage {\n        ...LimitInfo\n      }\n    }\n  }\n": types.LimitInfoFragmentDoc,
    "\n  fragment Shop on Site {\n    companyAddress {\n      ...Address\n    }\n    countries {\n      code\n      name\n    }\n    customerSetPasswordUrl\n    defaultMailSenderAddress\n    defaultMailSenderName\n    description\n    domain\n    name\n    reserveStockDurationAnonymousUser\n    reserveStockDurationAuthenticatedUser\n    maxItemCountPerCheckout\n  }\n": types.ShopFragmentDoc,
    "\n  fragment StaffMember on User {\n    id\n    email\n    firstName\n    isActive\n    lastName\n  }\n": types.StaffMemberFragmentDoc,
    "\n  fragment StaffMemberDetails on User {\n    ...StaffMember\n    groups {\n      id\n      name\n      userCanManage\n    }\n    userPermissions {\n      code\n      name\n    }\n    avatar(size: 120) {\n      url\n    }\n  }\n": types.StaffMemberDetailsFragmentDoc,
    "\n  fragment TaxedMoney on TaxedMoney {\n    net {\n      ...Money\n    }\n    gross {\n      ...Money\n    }\n  }\n": types.TaxedMoneyFragmentDoc,
    "\n  fragment Country on Country {\n    name\n    code\n  }\n": types.CountryFragmentDoc,
    "\n  fragment TaxConfigurationPerCountry on TaxConfigurationPerCountry {\n    country {\n      ...CountryWithCode\n    }\n    chargeTaxes\n    taxCalculationStrategy\n    displayGrossPrices\n  }\n": types.TaxConfigurationPerCountryFragmentDoc,
    "\n  fragment TaxConfiguration on TaxConfiguration {\n    id\n    channel {\n      id\n      name\n    }\n    displayGrossPrices\n    pricesEnteredWithTax\n    chargeTaxes\n    taxCalculationStrategy\n    countries {\n      ...TaxConfigurationPerCountry\n    }\n  }\n": types.TaxConfigurationFragmentDoc,
    "\n  fragment TaxCountryConfiguration on TaxCountryConfiguration {\n    country {\n      ...CountryWithCode\n    }\n    taxClassCountryRates {\n      rate\n      taxClass {\n        id\n        name\n      }\n    }\n  }\n": types.TaxCountryConfigurationFragmentDoc,
    "\n  fragment TaxRate on TaxClassCountryRate {\n    country {\n      ...CountryWithCode\n    }\n    rate\n  }\n": types.TaxRateFragmentDoc,
    "\n  fragment TaxClassBase on TaxClass {\n    id\n    name\n  }\n": types.TaxClassBaseFragmentDoc,
    "\n  fragment TaxClass on TaxClass {\n    ...TaxClassBase\n    countries {\n      ...TaxRate\n    }\n    ...Metadata\n  }\n": types.TaxClassFragmentDoc,
    "\n  fragment TimePeriod on TimePeriod {\n    amount\n    type\n  }\n": types.TimePeriodFragmentDoc,
    "\n  fragment ValueTranslatable on ValueTranslation {\n    id\n    name\n    plainText\n    richText\n    value {\n      id\n      name\n    }\n    attribute {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    #   plainText\n    #   richText\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n": types.ValueTranslatableFragmentDoc,
    "\n  fragment CategoryTranslation on CategoryTranslation {\n    id\n    description\n    language {\n      language\n    }\n    name\n    seoDescription\n    seoTitle\n    # translation(languageCode: $language) {\n    #   id\n    #   description\n    #   language {\n    #     language\n    #   }\n    #   name\n    #   seoDescription\n    #   seoTitle\n    # }\n    category {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n  }\n": types.CategoryTranslationFragmentDoc,
    "\n  fragment CollectionTranslation on CollectionTranslation {\n    collection {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n    id\n    description\n    language {\n      language\n    }\n    name\n    seoDescription\n    seoTitle\n    # translation(languageCode: $language) {\n    #   id\n    #   description\n    #   language {\n    #     language\n    #   }\n    #   name\n    #   seoDescription\n    #   seoTitle\n    # }\n  }\n": types.CollectionTranslationFragmentDoc,
    "\n  fragment ProductTranslation on ProductTranslation {\n    product {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n    id\n    seoTitle\n    seoDescription\n    name\n    description\n    language {\n      code\n      language\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   seoTitle\n    #   seoDescription\n    #   name\n    #   description\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n": types.ProductTranslationFragmentDoc,
    "\n  fragment ProductVariantTranslation on ProductTranslation {\n    id\n    name\n    language {\n      code\n      language\n    }\n    product {\n      id\n      name\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n": types.ProductVariantTranslationFragmentDoc,
    "\n  fragment SaleTranslation on SaleTranslation {\n    id\n    name\n    language {\n      code\n      language\n    }\n    sale {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    # }\n  }\n": types.SaleTranslationFragmentDoc,
    "\n  fragment VoucherTranslation on VoucherTranslation {\n    id\n    language {\n      code\n      language\n    }\n    name\n    voucher {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    # }\n  }\n": types.VoucherTranslationFragmentDoc,
    "\n  fragment ShippingMethodTranslation on ShippingMethodTranslation {\n    id\n    language {\n      code\n      language\n    }\n    name\n    description\n    shippingMethod {\n      id\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    #   description\n    # }\n  }\n": types.ShippingMethodTranslationFragmentDoc,
    "\n  fragment PageTranslation on PageTranslation {\n    id\n    content\n    seoDescription\n    seoTitle\n    title\n    language {\n      code\n      language\n    }\n    page {\n      id\n      content\n      seoDescription\n      seoTitle\n      title\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n  }\n": types.PageTranslationFragmentDoc,
    "\n  fragment PageTranslatable on PageTranslation {\n    id\n    content\n    seoDescription\n    seoTitle\n    title\n    language {\n      code\n      language\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   content\n    #   seoDescription\n    #   seoTitle\n    #   title\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n": types.PageTranslatableFragmentDoc,
    "\n  fragment AttributeChoicesTranslation on ValueConnection {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      cursor\n      node {\n        id\n        name\n        plainText\n        richText\n        inputType\n        translation(languageCode: $language) {\n          id\n          name\n          plainText\n          richText\n        }\n      }\n    }\n  }\n": types.AttributeChoicesTranslationFragmentDoc,
    "\n  fragment AttributeTranslation on AttributeTranslation {\n    id\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    # }\n    attribute {\n      id\n      name\n      inputType\n    }\n  }\n": types.AttributeTranslationFragmentDoc,
    "\n  fragment AttributeTranslationDetails on AttributeTranslation {\n    id\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    # }\n    attribute {\n      id\n      name\n      inputType\n      withChoices\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...AttributeChoicesTranslation\n      }\n    }\n  }\n": types.AttributeTranslationDetailsFragmentDoc,
    "\n  fragment MenuItemTranslation on MenuItemTranslation {\n    id\n    language {\n      language\n    }\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     language\n    #   }\n    #   name\n    # }\n    menuItem {\n      id\n      name\n    }\n  }\n": types.MenuItemTranslationFragmentDoc,
    "\n  fragment Warehouse on Warehouse {\n    id\n    name\n  }\n": types.WarehouseFragmentDoc,
    "\n  fragment WarehouseWithShipping on Warehouse {\n    ...Warehouse\n    shippingZones(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.WarehouseWithShippingFragmentDoc,
    "\n  fragment WarehouseDetails on Warehouse {\n    isPrivate\n    clickAndCollectOption\n    ...WarehouseWithShipping\n    address {\n      ...Address\n    }\n  }\n": types.WarehouseDetailsFragmentDoc,
    "\n  fragment Webhook on Webhook {\n    id\n    name\n    isActive\n    app {\n      id\n      name\n    }\n  }\n": types.WebhookFragmentDoc,
    "\n  fragment WebhookDetails on Webhook {\n    ...Webhook\n    syncEvents {\n      eventType\n    }\n    asyncEvents {\n      eventType\n    }\n    secretKey\n    targetUrl\n  }\n": types.WebhookDetailsFragmentDoc,
    "\n  mutation GiftCardBulkCreate($input: GiftCardBulkCreationInput!) {\n    createGiftCards(data: $input) {\n      objects {\n        id\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.GiftCardBulkCreateDocument,
    "\n  mutation GiftCardCreate($input: GiftCardCreationInput!) {\n    createGiftCard(data: $input) {\n      result {\n        code\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.GiftCardCreateDocument,
    "\n  query ChannelCurrencies {\n    shop {\n      id\n      channelCurrencies\n    }\n  }\n": types.ChannelCurrenciesDocument,
    "\n  mutation ExportGiftCards($input: ExportGiftCardsInput!) {\n    exportGiftCards(data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        id\n      }\n    }\n  }\n": types.ExportGiftCardsDocument,
    "\n  mutation GiftCardSettingsUpdate($input: GiftCardSettingsUpdateInput!) {\n    updateGiftCardSettings(data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        ...GiftCardsSettings\n      }\n    }\n  }\n": types.GiftCardSettingsUpdateDocument,
    "\n  query GiftCardSettings {\n    giftCardSettings {\n      ...GiftCardsSettings\n    }\n  }\n": types.GiftCardSettingsDocument,
    "\n  mutation GiftCardResend($input: GiftCardResendInput!) {\n    resendGiftCard(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n": types.GiftCardResendDocument,
    "\n  mutation GiftCardActivate($id: ID!) {\n    activateGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n": types.GiftCardActivateDocument,
    "\n  mutation GiftCardDeactivate($id: ID!) {\n    deactivateGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n": types.GiftCardDeactivateDocument,
    "\n  mutation GiftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n    updateGiftCard(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        ...GiftCardData\n        events {\n          ...GiftCardEvent\n        }\n      }\n    }\n  }\n": types.GiftCardUpdateDocument,
    "\n  mutation GiftCardAddNote($id: ID!, $input: GiftCardAddNoteInput!) {\n    addNoteToGiftCard(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      giftCard {\n        ...GiftCardData\n      }\n      event {\n        ...GiftCardEvent\n      }\n    }\n  }\n": types.GiftCardAddNoteDocument,
    "\n  query GiftCardDetails($id: ID!) {\n    giftCard(id: $id) {\n      ...GiftCardData\n      events {\n        ...GiftCardEvent\n      }\n    }\n  }\n": types.GiftCardDetailsDocument,
    "\n  query GiftCardCurrencies {\n    giftCardCurrencies\n  }\n": types.GiftCardCurrenciesDocument,
    "\n  mutation GiftCardBulkActivate($ids: [ID!]!) {\n    activateGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n      count\n    }\n  }\n": types.GiftCardBulkActivateDocument,
    "\n  mutation GiftCardBulkDeactivate($ids: [ID!]!) {\n    deactivateGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n      count\n    }\n  }\n": types.GiftCardBulkDeactivateDocument,
    "\n  mutation DeleteGiftCard($id: ID!) {\n    deleteGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.DeleteGiftCardDocument,
    "\n  mutation BulkDeleteGiftCard($ids: [ID!]!) {\n    deleteGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.BulkDeleteGiftCardDocument,
    "\n  query GiftCardList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: GiftCardFilter\n    $sort: GiftCardOrderingInput\n  ) {\n    giftCards(\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          id\n          usedByEmail\n          last4CodeChars\n          isActive\n          expiryDate\n          product {\n            id\n            name\n          }\n          tags {\n            name\n          }\n          usedBy {\n            ...UserBase\n          }\n          currentBalance {\n            ...Money\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GiftCardListDocument,
    "\n  query GiftCardTotalCount {\n    giftCards {\n      totalCount\n    }\n  }\n": types.GiftCardTotalCountDocument,
    "\n  query GiftCardProductsCount {\n    giftCardProductKlasses: productKlasses(filters: { kind: GIFT_CARD }) {\n      totalCount\n    }\n    giftCardProducts: products(filters: { isGiftCard: true }) {\n      totalCount\n    }\n  }\n": types.GiftCardProductsCountDocument,
    "\n  mutation GroupDelete($id: ID!) {\n    deleteGroup(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.GroupDeleteDocument,
    "\n  mutation GroupCreate($input: GroupCreationInput!) {\n    createGroup(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GroupDetails\n      }\n    }\n  }\n": types.GroupCreateDocument,
    "\n  mutation GroupUpdate($id: ID!, $input: GroupUpdateInput!) {\n    updateGroup(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GroupDetails\n      }\n    }\n  }\n": types.GroupUpdateDocument,
    "\n  query GroupList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: GroupFilter\n    $sort: GroupOrderingInput\n  ) {\n    groups(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Group\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.GroupListDocument,
    "\n  query GroupDetails($id: ID!, $userId: ID!) {\n    group(id: $id) {\n      ...GroupDetails\n    }\n    user(id: $userId) {\n      editableGroups {\n        id\n      }\n      userPermissions {\n        code\n        sourceGroups(userId: $userId) {\n          id\n        }\n      }\n    }\n  }\n": types.GroupDetailsDocument,
    "\n  mutation MediaCreate($input: MediaCreationInput!) {\n    createMedia(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n": types.MediaCreateDocument,
    "\n  mutation MediaUpdate($id: ID!, $input: MediaInput!) {\n    updateMedia(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...MediaItemDetails\n      }\n    }\n  }\n": types.MediaUpdateDocument,
    "\n  mutation MediaRemove($id: ID!) {\n    deleteMediaItem(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.MediaRemoveDocument,
    "\n  mutation MediaBulkPublish($ids: [ID!]!, $isPublished: Boolean!) {\n    publishMediaItems(ids: $ids, isPublished: $isPublished) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.MediaBulkPublishDocument,
    "\n  mutation MediaBulkRemove($ids: [ID!]!) {\n    deleteMediaItems(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.MediaBulkRemoveDocument,
    "\n  query MediaList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: MediaOrderingInput\n    $filter: MediaFilter\n  ) {\n    media(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...MediaItem\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n": types.MediaListDocument,
    "\n  query MediaItemDetails($id: ID!) {\n    mediaItem(id: $id) {\n      ...MediaItemDetails\n    }\n  }\n": types.MediaItemDetailsDocument,
    "\n  query MediaCount($filter: MediaFilter) {\n    media(filters: $filter) {\n      totalCount\n    }\n  }\n": types.MediaCountDocument,
    "\n  mutation MenuCreate($input: MenuCreationInput!) {\n    createMenu(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n": types.MenuCreateDocument,
    "\n  mutation MenuBulkDelete($ids: [ID!]!) {\n    deleteMenus(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.MenuBulkDeleteDocument,
    "\n  mutation MenuDelete($id: ID!) {\n    deleteMenu(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.MenuDeleteDocument,
    "\n  mutation MenuItemCreate($input: MenuItemCreationInput!) {\n    createMenuItem(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        menu {\n          id\n          items {\n            ...MenuItemNested\n          }\n        }\n      }\n    }\n  }\n": types.MenuItemCreateDocument,
    "\n  mutation MenuUpdate(\n    $id: ID!\n    $name: String!\n    $moves: [MenuItemMoveInput!]!\n    $removeIds: [ID!]!\n  ) {\n    updateMenu(id: $id, data: { name: $name }) {\n      errors {\n        ...Error\n      }\n    }\n\n    moveMenuItem(menuId: $id, moves: $moves) {\n      errors {\n        ...Error\n      }\n    }\n\n    deleteMenuItems(ids: $removeIds) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.MenuUpdateDocument,
    "\n  mutation MenuItemUpdate($id: ID!, $input: MenuItemInput!) {\n    updateMenuItem(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...MenuItem\n      }\n    }\n  }\n": types.MenuItemUpdateDocument,
    "\n  query MenuList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: MenuOrderingInput\n  ) {\n    menus(first: $first, after: $after, before: $before, last: $last, sortBy: $sort) {\n      edges {\n        node {\n          ...Menu\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.MenuListDocument,
    "\n  query MenuDetails($id: ID!) {\n    menu(id: $id) {\n      ...MenuDetails\n    }\n  }\n": types.MenuDetailsDocument,
    "\n  mutation OrderCancel($id: ID!) {\n    cancelOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderCancelDocument,
    "\n  mutation OrderDiscountAdd($input: OrderDiscountCommonInput!, $orderId: ID!) {\n    addDiscountToOrder(data: $input, orderId: $orderId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderDiscountAddDocument,
    "\n  mutation OrderDiscountDelete($discountId: ID!) {\n    deleteOrderDiscount(discountId: $discountId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderDiscountDeleteDocument,
    "\n  mutation OrderLineDiscountRemove($orderLineId: ID!) {\n    removeOrderLineDiscount(orderLineId: $orderLineId) {\n      errors {\n        ...OrderError\n      }\n      order {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderLineDiscountRemoveDocument,
    "\n  mutation OrderLineDiscountUpdate($input: OrderDiscountCommonInput!, $orderLineId: ID!) {\n    updateOrderLineDiscount(data: $input, orderLineId: $orderLineId) {\n      errors {\n        ...OrderError\n      }\n      order {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderLineDiscountUpdateDocument,
    "\n  mutation OrderDiscountUpdate($input: OrderDiscountCommonInput!, $discountId: ID!) {\n    updateOrderDiscount(data: $input, discountId: $discountId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderDiscountUpdateDocument,
    "\n  mutation OrderDraftCancel($id: ID!) {\n    deleteOrderDraft(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderDraftCancelDocument,
    "\n  mutation OrderDraftBulkCancel($ids: [ID!]!) {\n    deleteOrderDrafts(ids: $ids) {\n      errors {\n        ...OrderError\n      }\n    }\n  }\n": types.OrderDraftBulkCancelDocument,
    "\n  mutation OrderConfirm($id: ID!) {\n    confirmOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderConfirmDocument,
    "\n  mutation OrderDraftFinalize($id: ID!) {\n    completeOrderDraft(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderDraftFinalizeDocument,
    "\n  mutation FulfillmentReturnProducts($id: ID!, $input: OrderReturnProductsInput!) {\n    returnFulfilledProducts(data: $input, order: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        fulfillment {\n          id\n        }\n        order {\n          id\n        }\n      }\n    }\n  }\n": types.FulfillmentReturnProductsDocument,
    "\n  mutation OrderRefund($id: ID!, $amount: PositiveDecimal!) {\n    refundOrder(id: $id, amount: $amount) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderRefundDocument,
    "\n  mutation OrderFulfillmentRefundProducts($input: OrderRefundProductsInput!, $order: ID!) {\n    refundFulfilledProducts(data: $input, order: $order) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n        fulfillment {\n          ...Fulfillment\n        }\n      }\n    }\n  }\n": types.OrderFulfillmentRefundProductsDocument,
    "\n  mutation OrderVoid($id: ID!) {\n    voidOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderVoidDocument,
    "\n  mutation OrderMarkAsPaid($id: ID!, $transactionReference: String) {\n    markOrderAsPaid(id: $id, transactionReference: $transactionReference) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderMarkAsPaidDocument,
    "\n  mutation OrderCapture($id: ID!, $amount: PositiveDecimal!) {\n    captureOrder(id: $id, amount: $amount) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderCaptureDocument,
    "\n  mutation OrderFulfillmentUpdateTracking(\n    $id: ID!\n    $input: FulfillmentUpdateTrackingInput!\n  ) {\n    updateFulfillmentTracking(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n": types.OrderFulfillmentUpdateTrackingDocument,
    "\n  mutation OrderFulfillmentApprove(\n    $id: ID!\n    $notifyCustomer: Boolean!\n    $allowStockToBeExceeded: Boolean\n  ) {\n    approveFulfillment(\n      id: $id\n      notifyCustomer: $notifyCustomer\n      allowStockToBeExceeded: $allowStockToBeExceeded\n    ) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n": types.OrderFulfillmentApproveDocument,
    "\n  mutation OrderFulfillmentCancel($id: ID!, $input: FulfillmentCancelInput!) {\n    cancelFulfillment(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n": types.OrderFulfillmentCancelDocument,
    "\n  mutation OrderAddNote($orderId: ID!, $input: OrderAddNoteInput!) {\n    addNoteToOrder(id: $orderId, data: $input) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        events {\n          ...OrderEvent\n        }\n      }\n    }\n  }\n": types.OrderAddNoteDocument,
    "\n  mutation OrderUpdate($id: ID!, $input: OrderUpdateInput!) {\n    updateOrder(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderUpdateDocument,
    "\n  mutation OrderDraftUpdate($id: ID!, $input: DraftOrderInput!) {\n    updateDraftOrder(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderDraftUpdateDocument,
    "\n  mutation OrderShippingMethodUpdate($id: ID!, $input: OrderUpdateShippingInput!) {\n    updateOrderShipping(orderId: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        shippingMethods {\n          id\n          name\n        }\n        total {\n          tax {\n            amount\n            currency\n          }\n          gross {\n            amount\n            currency\n          }\n        }\n        id\n        shippingMethod {\n          id\n          name\n          price {\n            amount\n            currency\n          }\n        }\n        shippingMethodName\n        shippingPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n        ...OrderDetails\n      }\n    }\n  }\n": types.OrderShippingMethodUpdateDocument,
    "\n  mutation OrderDraftCreate($input: DraftOrderCreationInput!) {\n    createDraftOrder(data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        id\n      }\n    }\n  }\n": types.OrderDraftCreateDocument,
    "\n  mutation OrderLineDelete($id: ID!) {\n    deleteOrderLine(id: $id) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        lines {\n          ...OrderLine\n        }\n      }\n    }\n  }\n": types.OrderLineDeleteDocument,
    "\n  mutation OrderLinesAdd($id: ID!, $input: [OrderLineCreationInput!]!) {\n    createOrderLines(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        lines {\n          ...OrderLine\n        }\n      }\n    }\n  }\n": types.OrderLinesAddDocument,
    "\n  mutation OrderLineUpdate($id: ID!, $input: OrderLineInput!) {\n    updateOrderLine(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      orderLine {\n        ...OrderLine\n      }\n    }\n  }\n": types.OrderLineUpdateDocument,
    "\n  mutation FulfillOrder($orderId: ID!, $input: OrderFulfillInput!) {\n    fulfillOrder(order: $orderId, data: $input) {\n      errors {\n        ...OrderError\n        ... on OrderError {\n          warehouse\n        }\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n": types.FulfillOrderDocument,
    "\n  mutation InvoiceRequest($orderId: ID!) {\n    requestInvoice(orderId: $orderId) {\n      errors {\n        ...Error\n      }\n      invoice {\n        ...Invoice\n      }\n      order {\n        id\n        invoices {\n          ...Invoice\n        }\n      }\n    }\n  }\n": types.InvoiceRequestDocument,
    "\n  mutation InvoiceEmailSend($id: ID!) {\n    sendInvoiceNotification(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Invoice\n      }\n    }\n  }\n": types.InvoiceEmailSendDocument,
    "\n  mutation OrderSettingsUpdate(\n    $orderSettingsInput: OrderSettingsUpdateInput!\n    $shopSettingsInput: ShopSettingsUpdateInput!\n  ) {\n    updateOrderSettings(data: $orderSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...OrderSettings\n      }\n    }\n    updateShopSettings(data: $shopSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ShopOrderSettings\n      }\n    }\n  }\n": types.OrderSettingsUpdateDocument,
    "\n  query OrderList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: OrderFilter\n    $sort: OrderOrderingInput\n  ) {\n    orders(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          __typename\n          billingAddress {\n            ...Address\n          }\n          createdAt\n          id\n          number\n          paymentStatus\n          status\n          total {\n            __typename\n            gross {\n              __typename\n              amount\n              currency\n            }\n          }\n          userEmail\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n": types.OrderListDocument,
    "\n  query OrderDraftList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: OrderDraftFilter\n    $sort: OrderOrderingInput\n  ) {\n    orderDrafts(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          __typename\n          billingAddress {\n            ...Address\n          }\n          createdAt\n          id\n          number\n          paymentStatus\n          status\n          total {\n            __typename\n            gross {\n              __typename\n              amount\n              currency\n            }\n          }\n          userEmail\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n": types.OrderDraftListDocument,
    "\n  query OrderDetails($id: ID!) {\n    order(id: $id) {\n      ...OrderDetails\n    }\n    shop {\n      id\n      countries {\n        code\n        name\n      }\n      defaultWeightUnit\n      fulfillmentAllowUnpaid\n      autoApproveFulfillment\n    }\n  }\n": types.OrderDetailsDocument,
    "\n  query OrderFulfillData($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      isPaid\n      fulfillmentMethod {\n        __typename\n        ... on ShippingMethod {\n          id\n        }\n        ... on Warehouse {\n          id\n          clickAndCollectOption\n        }\n      }\n      lines {\n        ...OrderFulfillmentLine\n      }\n      number\n    }\n  }\n": types.OrderFulfillDataDocument,
    "\n  query OrderFulfillSettings {\n    shop {\n      ...ShopOrderSettings\n    }\n  }\n": types.OrderFulfillSettingsDocument,
    "\n  query OrderSettings {\n    orderSettings {\n      ...OrderSettings\n    }\n    shop {\n      ...ShopOrderSettings\n    }\n  }\n": types.OrderSettingsDocument,
    "\n  query OrderRefundData($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      number\n      total {\n        gross {\n          ...Money\n        }\n      }\n      totalCaptured {\n        ...Money\n      }\n      shippingPrice {\n        gross {\n          ...Money\n        }\n      }\n      lines {\n        ...RefundOrderLine\n        quantityToFulfill\n      }\n      fulfillments {\n        id\n        status\n        fulfillmentOrder\n        lines {\n          id\n          quantity\n          orderLine {\n            ...RefundOrderLine\n          }\n        }\n      }\n    }\n  }\n": types.OrderRefundDataDocument,
    "\n  query ChannelUsabilityData($channel: String!) {\n    products(channel: $channel) {\n      totalCount\n    }\n  }\n": types.ChannelUsabilityDataDocument,
    "\n  mutation PageKlassUpdate($id: ID!, $input: PageKlassUpdateInput!) {\n    updatePageKlass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n": types.PageKlassUpdateDocument,
    "\n  mutation PageKlassCreate($input: PageKlassCreationInput!) {\n    createPageKlass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n": types.PageKlassCreateDocument,
    "\n  mutation AssignPageAttribute($id: ID!, $ids: [ID!]!) {\n    assignPageAttribute(pageKlassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n": types.AssignPageAttributeDocument,
    "\n  mutation UnassignPageAttribute($id: ID!, $ids: [ID!]!) {\n    unassignPageAttribute(pageKlassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n": types.UnassignPageAttributeDocument,
    "\n  mutation PageKlassDelete($id: ID!) {\n    deletePageKlass(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n": types.PageKlassDeleteDocument,
    "\n  mutation PageKlassBulkDelete($ids: [ID!]!) {\n    deletePageKlasses(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.PageKlassBulkDeleteDocument,
    "\n  mutation PageKlassAttributeReorder($move: ReorderInput!, $pageKlassId: ID!) {\n    reorderPageKlassAttributes(moves: [$move], pageKlassId: $pageKlassId) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n": types.PageKlassAttributeReorderDocument,
    "\n  query PageKlassList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: PageKlassFilter\n    $sort: PageKlassOrderingInput\n  ) {\n    pageKlasses(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...PageKlass\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.PageKlassListDocument,
    "\n  query PageKlassDetails($id: ID!) {\n    pageKlass(id: $id) {\n      ...PageKlassDetails\n    }\n  }\n": types.PageKlassDetailsDocument,
    "\n  mutation PageCreate($input: PageCreationInput!) {\n    createPage(data: $input) {\n      errors {\n        ...PageErrorWithAttributes\n      }\n      result {\n        id\n      }\n    }\n  }\n": types.PageCreateDocument,
    "\n  mutation PageUpdate(\n    $id: ID!\n    $input: PageInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    updatePage(id: $id, data: $input) {\n      errors {\n        ...PageErrorWithAttributes\n      }\n      result {\n        ...PageDetails\n      }\n    }\n  }\n": types.PageUpdateDocument,
    "\n  mutation PageRemove($id: ID!) {\n    deletePage(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.PageRemoveDocument,
    "\n  mutation PageBulkPublish($ids: [ID!]!, $isPublished: Boolean!) {\n    publishPages(ids: $ids, isPublished: $isPublished) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.PageBulkPublishDocument,
    "\n  mutation PageBulkRemove($ids: [ID!]!) {\n    deletePages(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.PageBulkRemoveDocument,
    "\n  query PageList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: PageOrderingInput\n    $filter: PageFilter\n  ) {\n    pages(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...Page\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n": types.PageListDocument,
    "\n  query PageDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    page(id: $id) {\n      ...PageDetails\n    }\n  }\n": types.PageDetailsDocument,
    "\n  query PageKlass(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    pageKlass(id: $id) {\n      id\n      name\n      attributes {\n        id\n        inputType\n        entityType\n        slug\n        name\n        valueRequired\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n  }\n": types.PageKlassDocument,
    "\n  query PageCount($filter: PageFilter) {\n    pages(filters: $filter) {\n      totalCount\n    }\n  }\n": types.PageCountDocument,
    "\n  mutation PluginUpdate($channelId: ID, $id: ID!, $input: PluginUpdateInput!) {\n    updatePlugin(channelId: $channelId, id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PluginsDetails\n      }\n    }\n  }\n": types.PluginUpdateDocument,
    "\n  query Plugins(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: PluginFilter\n    $sort: PluginOrderingInput\n  ) {\n    plugins(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...PluginBase\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n": types.PluginsDocument,
    "\n  query Plugin($id: ID!) {\n    plugin(id: $id) {\n      ...PluginsDetails\n    }\n  }\n": types.PluginDocument,
    "\n  mutation ProductKlassDelete($id: ID!) {\n    deleteProductKlass(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n": types.ProductKlassDeleteDocument,
    "\n  mutation ProductKlassBulkDelete($ids: [ID!]!) {\n    deleteProductKlasses(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ProductKlassBulkDeleteDocument,
    "\n  mutation ProductKlassUpdate($id: ID!, $input: ProductKlassInput!) {\n    updateProductKlass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n": types.ProductKlassUpdateDocument,
    "\n  mutation AssignProductAttribute($id: ID!, $operations: [ProductAttributeAssignInput!]!) {\n    assignProductAttribute(klassId: $id, operations: $operations) {\n      errors {\n        ...Error\n      }\n      productKlass {\n        ...ProductKlassDetails\n      }\n    }\n  }\n": types.AssignProductAttributeDocument,
    "\n  mutation UnassignProductAttribute($id: ID!, $ids: [ID!]!) {\n    unassignProductAttribute(klassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n": types.UnassignProductAttributeDocument,
    "\n  mutation ProductKlassCreate($input: ProductKlassInput!) {\n    createProductKlass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n": types.ProductKlassCreateDocument,
    "\n  mutation ProductKlassAttributeReorder(\n    $move: ReorderInput!\n    $klassId: ID!\n    $type: ProductAttributeType!\n  ) {\n    reorderProductKlassAttributes(\n      moves: [$move]\n      klassId: $klassId\n      type: $type\n    ) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n": types.ProductKlassAttributeReorderDocument,
    "\n  mutation ProductAttributeAssignmentUpdate(\n    $operations: [ProductAttributeAssignmentUpdateInput!]!\n    $klassId: ID!\n  ) {\n    updateProductAttributeAssignment(\n      operations: $operations\n      klassId: $klassId\n    ) {\n      errors {\n        ...ProductAttributeAssignmentUpdateError\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n": types.ProductAttributeAssignmentUpdateDocument,
    "\n  query ProductKlassList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: ProductKlassFilter\n    $sort: ProductKlassOrderingInput\n  ) {\n    productKlasses(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...ProductKlass\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.ProductKlassListDocument,
    "\n  query ProductKlassDetails($id: ID!) {\n    productKlass(id: $id) {\n      ...ProductKlassDetails\n    }\n    shop {\n      id\n      defaultWeightUnit\n    }\n  }\n": types.ProductKlassDetailsDocument,
    "\n  query ProductKlassCreateData {\n    shop {\n      id\n      defaultWeightUnit\n    }\n  }\n": types.ProductKlassCreateDataDocument,
    "\n  mutation ProductMediaCreate(\n    $product: ID!\n    $image: Upload\n    $alt: String!\n    $mediaUrl: String\n  ) {\n    createProductMediaItem(\n      data: { alt: $alt, image: $image, product: $product, mediaUrl: $mediaUrl }\n    ) {\n      errors {\n        ...Error\n      }\n      media {\n        ...ProductMediaItem\n      }\n    }\n  }\n": types.ProductMediaCreateDocument,
    "\n  mutation ProductDelete($id: ID!) {\n    deleteProduct(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n": types.ProductDeleteDocument,
    "\n  mutation ProductMediaReorder($productId: ID!, $mediaItemIds: [ID!]!) {\n    reorderProductMedia(productId: $productId, mediaItemIds: $mediaItemIds) {\n      errors {\n        ...Error\n      }\n      media {\n        id\n        alt\n        sortOrder\n        url\n      }\n    }\n  }\n": types.ProductMediaReorderDocument,
    "\n  mutation ProductSetDefaultVariant($productId: ID!, $variantId: ID!) {\n    setDefaultVariant(productId: $productId, variantId: $variantId) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        defaultVariant {\n          id\n          name\n        }\n        variants {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.ProductSetDefaultVariantDocument,
    "\n  mutation ProductDatagridUpdate($id: ID!, $input: ProductInput!) {\n    updateProduct(id: $id, data: $input) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n    }\n  }\n": types.ProductDatagridUpdateDocument,
    "\n  mutation ProductDatagridStockUpdate(\n    $stocks: [StockInput!]!\n    $removeStocks: [ID!]!\n    $id: ID!\n  ) {\n    deleteProductStocks(warehouseIds: $removeStocks, productId: $id) {\n      errors {\n        ...Error\n      }\n    }\n    updateProductStocks(stocks: $stocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n    }\n  }\n": types.ProductDatagridStockUpdateDocument,
    "\n  mutation ProductDatagridChannelListingUpdate(\n    $id: ID!\n    $input: [ProductChannelListingAddInput!]!\n  ) {\n    updateProductChannelListing(id: $id, data: $input) {\n      errors {\n        ...ProductChannelListingError\n      }\n    }\n  }\n": types.ProductDatagridChannelListingUpdateDocument,
    "\n  mutation ProductUpdate(\n    $addStocks: [StockInput!]!\n    $removeStocks: [ID!]!\n    $id: ID!\n    $attributes: [ValueInput!]\n    $sku: String\n    $quantityLimitPerCustomer: Int\n    $trackInventory: Boolean!\n    $stocks: [StockInput!]!\n    $preorder: PreorderSettingsInput\n    $weight: Weight\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n    $name: String!\n  ) {\n    deleteProductStocks(warehouseIds: $removeStocks, productId: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        stocks {\n          ...Stock\n        }\n      }\n    }\n    createProductStocks(stocks: $addStocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n      result {\n        id\n        stocks {\n          ...Stock\n        }\n      }\n    }\n    updateProductStocks(stocks: $stocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n      result {\n        ...Product\n      }\n    }\n    updateProduct(\n      id: $id\n      data: {\n        attributes: $attributes\n        sku: $sku\n        trackInventory: $trackInventory\n        preorder: $preorder\n        weight: $weight\n        quantityLimitPerCustomer: $quantityLimitPerCustomer\n        name: $name\n      }\n    ) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n      result {\n        ...Product\n      }\n    }\n  }\n": types.ProductUpdateDocument,
    "\n  mutation ProductMediaDelete($id: ID!) {\n    deleteProductMediaItem(id: $id) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          id\n        }\n      }\n    }\n  }\n": types.ProductMediaDeleteDocument,
    "\n  mutation ProductMediaUpdate($id: ID!, $alt: String!) {\n    updateProductMedia(id: $id, data: { alt: $alt }) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n      }\n    }\n  }\n": types.ProductMediaUpdateDocument,
    "\n  mutation ProductMediaAssign($productId: ID!, $mediaItemId: ID!) {\n    assignProductMedia(productId: $productId, mediaItemId: $mediaItemId) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n        parent {\n          id\n          media {\n            ...ProductMediaItem\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            media {\n              ...ProductMediaItem\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ProductMediaAssignDocument,
    "\n  mutation ProductMediaUnassign($productId: ID!, $mediaItemId: ID!) {\n    unassignProductMedia(productId: $productId, mediaItemId: $mediaItemId) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n        parent {\n          id\n          media {\n            ...ProductMediaItem\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            media {\n              ...ProductMediaItem\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ProductMediaUnassignDocument,
    "\n  mutation ProductBulkCreate($id: ID!, $inputs: [ProductBulkCreationInput!]!) {\n    createProducts(productId: $id, variants: $inputs) {\n      errors {\n        ...BulkProductError\n      }\n      objects {\n        id\n      }\n    }\n  }\n": types.ProductBulkCreateDocument,
    "\n  mutation ProductBulkDelete($ids: [ID!]!) {\n    deleteProducts(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ProductBulkDeleteDocument,
    "\n  mutation ProductReorder($move: ReorderInput!, $productId: ID!) {\n    reorderProductVariants(moves: [$move], productId: $productId) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        variants {\n          id\n        }\n      }\n    }\n  }\n": types.ProductReorderDocument,
    "\n  mutation ProductChannelListingUpdate(\n    $id: ID!\n    $input: [ProductChannelListingAddInput!]!\n  ) {\n    updateProductChannelListing(id: $id, data: $input) {\n      result {\n        id\n        channelListings {\n          ...ChannelListingProduct\n        }\n        # parent {\n        #   id\n        #   channelListings {\n        #     ...ChannelListingProductWithoutPricing\n        #   }\n        # }\n      }\n      errors {\n        ...ProductChannelListingError\n      }\n    }\n  }\n": types.ProductChannelListingUpdateDocument,
    "\n  mutation ProductPreorderDeactivate($id: ID!) {\n    deactivateProductPreorder(id: $id) {\n      productVariant {\n        id\n        preorder {\n          ...Preorder\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ProductPreorderDeactivateDocument,
    "\n  query InitialProductFilterAttributes {\n    attributes(first: 100, filters: { type: PRODUCT_TYPE }) {\n      edges {\n        node {\n          id\n          name\n          inputType\n          slug\n        }\n      }\n    }\n  }\n": types.InitialProductFilterAttributesDocument,
    "\n  query InitialProductFilterCategories($categories: [ID!]) {\n    categories(first: 100, filters: { ids: $categories }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.InitialProductFilterCategoriesDocument,
    "\n  query InitialProductFilterCollections($collections: [ID!]) {\n    collections(first: 100, filters: { ids: $collections }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.InitialProductFilterCollectionsDocument,
    "\n  query InitialProductFilterProductKlasses($productKlasses: [ID!]) {\n    productKlasses(first: 100, filters: { ids: $productKlasses }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.InitialProductFilterProductKlassesDocument,
    "\n  query ProductList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: ProductFilter\n    $channel: String\n    $sort: ProductOrderingInput\n    $hasChannel: Boolean!\n    $hasSelectedAttributes: Boolean!\n  ) {\n    products(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...ProductWithChannelListings\n          updatedAt\n          attributes @include(if: $hasSelectedAttributes) {\n            ...ProductListAttribute\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.ProductListDocument,
    "\n  query ProductCount($filter: ProductFilter, $channel: String) {\n    products(filters: $filter, channel: $channel) {\n      totalCount\n    }\n  }\n": types.ProductCountDocument,
    "\n  query ProductDetails(\n    $id: ID!\n    $channel: String\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    product(id: $id, channel: $channel) {\n      ...Product\n    }\n  }\n": types.ProductDetailsDocument,
    "\n  query ProductKlass(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    productKlass(id: $id) {\n      id\n      name\n      hasVariants\n      productAttributes {\n        id\n        inputType\n        entityType\n        slug\n        name\n        valueRequired\n        unit\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      taxClass {\n        id\n        name\n      }\n    }\n  }\n": types.ProductKlassDocument,
    "\n  query ProductVariantDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    productVariant(id: $id) {\n      ...Product\n    }\n  }\n": types.ProductVariantDetailsDocument,
    "\n  query ProductCreateData(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    product(id: $id) {\n      id\n      media {\n        id\n        sortOrder\n        url\n      }\n      channelListings {\n        id\n        isPublished\n        publishedAt\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n      name\n      productKlass {\n        id\n        # TODO\n        # selectionVariantAttributes: variantAttributes(variantSelection: \"VARIANT_SELECTION\") {\n        #   ...ProductAttribute\n        # }\n        # nonSelectionVariantAttributes: variantAttributes(\n        #   variantSelection: \"NOT_VARIANT_SELECTION\"\n        # ) {\n        #   ...ProductAttribute\n        # }\n      }\n      thumbnail {\n        url\n      }\n      defaultVariant {\n        id\n      }\n      variants {\n        id\n        name\n        ... on ConcreteProduct {\n          sku\n        }\n        media {\n          id\n          url\n          type\n        }\n      }\n    }\n  }\n": types.ProductCreateDataDocument,
    "\n  query ProductMediaById($productId: ID!, $mediaItemId: ID!) {\n    product(id: $productId) {\n      id\n      name\n      mainImage: mediaById(id: $mediaItemId) {\n        id\n        alt\n        url\n        type\n        oembedData\n      }\n      media {\n        id\n        url(size: 48)\n        alt\n        type\n        oembedData\n      }\n    }\n  }\n": types.ProductMediaByIdDocument,
    "\n  query GridAttributes($ids: [ID!]!) {\n    grid: attributes(first: 25, filters: { ids: $ids }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GridAttributesDocument,
    "\n  query SearchAvailableInGridAttributes($first: Int!, $after: String, $query: String!) {\n    availableInGrid: attributes(\n      first: $first\n      after: $after\n      filters: { isVariantOnly: false, type: PRODUCT_TYPE, search: $query }\n    ) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n      totalCount\n    }\n  }\n": types.SearchAvailableInGridAttributesDocument,
    "\n  query SearchAvailablePageAttributes(\n    $id: ID!\n    $after: String\n    $first: Int!\n    $query: String!\n  ) {\n    pageKlass(id: $id) {\n      id\n      availableAttributes(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...AvailableAttribute\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n": types.SearchAvailablePageAttributesDocument,
    "\n  query SearchAvailableProductAttributes(\n    $id: ID!\n    $after: String\n    $first: Int!\n    $query: String!\n  ) {\n    productKlass(id: $id) {\n      id\n      availableAttributes(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...AvailableAttribute\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n": types.SearchAvailableProductAttributesDocument,
    "\n  query SearchCategories($after: String, $first: Int!, $query: String!) {\n    search: categories(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchCategoriesDocument,
    "\n  query SearchCollections($after: String, $first: Int!, $query: String!) {\n    search: collections(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchCollectionsDocument,
    "\n  query SearchGiftCardTags(\n    $query: String!\n    $first: Int!\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    search: giftCardTags(\n      filters: { search: $query }\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchGiftCardTagsDocument,
    "\n  query SearchGroups($after: String, $first: Int!, $query: String!) {\n    search: groups(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n          userCanManage\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchGroupsDocument,
    "\n  query SearchMedia($after: String, $first: Int!, $query: String!) {\n    search: media(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchMediaDocument,
    "\n  query SearchOrderVariant(\n    $channel: String!\n    $first: Int!\n    $query: String!\n    $after: String\n    $address: AddressUpdateInput\n    $isPublished: Boolean\n    $stockAvailability: StockAvailability\n  ) {\n    search: products(\n      first: $first\n      after: $after\n      filters: {\n        search: $query\n        isPublished: $isPublished\n        stockAvailability: $stockAvailability\n      }\n      channel: $channel\n    ) {\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n          variants {\n            id\n            name\n            ...on ConcreteProduct {\n              sku\n            }\n            pricing(address: $address) {\n              priceUndiscounted {\n                gross {\n                  ...Money\n                }\n              }\n              price {\n                gross {\n                  ...Money\n                }\n              }\n              onSale\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.SearchOrderVariantDocument,
    "\n  query SearchPageKlasses($after: String, $first: Int!, $query: String!) {\n    search: pageKlasses(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchPageKlassesDocument,
    "\n  query SearchPages($after: String, $first: Int!, $query: String!) {\n    search: pages(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchPagesDocument,
    "\n  query SearchProductKlasses($after: String, $first: Int!, $query: String!) {\n    search: productKlasses(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchProductKlassesDocument,
    "\n  query SearchProducts($after: String, $first: Int!, $query: String!) {\n    search: products(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            channelListings {\n              id\n              channel {\n                id\n                isActive\n                name\n                currencyCode\n              }\n              price {\n                amount\n                currency\n              }\n            }\n          }\n          collections {\n            id\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchProductsDocument,
    "\n  query SearchStaffMembers($after: String, $first: Int!, $query: String!) {\n    search: staffUsers(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n          isActive\n          avatar {\n            alt\n            url\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchStaffMembersDocument,
    "\n  query SearchWarehouses($after: String, $first: Int!, $query: String!) {\n    search: warehouses(\n      after: $after\n      first: $first\n      sortBy: { direction: ASC, field: NAME }\n      filters: { search: $query }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SearchWarehousesDocument,
    "\n  mutation DeleteShippingZone($id: ID!) {\n    deleteShippingZone(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.DeleteShippingZoneDocument,
    "\n  mutation BulkDeleteShippingZone($ids: [ID!]!) {\n    deleteShippingZones(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.BulkDeleteShippingZoneDocument,
    "\n  mutation UpdateDefaultWeightUnit($unit: WeightUnit) {\n    updateShopSettings(data: { defaultWeightUnit: $unit }) {\n      errors {\n        ...Error\n      }\n      result {\n        defaultWeightUnit\n      }\n    }\n  }\n": types.UpdateDefaultWeightUnitDocument,
    "\n  mutation CreateShippingZone($input: ShippingZoneCreationInput!) {\n    createShippingZone(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        countries {\n          ...Country\n        }\n        id\n        name\n      }\n    }\n  }\n": types.CreateShippingZoneDocument,
    "\n  mutation UpdateShippingZone($id: ID!, $input: ShippingZoneUpdateInput!) {\n    updateShippingZone(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        countries {\n          ...Country\n        }\n        id\n        name\n      }\n    }\n  }\n": types.UpdateShippingZoneDocument,
    "\n  mutation UpdateShippingRate($id: ID!, $input: ShippingPriceInput!) {\n    updateShippingPrice(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingMethod {\n          ...ShippingMethod\n        }\n      }\n    }\n  }\n": types.UpdateShippingRateDocument,
    "\n  mutation CreateShippingRate($input: ShippingPriceInput!) {\n    createShippingPrice(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingZone {\n          ...ShippingZoneDetails\n        }\n        shippingMethod {\n          ...ShippingMethod\n        }\n      }\n    }\n  }\n": types.CreateShippingRateDocument,
    "\n  mutation DeleteShippingRate($id: ID!) {\n    deleteShippingPrice(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingZone {\n          ...ShippingZoneDetails\n        }\n      }\n    }\n  }\n": types.DeleteShippingRateDocument,
    "\n  mutation BulkDeleteShippingRate($ids: [ID!]!) {\n    deleteShippingPrices(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.BulkDeleteShippingRateDocument,
    "\n  mutation ShippingMethodChannelListingUpdate(\n    $id: ID!\n    $input: ShippingMethodChannelListingInput!\n  ) {\n    updateShippingMethodChannelListing(id: $id, data: $input) {\n      shippingMethod {\n        ...ShippingMethod\n      }\n      errors {\n        ...ShippingChannelsError\n      }\n    }\n  }\n": types.ShippingMethodChannelListingUpdateDocument,
    "\n  mutation ShippingPriceExcludeProduct(\n    $id: ID!\n    $input: ShippingPriceExcludeProductsInput!\n  ) {\n    excludeProductsFromShippingPrice(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ShippingPriceExcludeProductDocument,
    "\n  mutation ShippingPriceRemoveProductFromExclude($id: ID!, $products: [ID!]!) {\n    removeProductFromShippingPriceExclusionList(id: $id, products: $products) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ShippingPriceRemoveProductFromExcludeDocument,
    "\n  query ShippingZones($first: Int, $after: String, $last: Int, $before: String) {\n    shippingZones(first: $first, after: $after, last: $last, before: $before) {\n      edges {\n        node {\n          ...ShippingZone\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.ShippingZonesDocument,
    "\n  query ShippingZone($id: ID!, $before: String, $after: String, $first: Int, $last: Int) {\n    shippingZone(id: $id) {\n      ...ShippingZone\n      default\n      shippingMethods {\n        ...ShippingMethodWithExcludedProducts\n      }\n      channels {\n        id\n        name\n        currencyCode\n      }\n      warehouses {\n        id\n        name\n      }\n    }\n  }\n": types.ShippingZoneDocument,
    "\n  query ShippingZoneChannels($id: ID!) {\n    shippingZone(id: $id) {\n      id\n      channels {\n        id\n        name\n        currencyCode\n      }\n    }\n  }\n": types.ShippingZoneChannelsDocument,
    "\n  query ChannelShippingZones($filter: ShippingZoneFilter) {\n    shippingZones(filters: $filter, first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.ChannelShippingZonesDocument,
    "\n  query ShippingZonesCount {\n    shippingZones {\n      totalCount\n    }\n  }\n": types.ShippingZonesCountDocument,
    "\n  mutation ShopSettingsUpdate(\n    $shopSettingsInput: ShopSettingsUpdateInput!\n    $addressInput: AddressUpdateInput!\n  ) {\n    updateShopSettings(data: $shopSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Shop\n      }\n    }\n    updateShopAddress(data: $addressInput) {\n      errors {\n        ...Error\n      }\n      result {\n        companyAddress {\n          ...Address\n        }\n      }\n    }\n  }\n": types.ShopSettingsUpdateDocument,
    "\n  query SiteSettings {\n    shop {\n      ...Shop\n    }\n  }\n": types.SiteSettingsDocument,
    "\n  mutation StaffMemberAdd($input: StaffCreationInput!) {\n    createStaffMember(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...StaffMemberDetails\n      }\n    }\n  }\n": types.StaffMemberAddDocument,
    "\n  mutation StaffMemberUpdate($id: ID!, $input: StaffUpdateInput!) {\n    updateStaffMember(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...StaffMemberDetails\n      }\n    }\n  }\n": types.StaffMemberUpdateDocument,
    "\n  mutation StaffMemberDelete($id: ID!) {\n    deleteStaffMember(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.StaffMemberDeleteDocument,
    "\n  mutation StaffAvatarUpdate($image: Upload!) {\n    updateUserAvatar(image: $image) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        avatar {\n          url\n        }\n      }\n    }\n  }\n": types.StaffAvatarUpdateDocument,
    "\n  mutation StaffAvatarDelete {\n    deleteUserAvatar {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        avatar {\n          url\n        }\n      }\n    }\n  }\n": types.StaffAvatarDeleteDocument,
    "\n  mutation ChangeStaffPassword($newPassword: String!, $oldPassword: String!) {\n    changePassword(newPassword: $newPassword, oldPassword: $oldPassword) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.ChangeStaffPasswordDocument,
    "\n  query StaffList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: StaffUserFilter\n    $sort: UserOrderingInput\n  ) {\n    staffUsers(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        cursor\n        node {\n          ...StaffMember\n          avatar(size: 48) {\n            url\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n": types.StaffListDocument,
    "\n  query StaffMemberDetails($id: ID!) {\n    user(id: $id) {\n      ...StaffMemberDetails\n    }\n  }\n": types.StaffMemberDetailsDocument,
    "\n  mutation TaxConfigurationUpdate($id: ID!, $input: TaxConfigurationUpdateInput!) {\n    updateTaxConfiguration(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxConfiguration\n      }\n    }\n  }\n": types.TaxConfigurationUpdateDocument,
    "\n  mutation TaxCountryConfigurationUpdate(\n    $countryCode: CountryCode!\n    $updateTaxClassRates: [TaxClassRateInput!]!\n  ) {\n    updateTaxCountryConfiguration(\n      countryCode: $countryCode\n      updateTaxClassRates: $updateTaxClassRates\n    ) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxCountryConfiguration\n      }\n    }\n  }\n": types.TaxCountryConfigurationUpdateDocument,
    "\n  mutation TaxCountryConfigurationDelete($countryCode: CountryCode!) {\n    deleteTaxCountryConfiguration(countryCode: $countryCode) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxCountryConfiguration\n      }\n    }\n  }\n": types.TaxCountryConfigurationDeleteDocument,
    "\n  mutation TaxClassUpdate($id: ID!, $input: TaxClassUpdateInput!) {\n    updateTaxClass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxClass\n      }\n    }\n  }\n": types.TaxClassUpdateDocument,
    "\n  mutation TaxClassCreate($input: TaxClassCreationInput!) {\n    createTaxClass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxClass\n      }\n    }\n  }\n": types.TaxClassCreateDocument,
    "\n  mutation TaxClassDelete($id: ID!) {\n    deleteTaxClass(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.TaxClassDeleteDocument,
    "\n  query TaxConfigurationsList(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $filter: TaxConfigurationFilter\n  ) {\n    taxConfigurations(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...TaxConfiguration\n        }\n      }\n    }\n  }\n": types.TaxConfigurationsListDocument,
    "\n  query TaxCountriesList {\n    taxCountryConfigurations {\n      ...TaxCountryConfiguration\n    }\n  }\n": types.TaxCountriesListDocument,
    "\n  query TaxClassesList(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $filter: TaxClassFilter\n    $sortBy: TaxClassOrderingInput\n  ) {\n    taxClasses(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          ...TaxClass\n        }\n      }\n    }\n  }\n": types.TaxClassesListDocument,
    "\n  query TaxClassAssign($first: Int, $after: String) {\n    taxClasses(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": types.TaxClassAssignDocument,
    "\n  mutation UpdateProductTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateProduct(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            code\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n": types.UpdateProductTranslationsDocument,
    "\n  mutation UpdateCategoryTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateCategory(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n": types.UpdateCategoryTranslationsDocument,
    "\n  mutation UpdateCollectionTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateCollection(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n": types.UpdateCollectionTranslationsDocument,
    "\n  mutation UpdatePageTranslations(\n    $id: ID!\n    $input: PageTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translatePage(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        translation(languageCode: $language) {\n          ...PageTranslation\n        }\n      }\n    }\n  }\n": types.UpdatePageTranslationsDocument,
    "\n  mutation UpdateAttributeTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateAttribute(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.UpdateAttributeTranslationsDocument,
    "\n  mutation UpdateMenuItemTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateMenuItem(id: $id, data: $input, languageCode: $language) {\n      errors {\n        field\n        message\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n": types.UpdateMenuItemTranslationsDocument,
    "\n  query CategoryTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: CATEGORY\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...CategoryTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.CategoryTranslationsDocument,
    "\n  query CollectionTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: COLLECTION\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...CollectionTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.CollectionTranslationsDocument,
    "\n  query ProductTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: PRODUCT\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...ProductTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.ProductTranslationsDocument,
    "\n  query PageTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(kind: PAGE, before: $before, after: $after, first: $first, last: $last) {\n      edges {\n        node {\n          ...PageTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.PageTranslationsDocument,
    "\n  query VoucherTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: VOUCHER\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...VoucherTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.VoucherTranslationsDocument,
    "\n  query SaleTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(kind: SALE, before: $before, after: $after, first: $first, last: $last) {\n      edges {\n        node {\n          ...SaleTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.SaleTranslationsDocument,
    "\n  query AttributeTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: ATTRIBUTE\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...AttributeTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.AttributeTranslationsDocument,
    "\n  query ShippingMethodTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: SHIPPING_METHOD\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...ShippingMethodTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.ShippingMethodTranslationsDocument,
    "\n  query MenuItemTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: MENU_ITEM\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...MenuItemTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.MenuItemTranslationsDocument,
    "\n  query ProductTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: PRODUCT, id: $id) {\n      ...ProductTranslation\n    }\n  }\n": types.ProductTranslationDetailsDocument,
    "\n  query ProductVariantList($id: ID!) {\n    product(id: $id) {\n      id\n      variants {\n        id\n        name\n        slug\n      }\n    }\n  }\n": types.ProductVariantListDocument,
    "\n  query ProductVariantTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: PRODUCT, id: $id) {\n      ...ProductTranslation\n    }\n  }\n": types.ProductVariantTranslationDetailsDocument,
    "\n  query CategoryTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: CATEGORY, id: $id) {\n      ...CategoryTranslation\n    }\n  }\n": types.CategoryTranslationDetailsDocument,
    "\n  query CollectionTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(id: $id, kind: COLLECTION) {\n      ...CollectionTranslation\n    }\n  }\n": types.CollectionTranslationDetailsDocument,
    "\n  query PageTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(id: $id, kind: PAGE) {\n      ...PageTranslation\n    }\n  }\n": types.PageTranslationDetailsDocument,
    "\n  query SaleTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: SALE, id: $id) {\n      ...SaleTranslation\n    }\n  }\n": types.SaleTranslationDetailsDocument,
    "\n  query VoucherTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: VOUCHER, id: $id) {\n      ...VoucherTranslation\n    }\n  }\n": types.VoucherTranslationDetailsDocument,
    "\n  query AttributeTranslationDetails(\n    $id: ID!\n    $language: LanguageCode!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    translation(kind: ATTRIBUTE, id: $id) {\n      ...AttributeTranslationDetails\n    }\n  }\n": types.AttributeTranslationDetailsDocument,
    "\n  query ShippingMethodTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: SHIPPING_METHOD, id: $id) {\n      ...ShippingMethodTranslation\n    }\n  }\n": types.ShippingMethodTranslationDetailsDocument,
    "\n  query MenuItemTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: MENU_ITEM, id: $id) {\n      ...MenuItemTranslation\n    }\n  }\n": types.MenuItemTranslationDetailsDocument,
    "\n  mutation UpdateMetadata($id: ID!, $input: [MetadataInput!]!, $keysToDelete: [String!]!) {\n    updateMetadata(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Metadata\n        ... on Node {\n          id\n        }\n      }\n    }\n    deleteMetadata(id: $id, keys: $keysToDelete) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Metadata\n        ... on Node {\n          id\n        }\n      }\n    }\n  }\n": types.UpdateMetadataDocument,
    "\n  mutation WarehouseDelete($id: ID!) {\n    deleteWarehouse(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n": types.WarehouseDeleteDocument,
    "\n  mutation WarehouseCreate($input: WarehouseCreationInput!) {\n    createWarehouse(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...WarehouseDetails\n      }\n    }\n  }\n": types.WarehouseCreateDocument,
    "\n  mutation WarehouseUpdate($id: ID!, $input: WarehouseUpdateInput!) {\n    updateWarehouse(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...WarehouseDetails\n      }\n    }\n  }\n": types.WarehouseUpdateDocument,
    "\n  query WarehouseList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: WarehouseFilter\n    $sort: WarehouseOrderingInput\n  ) {\n    warehouses(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...WarehouseWithShipping\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n": types.WarehouseListDocument,
    "\n  query WarehouseDetails($id: ID!) {\n    warehouse(id: $id) {\n      ...WarehouseDetails\n    }\n  }\n": types.WarehouseDetailsDocument,
    "\n  query WarehousesCount {\n    warehouses {\n      totalCount\n    }\n  }\n": types.WarehousesCountDocument,
    "\n  fragment ShopSettings on Site {\n    countries {\n      ...Country\n    }\n    allowedStates\n    defaultCountry {\n      ...Country\n    }\n    defaultWeightUnit\n    domain\n    languages {\n      ...Language\n    }\n    logo {\n      url\n      alt\n      height\n      width\n    }\n    name\n    trackInventoryByDefault\n    maxItemCountPerCheckout\n  }\n": types.ShopSettingsFragmentDoc,
    "\n  query ShopInfo {\n    shop {\n      id\n      ...ShopSettings\n      permissions {\n        code\n        name\n      }\n    }\n  }\n": types.ShopInfoDocument,
    "\n  query MainMenu($channel: String!) {\n    menu(slug: \"navbar\", channel: $channel) {\n      id\n      items {\n        ...MenuItemWithChildren\n      }\n    }\n  }\n": types.MainMenuDocument,
    "\n  query GalleryMedia($first: Int) {\n    media(first: $first) {\n      edges {\n        node {\n          id\n          type\n          title\n          alt\n          file {\n            url\n            contentType\n          }\n          width\n          height\n          aspectRatio\n          placeholder\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GalleryMediaDocument,
    "\n  mutation CreateCheckout($email: String, $lines: [CheckoutLineInput!]!, $channel: String!) {\n    createCheckout(data: { channel: $channel, email: $email, lines: $lines }) {\n      result {\n        id\n      }\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n": types.CreateCheckoutDocument,
    "\n  query ProductBySlug($slug: String!, $channel: String!) {\n    product(slug: $slug, channel: $channel) {\n      ...ProductDetails\n    }\n  }\n": types.ProductBySlugDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation login($email: String!, $password: String!) {\n    obtainToken(authInput: { email: $email, password: $password }) {\n      result {\n        accessToken\n        refreshToken\n        csrfToken\n        user {\n          ...UserDetails\n        }\n      }\n      errors {\n        message\n        field\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation login($email: String!, $password: String!) {\n    obtainToken(authInput: { email: $email, password: $password }) {\n      result {\n        accessToken\n        refreshToken\n        csrfToken\n        user {\n          ...UserDetails\n        }\n      }\n      errors {\n        message\n        field\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AvailableExternalAuthentications {\n    shop {\n      id\n      availableExternalAuthentications {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query AvailableExternalAuthentications {\n    shop {\n      id\n      availableExternalAuthentications {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation FileUpload($file: Upload!) {\n  uploadFile(file: $file) {\n    result {\n      ...File\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation FileUpload($file: Upload!) {\n  uploadFile(file: $file) {\n    result {\n      ...File\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PublicMetafields($id: ID!, $keys: [String!]!) {\n  app(id: $id) {\n    id\n    metafields(keys: $keys)\n  }\n}\n\nquery PrivateMetafields($id: ID!, $keys: [String!]!) {\n  app(id: $id) {\n    id\n    privateMetafields(keys: $keys)\n  }\n}\n\nquery PublicMetafieldsInferred($keys: [String!]!) {\n  app {\n    id\n    metafields(keys: $keys)\n  }\n}\n\nquery PrivateMetafieldsInferred($keys: [String!]!) {\n  app {\n    id\n    privateMetafields(keys: $keys)\n  }\n}\n\nmutation UpdatePublicMetadata($id: ID!, $input: [MetadataInput!]!, $keys: [String!]!) {\n  updateMetadata(id: $id, data: $input) {\n    result {\n      metafields(keys: $keys)\n    }\n    errors {\n      ...Error\n    }\n  }\n}\n\nmutation UpdatePrivateMetadata($id: ID!, $input: [MetadataInput!]!, $keys: [String!]!) {\n  updatePrivateMetadata(id: $id, data: $input) {\n    result {\n      privateMetafields(keys: $keys)\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["query PublicMetafields($id: ID!, $keys: [String!]!) {\n  app(id: $id) {\n    id\n    metafields(keys: $keys)\n  }\n}\n\nquery PrivateMetafields($id: ID!, $keys: [String!]!) {\n  app(id: $id) {\n    id\n    privateMetafields(keys: $keys)\n  }\n}\n\nquery PublicMetafieldsInferred($keys: [String!]!) {\n  app {\n    id\n    metafields(keys: $keys)\n  }\n}\n\nquery PrivateMetafieldsInferred($keys: [String!]!) {\n  app {\n    id\n    privateMetafields(keys: $keys)\n  }\n}\n\nmutation UpdatePublicMetadata($id: ID!, $input: [MetadataInput!]!, $keys: [String!]!) {\n  updateMetadata(id: $id, data: $input) {\n    result {\n      metafields(keys: $keys)\n    }\n    errors {\n      ...Error\n    }\n  }\n}\n\nmutation UpdatePrivateMetadata($id: ID!, $input: [MetadataInput!]!, $keys: [String!]!) {\n  updatePrivateMetadata(id: $id, data: $input) {\n    result {\n      privateMetafields(keys: $keys)\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TransactionProcessedEvents($id: ID!) {\n  transaction(id: $id) {\n    processedEvents: metafield(key: \"processedEvents\")\n  }\n}\n\nmutation TransactionUpdateProcessedEvents($id: ID!, $input: String!) {\n  updateMetadata(id: $id, data: {key: \"processedEvents\", value: $input}) {\n    __typename\n    errors {\n      field\n      message\n    }\n  }\n}"): (typeof documents)["query TransactionProcessedEvents($id: ID!) {\n  transaction(id: $id) {\n    processedEvents: metafield(key: \"processedEvents\")\n  }\n}\n\nmutation TransactionUpdateProcessedEvents($id: ID!, $input: String!) {\n  updateMetadata(id: $id, data: {key: \"processedEvents\", value: $input}) {\n    __typename\n    errors {\n      field\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription TransactionActionRequestSubscription {\n  event {\n    ... on TransactionActionRequest {\n      transaction {\n        id\n        reference\n        type\n        amountAuthorized {\n          amount\n          currency\n        }\n        amountCharged {\n          amount\n        }\n        amountVoided {\n          amount\n        }\n        amountRefunded {\n          amount\n        }\n      }\n      action {\n        actionType\n        amount\n      }\n    }\n  }\n}\n\nfragment TransactionActionPayload on TransactionActionRequest {\n  transaction {\n    id\n    reference\n    type\n    amountAuthorized {\n      amount\n      currency\n    }\n    amountCharged {\n      amount\n    }\n    amountVoided {\n      amount\n    }\n    amountRefunded {\n      amount\n    }\n  }\n  action {\n    actionType\n    amount\n  }\n}"): (typeof documents)["subscription TransactionActionRequestSubscription {\n  event {\n    ... on TransactionActionRequest {\n      transaction {\n        id\n        reference\n        type\n        amountAuthorized {\n          amount\n          currency\n        }\n        amountCharged {\n          amount\n        }\n        amountVoided {\n          amount\n        }\n        amountRefunded {\n          amount\n        }\n      }\n      action {\n        actionType\n        amount\n      }\n    }\n  }\n}\n\nfragment TransactionActionPayload on TransactionActionRequest {\n  transaction {\n    id\n    reference\n    type\n    amountAuthorized {\n      amount\n      currency\n    }\n    amountCharged {\n      amount\n    }\n    amountVoided {\n      amount\n    }\n    amountRefunded {\n      amount\n    }\n  }\n  action {\n    actionType\n    amount\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateWebhooks($targetUrl: String!, $query: String) {\n  createWebhook(\n    data: {name: \"Checkout app payment notifications\", targetUrl: $targetUrl, events: [TRANSACTION_ACTION_REQUEST], isActive: true, query: $query}\n  ) {\n    __typename\n    errors {\n      ...Error\n    }\n  }\n}\n\nquery CheckWebhooks {\n  app {\n    webhooks {\n      id\n      targetUrl\n    }\n  }\n}"): (typeof documents)["mutation CreateWebhooks($targetUrl: String!, $query: String) {\n  createWebhook(\n    data: {name: \"Checkout app payment notifications\", targetUrl: $targetUrl, events: [TRANSACTION_ACTION_REQUEST], isActive: true, query: $query}\n  ) {\n    __typename\n    errors {\n      ...Error\n    }\n  }\n}\n\nquery CheckWebhooks {\n  app {\n    webhooks {\n      id\n      targetUrl\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Address on Address {\n  id\n  phone\n  firstName\n  lastName\n  companyName\n  streetAddress1\n  streetAddress2\n  city\n  cityArea\n  postalCode\n  isDefaultBillingAddress\n  isDefaultShippingAddress\n  countryArea\n  country {\n    code\n    name\n  }\n  coordinates {\n    latitude\n    longitude\n  }\n}"): (typeof documents)["fragment Address on Address {\n  id\n  phone\n  firstName\n  lastName\n  companyName\n  streetAddress1\n  streetAddress2\n  city\n  cityArea\n  postalCode\n  isDefaultBillingAddress\n  isDefaultShippingAddress\n  countryArea\n  country {\n    code\n    name\n  }\n  coordinates {\n    latitude\n    longitude\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Attribute on Attribute {\n  id\n  name\n  slug\n  type\n  visibleInStorefront\n  filterableInDashboard\n  filterableInStorefront\n  unit\n  inputType\n}"): (typeof documents)["fragment Attribute on Attribute {\n  id\n  name\n  slug\n  type\n  visibleInStorefront\n  filterableInDashboard\n  filterableInStorefront\n  unit\n  inputType\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AttributeDetails on Attribute {\n  ...Attribute\n  ...Metadata\n  availableInGrid\n  inputType\n  entityType\n  unit\n  storefrontSearchPosition\n  valueRequired\n}"): (typeof documents)["fragment AttributeDetails on Attribute {\n  ...Attribute\n  ...Metadata\n  availableInGrid\n  inputType\n  entityType\n  unit\n  storefrontSearchPosition\n  valueRequired\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AttributeFilterChoice on Value {\n  id\n  name\n  slug\n  translation {\n    name\n  }\n}"): (typeof documents)["fragment AttributeFilterChoice on Value {\n  id\n  name\n  slug\n  translation {\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AttributeFilter on Attribute {\n  id\n  inputType\n  name\n  translation {\n    id\n    name\n  }\n  slug\n  withChoices\n  values(first: 20) {\n    edges {\n      node {\n        ...AttributeFilterChoice\n      }\n      cursor\n    }\n  }\n}"): (typeof documents)["fragment AttributeFilter on Attribute {\n  id\n  inputType\n  name\n  translation {\n    id\n    name\n  }\n  slug\n  withChoices\n  values(first: 20) {\n    edges {\n      node {\n        ...AttributeFilterChoice\n      }\n      cursor\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CategoryBasic on Category {\n  id\n  name\n  slug\n  translation {\n    id\n    name\n  }\n}"): (typeof documents)["fragment CategoryBasic on Category {\n  id\n  name\n  slug\n  translation {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CategoryDetails on Category {\n  id\n  ...CategoryBasic\n  seoTitle\n  seoDescription\n  description\n  translation {\n    id\n    description\n  }\n  backgroundImage {\n    ...Image\n  }\n  ancestors(first: 5) {\n    edges {\n      node {\n        ...CategoryBasic\n      }\n    }\n  }\n  ...Metadata\n}"): (typeof documents)["fragment CategoryDetails on Category {\n  id\n  ...CategoryBasic\n  seoTitle\n  seoDescription\n  description\n  translation {\n    id\n    description\n  }\n  backgroundImage {\n    ...Image\n  }\n  ancestors(first: 5) {\n    edges {\n      node {\n        ...CategoryBasic\n      }\n    }\n  }\n  ...Metadata\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Channel on Channel {\n  id\n  name\n  slug\n  countries {\n    code\n  }\n  isActive\n  currencyCode\n  defaultCountry {\n    code\n    name\n  }\n  stockSettings {\n    allocationStrategy\n  }\n}"): (typeof documents)["fragment Channel on Channel {\n  id\n  name\n  slug\n  countries {\n    code\n  }\n  isActive\n  currencyCode\n  defaultCountry {\n    code\n    name\n  }\n  stockSettings {\n    allocationStrategy\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CheckoutError on CheckoutError {\n  message\n  field\n  code\n}"): (typeof documents)["fragment CheckoutError on CheckoutError {\n  message\n  field\n  code\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Checkout on Checkout {\n  id\n  customerEmail\n  customerFirstName\n  customerLastName\n  customerPhone\n  voucherCode\n  billingAddress {\n    ...Address\n  }\n  shippingAddress {\n    ...Address\n  }\n  fulfillmentMethod {\n    ...FulfillmentMethod\n  }\n  isShippingRequired\n  availableShippingMethods {\n    ...FulfillmentMethod\n  }\n  availablePaymentGateways {\n    id\n    name\n    config {\n      field\n      value\n    }\n  }\n  lines {\n    ...CheckoutLine\n  }\n  discount {\n    ...Money\n  }\n  discountName\n  translatedDiscountName\n  giftCards {\n    ...GiftCard\n  }\n  subtotalPrice {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  channel {\n    id\n    slug\n  }\n  user {\n    id\n    email\n    firstName\n    lastName\n  }\n  fulfillmentDeadline\n  pointsOfContact {\n    ...PointOfContact\n  }\n  validationErrors {\n    field\n    message\n  }\n}"): (typeof documents)["fragment Checkout on Checkout {\n  id\n  customerEmail\n  customerFirstName\n  customerLastName\n  customerPhone\n  voucherCode\n  billingAddress {\n    ...Address\n  }\n  shippingAddress {\n    ...Address\n  }\n  fulfillmentMethod {\n    ...FulfillmentMethod\n  }\n  isShippingRequired\n  availableShippingMethods {\n    ...FulfillmentMethod\n  }\n  availablePaymentGateways {\n    id\n    name\n    config {\n      field\n      value\n    }\n  }\n  lines {\n    ...CheckoutLine\n  }\n  discount {\n    ...Money\n  }\n  discountName\n  translatedDiscountName\n  giftCards {\n    ...GiftCard\n  }\n  subtotalPrice {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  channel {\n    id\n    slug\n  }\n  user {\n    id\n    email\n    firstName\n    lastName\n  }\n  fulfillmentDeadline\n  pointsOfContact {\n    ...PointOfContact\n  }\n  validationErrors {\n    field\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CheckoutLine on CheckoutLine {\n  id\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    ...Money\n  }\n  product {\n    id\n    name\n    parent {\n      id\n      name\n      translation {\n        id\n        name\n      }\n      slug\n      thumbnail {\n        ...Image\n      }\n      media {\n        alt\n        type\n        url(size: 72)\n      }\n    }\n    attributes(variantSelection: ALL) {\n      values {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n    pricing {\n      price {\n        gross {\n          ...Money\n        }\n      }\n    }\n    translation {\n      id\n      name\n    }\n    media {\n      alt\n      type\n      url(size: 72)\n    }\n  }\n  quantity\n}"): (typeof documents)["fragment CheckoutLine on CheckoutLine {\n  id\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    ...Money\n  }\n  product {\n    id\n    name\n    parent {\n      id\n      name\n      translation {\n        id\n        name\n      }\n      slug\n      thumbnail {\n        ...Image\n      }\n      media {\n        alt\n        type\n        url(size: 72)\n      }\n    }\n    attributes(variantSelection: ALL) {\n      values {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n    pricing {\n      price {\n        gross {\n          ...Money\n        }\n      }\n    }\n    translation {\n      id\n      name\n    }\n    media {\n      alt\n      type\n      url(size: 72)\n    }\n  }\n  quantity\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CollectionBasic on Collection {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  slug\n}"): (typeof documents)["fragment CollectionBasic on Collection {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  slug\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CollectionDetails on Collection {\n  id\n  ...CollectionBasic\n  seoTitle\n  seoDescription\n  description\n  translation {\n    id\n    description\n  }\n  backgroundImage {\n    ...Image\n  }\n  ...Metadata\n  channelListings {\n    id\n    isPublished\n    publishedAt\n    channel {\n      id\n      name\n    }\n  }\n}"): (typeof documents)["fragment CollectionDetails on Collection {\n  id\n  ...CollectionBasic\n  seoTitle\n  seoDescription\n  description\n  translation {\n    id\n    description\n  }\n  backgroundImage {\n    ...Image\n  }\n  ...Metadata\n  channelListings {\n    id\n    isPublished\n    publishedAt\n    channel {\n      id\n      name\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FulfillmentMethod on FulfillmentMethod {\n  ... on ShippingMethod {\n    id\n    name\n    description\n    translation {\n      id\n      name\n      description\n    }\n    price {\n      ...Money\n    }\n    minimumDeliveryDays\n    maximumDeliveryDays\n  }\n  ... on Warehouse {\n    id\n  }\n}"): (typeof documents)["fragment FulfillmentMethod on FulfillmentMethod {\n  ... on ShippingMethod {\n    id\n    name\n    description\n    translation {\n      id\n      name\n      description\n    }\n    price {\n      ...Money\n    }\n    minimumDeliveryDays\n    maximumDeliveryDays\n  }\n  ... on Warehouse {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ErrorDetails on CheckoutError {\n  field\n  message\n  code\n}"): (typeof documents)["fragment ErrorDetails on CheckoutError {\n  field\n  message\n  code\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Error on ErrorInterface {\n  message\n  field\n  code\n}"): (typeof documents)["fragment Error on ErrorInterface {\n  message\n  field\n  code\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment File on File {\n  url\n  contentType\n}"): (typeof documents)["fragment File on File {\n  url\n  contentType\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment GiftCard on GiftCard {\n  displayCode\n  id\n  currentBalance {\n    ...Money\n  }\n}"): (typeof documents)["fragment GiftCard on GiftCard {\n  displayCode\n  id\n  currentBalance {\n    ...Money\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment HomepageBlock on MenuItem {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  page {\n    id\n    content\n    title\n    translation {\n      content\n      title\n    }\n  }\n}"): (typeof documents)["fragment HomepageBlock on MenuItem {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  page {\n    id\n    content\n    title\n    translation {\n      content\n      title\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Image on Image {\n  url\n  alt\n}"): (typeof documents)["fragment Image on Image {\n  url\n  alt\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MenuItem on MenuItem {\n  id\n  name\n  level\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  url\n}"): (typeof documents)["fragment MenuItem on MenuItem {\n  id\n  name\n  level\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  url\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MenuItemWithChildren on MenuItem {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  children {\n    ...MenuItem\n    children {\n      ...MenuItem\n    }\n  }\n  url\n}"): (typeof documents)["fragment MenuItemWithChildren on MenuItem {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  category {\n    id\n    slug\n  }\n  collection {\n    id\n    slug\n  }\n  page {\n    id\n    slug\n  }\n  children {\n    ...MenuItem\n    children {\n      ...MenuItem\n    }\n  }\n  url\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MetadataItem on MetadataItem {\n  key\n  value\n}\n\nfragment Metadata on ObjectWithMetadata {\n  metadata {\n    ...MetadataItem\n  }\n  privateMetadata {\n    ...MetadataItem\n  }\n}"): (typeof documents)["fragment MetadataItem on MetadataItem {\n  key\n  value\n}\n\nfragment Metadata on ObjectWithMetadata {\n  metadata {\n    ...MetadataItem\n  }\n  privateMetadata {\n    ...MetadataItem\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Money on Money {\n  currency\n  amount\n}"): (typeof documents)["fragment Money on Money {\n  currency\n  amount\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Order on Order {\n  id\n  createdAt\n  number\n  status\n  userEmail\n  isPaid\n  shippingTaxRate\n  shippingMethodName\n  privateMetafield(key: \"payment\")\n  discounts {\n    type\n    name\n    amount {\n      ...Money\n    }\n  }\n  shippingAddress {\n    ...Address\n  }\n  billingAddress {\n    ...Address\n  }\n  fulfillmentMethod {\n    ...ShippingMethod\n  }\n  total {\n    currency\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  voucher {\n    code\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n  }\n  lines {\n    ...OrderLine\n  }\n  totalBalance {\n    ...Money\n  }\n  totalCaptured {\n    ...Money\n  }\n}"): (typeof documents)["fragment Order on Order {\n  id\n  createdAt\n  number\n  status\n  userEmail\n  isPaid\n  shippingTaxRate\n  shippingMethodName\n  privateMetafield(key: \"payment\")\n  discounts {\n    type\n    name\n    amount {\n      ...Money\n    }\n  }\n  shippingAddress {\n    ...Address\n  }\n  billingAddress {\n    ...Address\n  }\n  fulfillmentMethod {\n    ...ShippingMethod\n  }\n  total {\n    currency\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  voucher {\n    code\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n    net {\n      ...Money\n    }\n  }\n  lines {\n    ...OrderLine\n  }\n  totalBalance {\n    ...Money\n  }\n  totalCaptured {\n    ...Money\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment OrderLine on OrderLine {\n  id\n  isShippingRequired\n  productName\n  quantity\n  taxRate\n  quantity\n  quantityFulfilled\n  quantityToFulfill\n  allocations {\n    id\n    quantity\n    warehouse {\n      id\n      name\n    }\n  }\n  product {\n    id\n    name\n    sku\n    preorder {\n      endDate\n    }\n    category {\n      name\n    }\n    productKlass {\n      isDigital\n      kind\n    }\n    trackInventory\n    stocks {\n      ...Stock\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    gross {\n      ...Money\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n}"): (typeof documents)["fragment OrderLine on OrderLine {\n  id\n  isShippingRequired\n  productName\n  quantity\n  taxRate\n  quantity\n  quantityFulfilled\n  quantityToFulfill\n  allocations {\n    id\n    quantity\n    warehouse {\n      id\n      name\n    }\n  }\n  product {\n    id\n    name\n    sku\n    preorder {\n      endDate\n    }\n    category {\n      name\n    }\n    productKlass {\n      isDigital\n      kind\n    }\n    trackInventory\n    stocks {\n      ...Stock\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    gross {\n      ...Money\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PageInfo on PageInfo {\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  endCursor\n}"): (typeof documents)["fragment PageInfo on PageInfo {\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  endCursor\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PointOfContact on PointOfContact {\n  id\n  firstName\n  lastName\n  email\n  phone\n  notes\n}"): (typeof documents)["fragment PointOfContact on PointOfContact {\n  id\n  firstName\n  lastName\n  email\n  phone\n  notes\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProductCard on Product {\n  id\n  slug\n  name\n  translation {\n    id\n    name\n  }\n  thumbnail {\n    ...Image\n  }\n  category {\n    id\n    name\n    translation {\n      id\n      name\n    }\n  }\n  media {\n    url\n    alt\n    type\n  }\n  attributes {\n    slug\n    values {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment ProductCard on Product {\n  id\n  slug\n  name\n  translation {\n    id\n    name\n  }\n  thumbnail {\n    ...Image\n  }\n  category {\n    id\n    name\n    translation {\n      id\n      name\n    }\n  }\n  media {\n    url\n    alt\n    type\n  }\n  attributes {\n    slug\n    values {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProductVariant on Product {\n  id\n  name\n  slug\n}\n\nfragment ProductAncestor on AbstractProduct {\n  id\n  name\n  slug\n  variants {\n    ...ProductVariant\n  }\n}\n\nfragment BaseProductDetails on Product {\n  id\n  name\n  slug\n  description\n  seoDescription\n  seoTitle\n  isAvailableForPurchase\n  translation {\n    id\n    description\n    name\n  }\n  attributes {\n    ...AttributeDetails\n  }\n  category {\n    ...CategoryBasic\n  }\n  media {\n    ...ProductMediaItem\n  }\n  thumbnail {\n    ...Image\n  }\n  category {\n    name\n  }\n}\n\nfragment AbstractProductDetails on AbstractProduct {\n  ...BaseProductDetails\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n  ancestors {\n    ...ProductAncestor\n  }\n  variants {\n    ...ProductVariant\n  }\n}\n\nfragment ConcreteProductDetails on ConcreteProduct {\n  ...BaseProductDetails\n  quantityAvailable\n  ancestors {\n    ...ProductAncestor\n  }\n  pricing {\n    price {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nfragment ProductDetails on Product {\n  ... on ConcreteProduct {\n    ...ConcreteProductDetails\n  }\n  ... on AbstractProduct {\n    ...AbstractProductDetails\n  }\n}"): (typeof documents)["fragment ProductVariant on Product {\n  id\n  name\n  slug\n}\n\nfragment ProductAncestor on AbstractProduct {\n  id\n  name\n  slug\n  variants {\n    ...ProductVariant\n  }\n}\n\nfragment BaseProductDetails on Product {\n  id\n  name\n  slug\n  description\n  seoDescription\n  seoTitle\n  isAvailableForPurchase\n  translation {\n    id\n    description\n    name\n  }\n  attributes {\n    ...AttributeDetails\n  }\n  category {\n    ...CategoryBasic\n  }\n  media {\n    ...ProductMediaItem\n  }\n  thumbnail {\n    ...Image\n  }\n  category {\n    name\n  }\n}\n\nfragment AbstractProductDetails on AbstractProduct {\n  ...BaseProductDetails\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n  ancestors {\n    ...ProductAncestor\n  }\n  variants {\n    ...ProductVariant\n  }\n}\n\nfragment ConcreteProductDetails on ConcreteProduct {\n  ...BaseProductDetails\n  quantityAvailable\n  ancestors {\n    ...ProductAncestor\n  }\n  pricing {\n    price {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nfragment ProductDetails on Product {\n  ... on ConcreteProduct {\n    ...ConcreteProductDetails\n  }\n  ... on AbstractProduct {\n    ...AbstractProductDetails\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProductMediaItem on ProductMediaItem {\n  id\n  alt\n  sortOrder\n  url\n  type\n  oembedData\n}"): (typeof documents)["fragment ProductMediaItem on ProductMediaItem {\n  id\n  alt\n  sortOrder\n  url\n  type\n  oembedData\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment SelectedAttributeDetails on Attribute {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  type\n  unit\n  values {\n    edges {\n      node {\n        id\n        name\n        translation {\n          id\n          name\n          richText\n        }\n        value\n      }\n    }\n  }\n}"): (typeof documents)["fragment SelectedAttributeDetails on Attribute {\n  id\n  name\n  translation {\n    id\n    name\n  }\n  type\n  unit\n  values {\n    edges {\n      node {\n        id\n        name\n        translation {\n          id\n          name\n          richText\n        }\n        value\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ShippingMethod on ShippingMethod {\n  name\n  minimumDeliveryDays\n  maximumDeliveryDays\n}"): (typeof documents)["fragment ShippingMethod on ShippingMethod {\n  name\n  minimumDeliveryDays\n  maximumDeliveryDays\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Stock on Stock {\n  id\n  quantity\n  quantityAllocated\n  warehouse {\n    ...Warehouse\n  }\n}"): (typeof documents)["fragment Stock on Stock {\n  id\n  quantity\n  quantityAllocated\n  warehouse {\n    ...Warehouse\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment TransactionEvent on TransactionEvent {\n  name\n  reference\n}"): (typeof documents)["fragment TransactionEvent on TransactionEvent {\n  name\n  reference\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment TransactionItem on TransactionItem {\n  id\n  reference\n  amountVoided {\n    ...Money\n  }\n  amountRefunded {\n    ...Money\n  }\n  amountCharged {\n    ...Money\n  }\n  amountAuthorized {\n    ...Money\n  }\n  events {\n    ...TransactionEvent\n  }\n}"): (typeof documents)["fragment TransactionItem on TransactionItem {\n  id\n  reference\n  amountVoided {\n    ...Money\n  }\n  amountRefunded {\n    ...Money\n  }\n  amountCharged {\n    ...Money\n  }\n  amountAuthorized {\n    ...Money\n  }\n  events {\n    ...TransactionEvent\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserBase on User {\n  id\n  email\n  firstName\n  lastName\n  isStaff\n  userPermissions {\n    ...UserPermission\n  }\n  avatar {\n    url\n  }\n}"): (typeof documents)["fragment UserBase on User {\n  id\n  email\n  firstName\n  lastName\n  isStaff\n  userPermissions {\n    ...UserPermission\n  }\n  avatar {\n    url\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserDetails on User {\n  ...UserBase\n  metadata {\n    key\n    value\n  }\n  defaultShippingAddress {\n    ...Address\n  }\n  defaultBillingAddress {\n    ...Address\n  }\n  addresses {\n    ...Address\n  }\n}"): (typeof documents)["fragment UserDetails on User {\n  ...UserBase\n  metadata {\n    key\n    value\n  }\n  defaultShippingAddress {\n    ...Address\n  }\n  defaultBillingAddress {\n    ...Address\n  }\n  addresses {\n    ...Address\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserPermission on UserPermission {\n  code\n  name\n}"): (typeof documents)["fragment UserPermission on UserPermission {\n  code\n  name\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ValidationRules on AddressValidationData {\n  addressFormat\n  allowedFields\n  requiredFields\n  countryAreaType\n  postalCodeType\n  cityType\n  countryAreaChoices {\n    raw\n    verbose\n  }\n}"): (typeof documents)["fragment ValidationRules on AddressValidationData {\n  addressFormat\n  allowedFields\n  requiredFields\n  countryAreaType\n  postalCodeType\n  cityType\n  countryAreaChoices {\n    raw\n    verbose\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Warehouse on Warehouse {\n  id\n  name\n}"): (typeof documents)["fragment Warehouse on Warehouse {\n  id\n  name\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddressDelete($id: ID!) {\n  deleteAddress(id: $id) {\n    user {\n      addresses {\n        ...Address\n      }\n    }\n  }\n}"): (typeof documents)["mutation AddressDelete($id: ID!) {\n  deleteAddress(id: $id) {\n    user {\n      addresses {\n        ...Address\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddressSetDefault($addressID: ID!, $userID: ID!, $addressType: AddressType!) {\n  setDefaultAddress(addressId: $addressID, type: $addressType, userId: $userID) {\n    __typename\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation AddressSetDefault($addressID: ID!, $userID: ID!, $addressType: AddressType!) {\n  setDefaultAddress(addressId: $addressID, type: $addressType, userId: $userID) {\n    __typename\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutAddProductLine($checkoutId: ID!, $productId: ID!) {\n  addCheckoutLines(id: $checkoutId, lines: [{quantity: 1, productId: $productId}]) {\n    result {\n      ...Checkout\n    }\n    errors {\n      message\n      ... on CheckoutError {\n        code\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation CheckoutAddProductLine($checkoutId: ID!, $productId: ID!) {\n  addCheckoutLines(id: $checkoutId, lines: [{quantity: 1, productId: $productId}]) {\n    result {\n      ...Checkout\n    }\n    errors {\n      message\n      ... on CheckoutError {\n        code\n        field\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutAddPromoCode($id: ID!, $promoCode: String!) {\n  addPromoCodeToCheckout(id: $id, promoCode: $promoCode) {\n    result {\n      ...Checkout\n    }\n    errors {\n      message\n      field\n    }\n  }\n}"): (typeof documents)["mutation CheckoutAddPromoCode($id: ID!, $promoCode: String!) {\n  addPromoCodeToCheckout(id: $id, promoCode: $promoCode) {\n    result {\n      ...Checkout\n    }\n    errors {\n      message\n      field\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutBillingAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateCheckoutBillingAddress(data: $address, id: $id) {\n    result {\n      ...Checkout\n    }\n    errors {\n      field\n      message\n    }\n  }\n}"): (typeof documents)["mutation CheckoutBillingAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateCheckoutBillingAddress(data: $address, id: $id) {\n    result {\n      ...Checkout\n    }\n    errors {\n      field\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation completeCheckout($checkoutId: ID!, $paymentData: JSONString) {\n  completeCheckout(id: $checkoutId, paymentData: $paymentData) {\n    order {\n      id\n      status\n      billingAddress {\n        id\n        ...Address\n      }\n      shippingAddress {\n        id\n        ...Address\n      }\n    }\n    confirmationNeeded\n    confirmationData\n    errors {\n      field\n      message\n    }\n  }\n}"): (typeof documents)["mutation completeCheckout($checkoutId: ID!, $paymentData: JSONString) {\n  completeCheckout(id: $checkoutId, paymentData: $paymentData) {\n    order {\n      id\n      status\n      billingAddress {\n        id\n        ...Address\n      }\n      shippingAddress {\n        id\n        ...Address\n      }\n    }\n    confirmationNeeded\n    confirmationData\n    errors {\n      field\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutContactInfoUpdate($id: ID!, $input: CheckoutContactInfoUpdateInput!) {\n  updateCheckoutContactInfo(data: $input, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation CheckoutContactInfoUpdate($id: ID!, $input: CheckoutContactInfoUpdateInput!) {\n  updateCheckoutContactInfo(data: $input, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createCheckoutPayment($checkoutId: ID!, $paymentInput: PaymentInput!) {\n  createCheckoutPayment(id: $checkoutId, data: $paymentInput) {\n    payment {\n      id\n      total {\n        ...Money\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation createCheckoutPayment($checkoutId: ID!, $paymentInput: PaymentInput!) {\n  createCheckoutPayment(id: $checkoutId, data: $paymentInput) {\n    payment {\n      id\n      total {\n        ...Money\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation attachCustomerToCheckout($id: ID!) {\n  attachCustomerToCheckout(id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation attachCustomerToCheckout($id: ID!) {\n  attachCustomerToCheckout(id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation detachCustomerFromCheckout($id: ID!) {\n  detachCustomerFromCheckout(id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation detachCustomerFromCheckout($id: ID!) {\n  detachCustomerFromCheckout(id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateCheckoutFulfillmentMethod($id: ID!, $fulfillmentMethodId: ID!, $fulfillmentDeadline: DateTime) {\n  updateCheckoutFulfillmentMethod(\n    id: $id\n    fulfillmentMethodId: $fulfillmentMethodId\n    fulfillmentDeadline: $fulfillmentDeadline\n  ) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation updateCheckoutFulfillmentMethod($id: ID!, $fulfillmentMethodId: ID!, $fulfillmentDeadline: DateTime) {\n  updateCheckoutFulfillmentMethod(\n    id: $id\n    fulfillmentMethodId: $fulfillmentMethodId\n    fulfillmentDeadline: $fulfillmentDeadline\n  ) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutLineDelete($checkoutId: ID!, $lineId: ID!) {\n  deleteCheckoutLine(id: $checkoutId, lineId: $lineId) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation CheckoutLineDelete($checkoutId: ID!, $lineId: ID!) {\n  deleteCheckoutLine(id: $checkoutId, lineId: $lineId) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutLineUpdate($id: ID!, $lines: [CheckoutLineUpdateInput!]!) {\n  updateCheckoutLines(id: $id, lines: $lines) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation CheckoutLineUpdate($id: ID!, $lines: [CheckoutLineUpdateInput!]!) {\n  updateCheckoutLines(id: $id, lines: $lines) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateCheckoutLines($checkoutId: ID!, $lines: [CheckoutLineUpdateInput!]!) {\n  updateCheckoutLines(id: $checkoutId, lines: $lines) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation updateCheckoutLines($checkoutId: ID!, $lines: [CheckoutLineUpdateInput!]!) {\n  updateCheckoutLines(id: $checkoutId, lines: $lines) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation removePromoCodeFromCheckout($id: ID!, $promoCode: String, $promoCodeId: ID) {\n  removePromoCodeFromCheckout(\n    id: $id\n    promoCode: $promoCode\n    promoCodeId: $promoCodeId\n  ) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation removePromoCodeFromCheckout($id: ID!, $promoCode: String, $promoCodeId: ID) {\n  removePromoCodeFromCheckout(\n    id: $id\n    promoCode: $promoCode\n    promoCodeId: $promoCodeId\n  ) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutShippingAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateCheckoutShippingAddress(data: $address, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation CheckoutShippingAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateCheckoutShippingAddress(data: $address, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutShippingMethodUpdate($id: ID!, $shippingMethodId: ID!) {\n  updateCheckoutShippingMethod(shippingMethodId: $shippingMethodId, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"): (typeof documents)["mutation CheckoutShippingMethodUpdate($id: ID!, $shippingMethodId: ID!) {\n  updateCheckoutShippingMethod(shippingMethodId: $shippingMethodId, id: $id) {\n    result {\n      ...Checkout\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation accountConfirm($email: String!, $token: String!) {\n  confirmAccount(email: $email, token: $token) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation accountConfirm($email: String!, $token: String!) {\n  confirmAccount(email: $email, token: $token) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation confirmEmailChange($token: String!, $channel: String!) {\n  confirmEmailChange(token: $token, channel: $channel) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation confirmEmailChange($token: String!, $channel: String!) {\n  confirmEmailChange(token: $token, channel: $channel) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createAccountAddress($input: AddressUpdateInput!) {\n  addAddress(data: $input) {\n    address {\n      ...Address\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation createAccountAddress($input: AddressUpdateInput!) {\n  addAddress(data: $input) {\n    address {\n      ...Address\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateOrder($id: ID!) {\n  createOrderFromCheckout(id: $id) {\n    result {\n      ...Order\n    }\n  }\n}"): (typeof documents)["mutation CreateOrder($id: ID!) {\n  createOrderFromCheckout(id: $id) {\n    result {\n      ...Order\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SetAddressDefault($id: ID!, $type: AddressType!) {\n  setDefaultAddress(addressId: $id, type: $type) {\n    result {\n      addresses {\n        ...Address\n      }\n    }\n    errors {\n      code\n      message\n    }\n  }\n}"): (typeof documents)["mutation SetAddressDefault($id: ID!, $type: AddressType!) {\n  setDefaultAddress(addressId: $id, type: $type) {\n    result {\n      addresses {\n        ...Address\n      }\n    }\n    errors {\n      code\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation deleteAccount($token: String!) {\n  deleteAccount(token: $token) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation deleteAccount($token: String!) {\n  deleteAccount(token: $token) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation deleteAddress($addressId: ID!) {\n  deleteAddress(id: $addressId) {\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation deleteAddress($addressId: ID!) {\n  deleteAddress(id: $addressId) {\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation externalAuthenticationUrl($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  externalAuthenticationUrl(pluginInput: {pluginId: $pluginId, data: $input}) {\n    data\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation externalAuthenticationUrl($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  externalAuthenticationUrl(pluginInput: {pluginId: $pluginId, data: $input}) {\n    data\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation refreshExternalToken($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  refreshToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    errors {\n      ...Error\n    }\n    result {\n      accessToken\n      csrfToken\n    }\n  }\n}"): (typeof documents)["mutation refreshExternalToken($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  refreshToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    errors {\n      ...Error\n    }\n    result {\n      accessToken\n      csrfToken\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation externalRefreshWithUser($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  refreshToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation externalRefreshWithUser($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  refreshToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation verifyExternalToken($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  verifyToken(token: \"\", pluginInput: {pluginId: $pluginId, data: $input}) {\n    isValid\n    payload {\n      __typename\n    }\n    user {\n      ...UserDetails\n      userPermissions {\n        code\n        name\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation verifyExternalToken($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  verifyToken(token: \"\", pluginInput: {pluginId: $pluginId, data: $input}) {\n    isValid\n    payload {\n      __typename\n    }\n    user {\n      ...UserDetails\n      userPermissions {\n        code\n        name\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation loginWithoutDetails($email: String!, $password: String!) {\n  obtainToken(authInput: {email: $email, password: $password}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserBase\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}"): (typeof documents)["mutation loginWithoutDetails($email: String!, $password: String!) {\n  obtainToken(authInput: {email: $email, password: $password}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserBase\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation logout($input: AuthPluginInput) {\n  logout(pluginInput: $input) {\n    data\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation logout($input: AuthPluginInput) {\n  logout(pluginInput: $input) {\n    data\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ObtainExternalAccessTokens($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  obtainToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}"): (typeof documents)["mutation ObtainExternalAccessTokens($pluginId: String = \"mirumee.authentication.openidconnect\", $input: JSONString!) {\n  obtainToken(pluginInput: {pluginId: $pluginId, data: $input}) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation OrderUpdatePaymentMetafield($orderId: ID!, $data: String!) {\n  updatePrivateMetadata(id: $orderId, data: {key: \"payment\", value: $data}) {\n    __typename\n  }\n}"): (typeof documents)["mutation OrderUpdatePaymentMetafield($orderId: ID!, $data: String!) {\n  updatePrivateMetadata(id: $orderId, data: {key: \"payment\", value: $data}) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation PasswordChange($newPassword: String!, $oldPassword: String!) {\n  changePassword(newPassword: $newPassword, oldPassword: $oldPassword) {\n    __typename\n    errors {\n      field\n      message\n    }\n  }\n}"): (typeof documents)["mutation PasswordChange($newPassword: String!, $oldPassword: String!) {\n  changePassword(newPassword: $newPassword, oldPassword: $oldPassword) {\n    __typename\n    errors {\n      field\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation refreshToken($csrfToken: String!, $refreshToken: String, $pluginInput: AuthPluginInput) {\n  refreshToken(\n    csrfToken: $csrfToken\n    refreshToken: $refreshToken\n    pluginInput: $pluginInput\n  ) {\n    result {\n      accessToken\n      csrfToken\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation refreshToken($csrfToken: String!, $refreshToken: String, $pluginInput: AuthPluginInput) {\n  refreshToken(\n    csrfToken: $csrfToken\n    refreshToken: $refreshToken\n    pluginInput: $pluginInput\n  ) {\n    result {\n      accessToken\n      csrfToken\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation refreshTokenWithUser($csrfToken: String!) {\n  refreshToken(csrfToken: $csrfToken) {\n    result {\n      accessToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation refreshTokenWithUser($csrfToken: String!) {\n  refreshToken(csrfToken: $csrfToken) {\n    result {\n      accessToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation register($input: UserCreationInput!) {\n  createUser(data: $input) {\n    errors {\n      ...Error\n    }\n    requiresConfirmation\n  }\n}"): (typeof documents)["mutation register($input: UserCreationInput!) {\n  createUser(data: $input) {\n    errors {\n      ...Error\n    }\n    requiresConfirmation\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation requestAccountDeletion($channel: String!) {\n  requestAccountDeletion(channel: $channel) {\n    __typename\n  }\n}"): (typeof documents)["mutation requestAccountDeletion($channel: String!) {\n  requestAccountDeletion(channel: $channel) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RequestEmailChange($newEmail: String!, $password: String!, $channel: String) {\n  requestEmailChange(newEmail: $newEmail, password: $password, channel: $channel) {\n    result {\n      email\n    }\n    errors {\n      code\n      field\n      message\n    }\n  }\n}"): (typeof documents)["mutation RequestEmailChange($newEmail: String!, $password: String!, $channel: String) {\n  requestEmailChange(newEmail: $newEmail, password: $password, channel: $channel) {\n    result {\n      email\n    }\n    errors {\n      code\n      field\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation requestPasswordReset($email: String!, $channel: String!) {\n  requestPasswordReset(email: $email, channel: $channel)\n}"): (typeof documents)["mutation requestPasswordReset($email: String!, $channel: String!) {\n  requestPasswordReset(email: $email, channel: $channel)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation setAccountDefaultAddress($id: ID!, $type: AddressType!) {\n  setDefaultAddress(addressId: $id, type: $type) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation setAccountDefaultAddress($id: ID!, $type: AddressType!) {\n  setDefaultAddress(addressId: $id, type: $type) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation setPassword($token: String!, $email: String!, $password: String!) {\n  setPassword(token: $token, email: $email, password: $password) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation setPassword($token: String!, $email: String!, $password: String!) {\n  setPassword(token: $token, email: $email, password: $password) {\n    result {\n      accessToken\n      csrfToken\n      user {\n        ...UserDetails\n      }\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation TransactionCreate($id: ID!, $transaction: TransactionCreationInput!, $transactionEvent: TransactionEventInput) {\n  createTransaction(\n    id: $id\n    transaction: $transaction\n    transactionEvent: $transactionEvent\n  ) {\n    result {\n      id\n    }\n  }\n}"): (typeof documents)["mutation TransactionCreate($id: ID!, $transaction: TransactionCreationInput!, $transactionEvent: TransactionEventInput) {\n  createTransaction(\n    id: $id\n    transaction: $transaction\n    transactionEvent: $transactionEvent\n  ) {\n    result {\n      id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation TransactionUpdate($id: ID!, $transaction: TransactionUpdateInput!, $transactionEvent: TransactionEventInput) {\n  updateTransaction(\n    id: $id\n    transaction: $transaction\n    transactionEvent: $transactionEvent\n  ) {\n    result {\n      id\n    }\n  }\n}"): (typeof documents)["mutation TransactionUpdate($id: ID!, $transaction: TransactionUpdateInput!, $transactionEvent: TransactionEventInput) {\n  updateTransaction(\n    id: $id\n    transaction: $transaction\n    transactionEvent: $transactionEvent\n  ) {\n    result {\n      id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateUser($input: UserUpdateInput!) {\n  updateUser(data: $input) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation updateUser($input: UserUpdateInput!) {\n  updateUser(data: $input) {\n    result {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateUserAddress($input: AddressUpdateInput!, $id: ID!) {\n  updateAddress(data: $input, id: $id) {\n    address {\n      ...Address\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation updateUserAddress($input: AddressUpdateInput!, $id: ID!) {\n  updateAddress(data: $input, id: $id) {\n    address {\n      ...Address\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation userAddressCreate($address: AddressUpdateInput!, $type: AddressType) {\n  addAddress(type: $type, data: $address) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation userAddressCreate($address: AddressUpdateInput!, $type: AddressType) {\n  addAddress(type: $type, data: $address) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation userAddressDelete($id: ID!) {\n  deleteAddress(id: $id) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation userAddressDelete($id: ID!) {\n  deleteAddress(id: $id) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation userAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateAddress(id: $id, data: $address) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation userAddressUpdate($id: ID!, $address: AddressUpdateInput!) {\n  updateAddress(id: $id, data: $address) {\n    address {\n      ...Address\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation verifyToken($token: String!) {\n  verifyToken(token: $token) {\n    isValid\n    payload {\n      accessToken\n      refreshToken\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"): (typeof documents)["mutation verifyToken($token: String!) {\n  verifyToken(token: $token) {\n    isValid\n    payload {\n      accessToken\n      refreshToken\n    }\n    user {\n      ...UserDetails\n    }\n    errors {\n      ...Error\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query addressValidationRules($countryCode: CountryCode!) {\n  addressValidationRules(countryCode: $countryCode) {\n    ...ValidationRules\n  }\n}"): (typeof documents)["query addressValidationRules($countryCode: CountryCode!) {\n  addressValidationRules(countryCode: $countryCode) {\n    ...ValidationRules\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query App {\n  app {\n    id\n    name\n  }\n}"): (typeof documents)["query App {\n  app {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AvailableShippingMethods($channel: String!) {\n  shop {\n    id\n    availableShippingMethods(channelSlug: $channel) {\n      id\n      translation {\n        id\n        name\n      }\n      price {\n        ...Money\n      }\n    }\n  }\n}"): (typeof documents)["query AvailableShippingMethods($channel: String!) {\n  shop {\n    id\n    availableShippingMethods(channelSlug: $channel) {\n      id\n      translation {\n        id\n        name\n      }\n      price {\n        ...Money\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CategoryBySlug($slug: String!) {\n  category(slug: $slug) {\n    ...CategoryDetails\n  }\n}"): (typeof documents)["query CategoryBySlug($slug: String!) {\n  category(slug: $slug) {\n    ...CategoryDetails\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CategoryPaths($after: String) {\n  categories(first: 100, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}"): (typeof documents)["query CategoryPaths($after: String) {\n  categories(first: 100, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Channel($id: ID!) {\n  channel(id: $id) {\n    ...Channel\n  }\n}"): (typeof documents)["query Channel($id: ID!) {\n  channel(id: $id) {\n    ...Channel\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ChannelBySlug($slug: String!) {\n  channel(slug: $slug) {\n    ...Channel\n  }\n}"): (typeof documents)["query ChannelBySlug($slug: String!) {\n  channel(slug: $slug) {\n    ...Channel\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Channels {\n  channels {\n    ...Channel\n  }\n}"): (typeof documents)["query Channels {\n  channels {\n    ...Channel\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Checkout($id: ID!) {\n  checkout(id: $id) {\n    ...Checkout\n  }\n}"): (typeof documents)["query Checkout($id: ID!) {\n  checkout(id: $id) {\n    ...Checkout\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CollectionBySlug($slug: String!, $channel: String!) {\n  collection(slug: $slug, channel: $channel) {\n    id\n    ...CollectionDetails\n    backgroundImage {\n      ...Image\n    }\n  }\n}"): (typeof documents)["query CollectionBySlug($slug: String!, $channel: String!) {\n  collection(slug: $slug, channel: $channel) {\n    id\n    ...CollectionDetails\n    backgroundImage {\n      ...Image\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CollectionPaths($after: String, $channel: String) {\n  collections(first: 20, channel: $channel, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}"): (typeof documents)["query CollectionPaths($after: String, $channel: String) {\n  collections(first: 20, channel: $channel, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CurrentUserDetails {\n  me {\n    id\n    lastLogin\n    dateJoined\n    email\n    firstName\n    lastName\n    avatar {\n      ...Image\n    }\n    orders {\n      totalCount\n    }\n  }\n}"): (typeof documents)["query CurrentUserDetails {\n  me {\n    id\n    lastLogin\n    dateJoined\n    email\n    firstName\n    lastName\n    avatar {\n      ...Image\n    }\n    orders {\n      totalCount\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FilteringAttributes($filter: AttributeFilter!, $channel: String!) {\n  attributes(filters: $filter, first: 100, channel: $channel) {\n    totalCount\n    edges {\n      node {\n        ...AttributeFilter\n      }\n    }\n  }\n}"): (typeof documents)["query FilteringAttributes($filter: AttributeFilter!, $channel: String!) {\n  attributes(filters: $filter, first: 100, channel: $channel) {\n    totalCount\n    edges {\n      node {\n        ...AttributeFilter\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FooterMenu($channel: String!) {\n  menu(slug: \"footer\", channel: $channel) {\n    id\n    items {\n      children {\n        ...MenuItem\n      }\n      ...MenuItem\n    }\n  }\n}"): (typeof documents)["query FooterMenu($channel: String!) {\n  menu(slug: \"footer\", channel: $channel) {\n    id\n    items {\n      children {\n        ...MenuItem\n      }\n      ...MenuItem\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query HomepageBlocks($slug: String!, $channel: String!) {\n  menu(channel: $channel, slug: $slug) {\n    id\n    name\n    slug\n    items {\n      ...HomepageBlock\n    }\n  }\n}"): (typeof documents)["query HomepageBlocks($slug: String!, $channel: String!) {\n  menu(channel: $channel, slug: $slug) {\n    id\n    name\n    slug\n    items {\n      ...HomepageBlock\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MainMenu($channel: String!) {\n  menu(slug: \"navbar\", channel: $channel) {\n    id\n    items {\n      ...MenuItemWithChildren\n    }\n  }\n}"): (typeof documents)["query MainMenu($channel: String!) {\n  menu(slug: \"navbar\", channel: $channel) {\n    id\n    items {\n      ...MenuItemWithChildren\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Order($id: ID!) {\n  order(id: $id) {\n    ...Order\n  }\n}"): (typeof documents)["query Order($id: ID!) {\n  order(id: $id) {\n    ...Order\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query OrderPaymentDetails($id: ID!) {\n  order(id: $id) {\n    authorizeStatus\n    chargeStatus\n    isPaid\n    status\n    privateMetafield(key: \"payment\")\n  }\n}"): (typeof documents)["query OrderPaymentDetails($id: ID!) {\n  order(id: $id) {\n    authorizeStatus\n    chargeStatus\n    isPaid\n    status\n    privateMetafield(key: \"payment\")\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query OrderTransactions($id: ID!) {\n  order(id: $id) {\n    transactions {\n      ...TransactionItem\n    }\n  }\n}"): (typeof documents)["query OrderTransactions($id: ID!) {\n  order(id: $id) {\n    transactions {\n      ...TransactionItem\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Orders($before: String, $after: String) {\n  me {\n    orders(first: 10, before: $before, after: $after) {\n      edges {\n        cursor\n        node {\n          ...Order\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n}"): (typeof documents)["query Orders($before: String, $after: String) {\n  me {\n    orders(first: 10, before: $before, after: $after) {\n      edges {\n        cursor\n        node {\n          ...Order\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Page($slug: String!) {\n  page(slug: $slug) {\n    id\n    title\n    translation {\n      id\n      title\n      content\n    }\n    seoTitle\n    seoDescription\n    slug\n    createdAt\n    content\n  }\n}"): (typeof documents)["query Page($slug: String!) {\n  page(slug: $slug) {\n    id\n    title\n    translation {\n      id\n      title\n      content\n    }\n    seoTitle\n    seoDescription\n    slug\n    createdAt\n    content\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PagePaths($after: String) {\n  pages(first: 100, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}"): (typeof documents)["query PagePaths($after: String) {\n  pages(first: 100, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProductById($id: ID!, $channel: String!) {\n  product(id: $id, channel: $channel) {\n    ...ProductDetails\n  }\n}"): (typeof documents)["query ProductById($id: ID!, $channel: String!) {\n  product(id: $id, channel: $channel) {\n    ...ProductDetails\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProductCollection($before: String, $after: String, $first: Int = 4, $filter: ProductFilter, $sortBy: ProductOrderingInput, $channel: String!) {\n  products(\n    first: $first\n    channel: $channel\n    after: $after\n    before: $before\n    filters: $filter\n    sortBy: $sortBy\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        ...ProductCard\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}"): (typeof documents)["query ProductCollection($before: String, $after: String, $first: Int = 4, $filter: ProductFilter, $sortBy: ProductOrderingInput, $channel: String!) {\n  products(\n    first: $first\n    channel: $channel\n    after: $after\n    before: $before\n    filters: $filter\n    sortBy: $sortBy\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        ...ProductCard\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProductPaths($after: String, $channel: String) {\n  products(first: 100, channel: $channel, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}"): (typeof documents)["query ProductPaths($after: String, $channel: String) {\n  products(first: 100, channel: $channel, after: $after) {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query User {\n  me {\n    ...UserDetails\n    checkout {\n      ...Checkout\n    }\n  }\n}\n\nquery UserWithoutDetails {\n  me {\n    ...UserBase\n  }\n}"): (typeof documents)["query User {\n  me {\n    ...UserDetails\n    checkout {\n      ...Checkout\n    }\n  }\n}\n\nquery UserWithoutDetails {\n  me {\n    ...UserBase\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CurrentUserAddresses {\n  me {\n    id\n    addresses {\n      ...Address\n    }\n  }\n}"): (typeof documents)["query CurrentUserAddresses {\n  me {\n    id\n    addresses {\n      ...Address\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteProducts($ids: [ID!]!) {\n    deleteProducts(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteProducts($ids: [ID!]!) {\n    deleteProducts(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductCreate($input: ProductCreationInput!) {\n    createProduct(data: $input) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n      result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductCreate($input: ProductCreationInput!) {\n    createProduct(data: $input) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n      result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchValues($id: ID, $after: String, $first: Int!, $query: String!) {\n    attribute(id: $id) {\n      id\n      values(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...ValueDetails\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchValues($id: ID, $after: String, $first: Int!, $query: String!) {\n    attribute(id: $id) {\n      id\n      values(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...ValueDetails\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchAttributes($after: String, $first: Int!, $query: String!) {\n    search: attributes(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchAttributes($after: String, $first: Int!, $query: String!) {\n    search: attributes(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductExport($input: ExportProductsInput!) {\n    exportProducts(data: $input) {\n      result {\n        ...ExportFile\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductExport($input: ExportProductsInput!) {\n    exportProducts(data: $input) {\n      result {\n        ...ExportFile\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateValueTranslations(\n    $id: ID!\n    $input: ValueTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateValue(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        richText\n        translation(languageCode: $language) {\n          id\n          name\n          richText\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateValueTranslations(\n    $id: ID!\n    $input: ValueTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateValue(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        richText\n        translation(languageCode: $language) {\n          id\n          name\n          richText\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSaleTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateSale(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            code\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSaleTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateSale(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            code\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateShippingMethodTranslations(\n    $id: ID!\n    $input: ShippingPriceTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateShippingPrice(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        translation(languageCode: $language) {\n          id\n          language {\n            language\n          }\n          name\n          description\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateShippingMethodTranslations(\n    $id: ID!\n    $input: ShippingPriceTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateShippingPrice(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        translation(languageCode: $language) {\n          id\n          language {\n            language\n          }\n          name\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateVoucherTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateVoucher(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            code\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateVoucherTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateVoucher(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            code\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Home(\n    $channel: String!\n    $datePeriod: DateRangeInput!\n    $PERMISSION_MANAGE_PRODUCTS: Boolean!\n    $PERMISSION_MANAGE_ORDERS: Boolean!\n  ) {\n    salesToday: ordersTotal(period: TODAY, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      gross {\n        amount\n        currency\n      }\n    }\n    ordersToday: orders(filters: { created: $datePeriod }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToConfirm: orders(filters: { status: UNCONFIRMED }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToFulfill: orders(filters: { status: READY_TO_FULFILL }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToCapture: orders(filters: { status: READY_TO_CAPTURE }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    productsOutOfStock: products(\n      filters: { stockAvailability: OUT_OF_STOCK }\n      channel: $channel\n    ) {\n      totalCount\n    }\n    productTopToday: reportProductSales(period: TODAY, first: 5, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_PRODUCTS) {\n      edges {\n        node {\n          ...TopProduct\n        }\n      }\n    }\n    activities: homepageEvents(last: 10) @include(if: $PERMISSION_MANAGE_ORDERS) {\n      edges {\n        node {\n          ...Activity\n          amount\n          date\n          email\n          emailType\n          id\n          message\n          orderNumber\n          oversoldItems\n          quantity\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Home(\n    $channel: String!\n    $datePeriod: DateRangeInput!\n    $PERMISSION_MANAGE_PRODUCTS: Boolean!\n    $PERMISSION_MANAGE_ORDERS: Boolean!\n  ) {\n    salesToday: ordersTotal(period: TODAY, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      gross {\n        amount\n        currency\n      }\n    }\n    ordersToday: orders(filters: { created: $datePeriod }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToConfirm: orders(filters: { status: UNCONFIRMED }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToFulfill: orders(filters: { status: READY_TO_FULFILL }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    ordersToCapture: orders(filters: { status: READY_TO_CAPTURE }, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_ORDERS) {\n      totalCount\n    }\n    productsOutOfStock: products(\n      filters: { stockAvailability: OUT_OF_STOCK }\n      channel: $channel\n    ) {\n      totalCount\n    }\n    productTopToday: reportProductSales(period: TODAY, first: 5, channel: $channel)\n      @include(if: $PERMISSION_MANAGE_PRODUCTS) {\n      edges {\n        node {\n          ...TopProduct\n        }\n      }\n    }\n    activities: homepageEvents(last: 10) @include(if: $PERMISSION_MANAGE_ORDERS) {\n      edges {\n        node {\n          ...Activity\n          amount\n          date\n          email\n          emailType\n          id\n          message\n          orderNumber\n          oversoldItems\n          quantity\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShopCountries($filter: CountryFilter) {\n    shop {\n      id\n      countries(filters: $filter) {\n        code\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShopCountries($filter: CountryFilter) {\n    shop {\n      id\n      countries(filters: $filter) {\n        code\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RefreshLimits(\n    $channels: Boolean!\n    $orders: Boolean!\n    $productVariants: Boolean!\n    $staffUsers: Boolean!\n    $warehouses: Boolean!\n  ) {\n    shop {\n      id\n      ...ShopLimit\n    }\n  }\n"): (typeof documents)["\n  query RefreshLimits(\n    $channels: Boolean!\n    $orders: Boolean!\n    $productVariants: Boolean!\n    $staffUsers: Boolean!\n    $warehouses: Boolean!\n  ) {\n    shop {\n      id\n      ...ShopLimit\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CustomerGiftCardList($first: Int, $filter: GiftCardFilter) {\n    giftCards(first: $first, filters: $filter) {\n      edges {\n        node {\n          ...CustomerGiftCard\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CustomerGiftCardList($first: Int, $filter: GiftCardFilter) {\n    giftCards(first: $first, filters: $filter) {\n      edges {\n        node {\n          ...CustomerGiftCard\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Activity on OrderEvent {\n    date\n    type\n    relatedOrder {\n      id\n      number\n    }\n    user {\n      id\n      email\n      firstName\n      lastName\n    }\n    message\n  }\n"): (typeof documents)["\n  fragment Activity on OrderEvent {\n    date\n    type\n    relatedOrder {\n      id\n      number\n    }\n    user {\n      id\n      email\n      firstName\n      lastName\n    }\n    message\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TopProduct on Product {\n    id\n    name\n    thumbnail {\n      url\n    }\n    revenue(period: TODAY) {\n      gross {\n        amount\n        currency\n      }\n    }\n    attributes {\n      values {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n    quantityOrdered\n  }\n"): (typeof documents)["\n  fragment TopProduct on Product {\n    id\n    name\n    thumbnail {\n      url\n    }\n    revenue(period: TODAY) {\n      gross {\n        amount\n        currency\n      }\n    }\n    attributes {\n      values {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n    quantityOrdered\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckIfOrderExists($id: ID!) {\n    order(id: $id) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  query CheckIfOrderExists($id: ID!) {\n    order(id: $id) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchCatalog($first: Int!, $query: String!) {\n    categories(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n\n    collections(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          ...Collection\n        }\n      }\n    }\n\n    products(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          category {\n            id\n            name\n          }\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchCatalog($first: Int!, $query: String!) {\n    categories(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n\n    collections(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          ...Collection\n        }\n      }\n    }\n\n    products(first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          category {\n            id\n            name\n          }\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchCustomers($after: String, $first: Int!, $query: String!) {\n    search: customers(\n      after: $after\n      first: $first\n      filters: { search: $query }\n    ) {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchCustomers($after: String, $first: Int!, $query: String!) {\n    search: customers(\n      after: $after\n      first: $first\n      filters: { search: $query }\n    ) {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AttributeBulkDelete($ids: [ID!]!) {\n    deleteAttributes(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AttributeBulkDelete($ids: [ID!]!) {\n    deleteAttributes(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AttributeDelete($id: ID!) {\n    deleteAttribute(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AttributeDelete($id: ID!) {\n    deleteAttribute(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AttributeUpdate($id: ID!, $input: AttributeUpdateInput!) {\n    updateAttribute(id: $id, data: $input) {\n      result {\n        ...AttributeDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AttributeUpdate($id: ID!, $input: AttributeUpdateInput!) {\n    updateAttribute(id: $id, data: $input) {\n      result {\n        ...AttributeDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ValueDelete(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    deleteValue(id: $id) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ValueDelete(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    deleteValue(id: $id) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ValueUpdate(\n    $id: ID!\n    $input: ValueUpdateInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    updateValue(id: $id, data: $input) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ValueUpdate(\n    $id: ID!\n    $input: ValueUpdateInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    updateValue(id: $id, data: $input) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ValueCreate(\n    $id: ID!\n    $input: ValueCreationInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    createValue(attributeId: $id, data: $input) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ValueCreate(\n    $id: ID!\n    $input: ValueCreationInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    createValue(attributeId: $id, data: $input) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AttributeCreate($input: AttributeCreationInput!) {\n    createAttribute(data: $input) {\n      result {\n        id\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AttributeCreate($input: AttributeCreationInput!) {\n    createAttribute(data: $input) {\n      result {\n        id\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ValueReorder(\n    $id: ID!\n    $move: ReorderInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    reorderValues(attributeId: $id, moves: [$move]) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          pageInfo {\n            ...PageInfo\n          }\n          edges {\n            cursor\n            node {\n              id\n            }\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ValueReorder(\n    $id: ID!\n    $move: ReorderInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    reorderValues(attributeId: $id, moves: [$move]) {\n      result {\n        id\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          pageInfo {\n            ...PageInfo\n          }\n          edges {\n            cursor\n            node {\n              id\n            }\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttributeDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    attribute(id: $id) {\n      ...AttributeDetails\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...ValueList\n      }\n    }\n  }\n"): (typeof documents)["\n  query AttributeDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    attribute(id: $id) {\n      ...AttributeDetails\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...ValueList\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttributeList(\n    $filter: AttributeFilter\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $sort: AttributeOrderingInput\n  ) {\n    attributes(\n      filters: $filter\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Attribute\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query AttributeList(\n    $filter: AttributeFilter\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $sort: AttributeOrderingInput\n  ) {\n    attributes(\n      filters: $filter\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Attribute\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CategoryDelete($id: ID!) {\n    deleteCategory(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CategoryDelete($id: ID!) {\n    deleteCategory(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CategoryCreate($parentId: ID, $input: CategoryInput!) {\n    createCategory(parentId: $parentId, data: $input) {\n      result {\n        ...CategoryDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CategoryCreate($parentId: ID, $input: CategoryInput!) {\n    createCategory(parentId: $parentId, data: $input) {\n      result {\n        ...CategoryDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CategoryUpdate($id: ID!, $input: CategoryInput!) {\n    updateCategory(id: $id, data: $input) {\n      result {\n        ...CategoryDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CategoryUpdate($id: ID!, $input: CategoryInput!) {\n    updateCategory(id: $id, data: $input) {\n      result {\n        ...CategoryDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CategoryBulkDelete($ids: [ID!]!) {\n    deleteCategories(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CategoryBulkDelete($ids: [ID!]!) {\n    deleteCategories(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RootCategories(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: CategoryFilter\n    $sort: CategoryOrderingInput\n  ) {\n    categories(\n      level: 0\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Category\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query RootCategories(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: CategoryFilter\n    $sort: CategoryOrderingInput\n  ) {\n    categories(\n      level: 0\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Category\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CategoryDetails(\n    $id: ID!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    category(id: $id) {\n      ...CategoryDetails\n      children(first: $first, after: $after, last: $last, before: $before) {\n        edges {\n          node {\n            ...Category\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n      products(first: $first, after: $after, last: $last, before: $before) {\n        pageInfo {\n          ...PageInfo\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            thumbnail {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CategoryDetails(\n    $id: ID!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    category(id: $id) {\n      ...CategoryDetails\n      children(first: $first, after: $after, last: $last, before: $before) {\n        edges {\n          node {\n            ...Category\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n      products(first: $first, after: $after, last: $last, before: $before) {\n        pageInfo {\n          ...PageInfo\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            thumbnail {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChannelCreate($input: ChannelCreationInput!) {\n    createChannel(data: $input) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChannelCreate($input: ChannelCreationInput!) {\n    createChannel(data: $input) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChannelUpdate($id: ID!, $input: ChannelUpdateInput!) {\n    updateChannel(id: $id, data: $input) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChannelUpdate($id: ID!, $input: ChannelUpdateInput!) {\n    updateChannel(id: $id, data: $input) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChannelDelete($id: ID!, $input: ChannelDeleteInput) {\n    deleteChannel(id: $id, data: $input) {\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChannelDelete($id: ID!, $input: ChannelDeleteInput) {\n    deleteChannel(id: $id, data: $input) {\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChannelActivate($id: ID!) {\n    activateChannel(id: $id) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChannelActivate($id: ID!) {\n    activateChannel(id: $id) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChannelDeactivate($id: ID!) {\n    deactivateChannel(id: $id) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChannelDeactivate($id: ID!) {\n    deactivateChannel(id: $id) {\n      result {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChannelReorderWarehouses($channelId: ID!, $moves: [ReorderInput!]!) {\n    reorderChannelWarehouses(channelId: $channelId, moves: $moves) {\n      channel {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChannelReorderWarehouses($channelId: ID!, $moves: [ReorderInput!]!) {\n    reorderChannelWarehouses(channelId: $channelId, moves: $moves) {\n      channel {\n        ...ChannelDetails\n      }\n      errors {\n        ...ChannelError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BaseChannels {\n    channels {\n      ...Channel\n    }\n  }\n"): (typeof documents)["\n  query BaseChannels {\n    channels {\n      ...Channel\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CollectionUpdate($id: ID!, $input: CollectionInput!) {\n    updateCollection(id: $id, data: $input) {\n      result {\n        ...CollectionDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CollectionUpdate($id: ID!, $input: CollectionInput!) {\n    updateCollection(id: $id, data: $input) {\n      result {\n        ...CollectionDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CollectionAssignProduct(\n    $collectionId: ID!\n    $productIds: [ID!]!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    addProductsToCollection(collectionId: $collectionId, products: $productIds) {\n      result {\n        id\n        products(first: $first, after: $after, before: $before, last: $last) {\n          edges {\n            node {\n              ...CollectionProduct\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CollectionAssignProduct(\n    $collectionId: ID!\n    $productIds: [ID!]!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    addProductsToCollection(collectionId: $collectionId, products: $productIds) {\n      result {\n        id\n        products(first: $first, after: $after, before: $before, last: $last) {\n          edges {\n            node {\n              ...CollectionProduct\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCollection($input: CollectionCreationInput!) {\n    createCollection(data: $input) {\n      result {\n        ...CollectionDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCollection($input: CollectionCreationInput!) {\n    createCollection(data: $input) {\n      result {\n        ...CollectionDetails\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveCollection($id: ID!) {\n    deleteCollection(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveCollection($id: ID!) {\n    deleteCollection(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UnassignCollectionProduct(\n    $collectionId: ID!\n    $productIds: [ID!]!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    removeProductsFromCollection(collectionId: $collectionId, products: $productIds) {\n      result {\n        id\n        products(first: $first, after: $after, before: $before, last: $last) {\n          edges {\n            node {\n              id\n              name\n              productKlass {\n                id\n                name\n              }\n              thumbnail {\n                url\n              }\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UnassignCollectionProduct(\n    $collectionId: ID!\n    $productIds: [ID!]!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    removeProductsFromCollection(collectionId: $collectionId, products: $productIds) {\n      result {\n        id\n        products(first: $first, after: $after, before: $before, last: $last) {\n          edges {\n            node {\n              id\n              name\n              productKlass {\n                id\n                name\n              }\n              thumbnail {\n                url\n              }\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CollectionBulkDelete($ids: [ID!]!) {\n    deleteCollections(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CollectionBulkDelete($ids: [ID!]!) {\n    deleteCollections(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CollectionChannelListingUpdate(\n    $id: ID!\n    $input: CollectionChannelListingUpdateInput!\n  ) {\n    updateCollectionChannelListing(id: $id, data: $input) {\n      errors {\n        ...CollectionChannelListingError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CollectionChannelListingUpdate(\n    $id: ID!\n    $input: CollectionChannelListingUpdateInput!\n  ) {\n    updateCollectionChannelListing(id: $id, data: $input) {\n      errors {\n        ...CollectionChannelListingError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: CollectionFilter\n    $sort: CollectionOrderingInput\n    $channel: String\n  ) {\n    collections(\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Collection\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: CollectionFilter\n    $sort: CollectionOrderingInput\n    $channel: String\n  ) {\n    collections(\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Collection\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionDetails(\n    $id: ID!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    collection(id: $id) {\n      ...CollectionDetails\n      products(first: $first, after: $after, before: $before, last: $last) {\n        edges {\n          node {\n            ...CollectionProduct\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionDetails(\n    $id: ID!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    collection(id: $id) {\n      ...CollectionDetails\n      products(first: $first, after: $after, before: $before, last: $last) {\n        edges {\n          node {\n            ...CollectionProduct\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckExportFileStatus($id: ID!) {\n    exportFile(id: $id) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  query CheckExportFileStatus($id: ID!) {\n    exportFile(id: $id) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckOrderInvoicesStatus($id: ID!) {\n    order(id: $id) {\n      id\n      invoices {\n        ...Invoice\n      }\n    }\n  }\n"): (typeof documents)["\n  query CheckOrderInvoicesStatus($id: ID!) {\n    order(id: $id) {\n      id\n      invoices {\n        ...Invoice\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCustomer($id: ID!, $input: UserUpdateInput!) {\n    updateUser(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...CustomerDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCustomer($id: ID!, $input: UserUpdateInput!) {\n    updateUser(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...CustomerDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCustomer($input: UserCreationInput!) {\n    createUser(data: $input) {\n      errors {\n        ...Error\n      }\n      user {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCustomer($input: UserCreationInput!) {\n    createUser(data: $input) {\n      errors {\n        ...Error\n      }\n      user {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveCustomer($id: ID!) {\n    deleteCustomer(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveCustomer($id: ID!) {\n    deleteCustomer(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetCustomerDefaultAddress(\n    $addressId: ID!\n    $userId: ID!\n    $type: AddressType!\n  ) {\n    setDefaultAddress(addressId: $addressId, userId: $userId, type: $type) {\n      errors {\n        ...Error\n      }\n      result {\n        ...CustomerAddresses\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetCustomerDefaultAddress(\n    $addressId: ID!\n    $userId: ID!\n    $type: AddressType!\n  ) {\n    setDefaultAddress(addressId: $addressId, userId: $userId, type: $type) {\n      errors {\n        ...Error\n      }\n      result {\n        ...CustomerAddresses\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCustomerAddress($id: ID!, $input: AddressUpdateInput!) {\n    addAddress(userId: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      address {\n        ...Address\n      }\n      user {\n        ...CustomerAddresses\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCustomerAddress($id: ID!, $input: AddressUpdateInput!) {\n    addAddress(userId: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      address {\n        ...Address\n      }\n      user {\n        ...CustomerAddresses\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCustomerAddress($id: ID!, $input: AddressUpdateInput!) {\n    updateAddress(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      address {\n        ...Address\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCustomerAddress($id: ID!, $input: AddressUpdateInput!) {\n    updateAddress(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      address {\n        ...Address\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveCustomerAddress($id: ID!) {\n    deleteAddress(id: $id) {\n      errors {\n        ...Error\n      }\n      user {\n        ...CustomerAddresses\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveCustomerAddress($id: ID!) {\n    deleteAddress(id: $id) {\n      errors {\n        ...Error\n      }\n      user {\n        ...CustomerAddresses\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation BulkRemoveCustomers($ids: [ID!]!) {\n    deleteCustomers(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation BulkRemoveCustomers($ids: [ID!]!) {\n    deleteCustomers(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ListCustomers(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: CustomerFilter\n    $sort: UserOrderingInput\n    $PERMISSION_MANAGE_ORDERS: Boolean!\n  ) {\n    customers(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Customer\n          orders @include(if: $PERMISSION_MANAGE_ORDERS) {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListCustomers(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: CustomerFilter\n    $sort: UserOrderingInput\n    $PERMISSION_MANAGE_ORDERS: Boolean!\n  ) {\n    customers(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Customer\n          orders @include(if: $PERMISSION_MANAGE_ORDERS) {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CustomerDetails($id: ID!, $PERMISSION_MANAGE_ORDERS: Boolean!) {\n    user(id: $id) {\n      ...CustomerDetails\n      orders(last: 5) @include(if: $PERMISSION_MANAGE_ORDERS) {\n        edges {\n          node {\n            id\n            createdAt\n            number\n            paymentStatus\n            total {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n      }\n      lastPlacedOrder: orders(last: 1) @include(if: $PERMISSION_MANAGE_ORDERS) {\n        edges {\n          node {\n            id\n            createdAt\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CustomerDetails($id: ID!, $PERMISSION_MANAGE_ORDERS: Boolean!) {\n    user(id: $id) {\n      ...CustomerDetails\n      orders(last: 5) @include(if: $PERMISSION_MANAGE_ORDERS) {\n        edges {\n          node {\n            id\n            createdAt\n            number\n            paymentStatus\n            total {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n      }\n      lastPlacedOrder: orders(last: 1) @include(if: $PERMISSION_MANAGE_ORDERS) {\n        edges {\n          node {\n            id\n            createdAt\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CustomerAddresses($id: ID!) {\n    user(id: $id) {\n      ...CustomerAddresses\n    }\n  }\n"): (typeof documents)["\n  query CustomerAddresses($id: ID!) {\n    user(id: $id) {\n      ...CustomerAddresses\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CustomerCreateData {\n    shop {\n      id\n      countries {\n        code\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query CustomerCreateData {\n    shop {\n      id\n      countries {\n        code\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaleUpdate(\n    $input: SaleInput!\n    $id: ID!\n    $channelInput: SaleChannelListingInput!\n  ) {\n    updateSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n    }\n    updateSaleChannelListing(id: $id, data: $channelInput) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SaleUpdate(\n    $input: SaleInput!\n    $id: ID!\n    $channelInput: SaleChannelListingInput!\n  ) {\n    updateSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n    }\n    updateSaleChannelListing(id: $id, data: $channelInput) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaleCataloguesAdd(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    addCataloguesToSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...SaleDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SaleCataloguesAdd(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    addCataloguesToSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...SaleDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaleCataloguesRemove(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    removeCataloguesFromSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...SaleDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SaleCataloguesRemove(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    removeCataloguesFromSale(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...SaleDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaleCreate($input: SaleInput!) {\n    createSale(data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SaleCreate($input: SaleInput!) {\n    createSale(data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaleDelete($id: ID!) {\n    deleteSale(id: $id) {\n      errors {\n        ...DiscountError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SaleDelete($id: ID!) {\n    deleteSale(id: $id) {\n      errors {\n        ...DiscountError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaleBulkDelete($ids: [ID!]!) {\n    deleteSales(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SaleBulkDelete($ids: [ID!]!) {\n    deleteSales(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaleChannelListingUpdate($id: ID!, $input: SaleChannelListingInput!) {\n    updateSaleChannelListing(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SaleChannelListingUpdate($id: ID!, $input: SaleChannelListingInput!) {\n    updateSaleChannelListing(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Sale\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoucherChannelListingUpdate($id: ID!, $input: VoucherChannelListingInput!) {\n    updateVoucherChannelListing(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VoucherChannelListingUpdate($id: ID!, $input: VoucherChannelListingInput!) {\n    updateVoucherChannelListing(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoucherUpdate($input: VoucherInput!, $id: ID!) {\n    updateVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VoucherUpdate($input: VoucherInput!, $id: ID!) {\n    updateVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoucherCataloguesAdd(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    addCataloguesToVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...VoucherDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VoucherCataloguesAdd(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    addCataloguesToVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...VoucherDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoucherCataloguesRemove(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    removeCataloguesFromVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...VoucherDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VoucherCataloguesRemove(\n    $input: CatalogueInput!\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    removeCataloguesFromVoucher(id: $id, data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...VoucherDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoucherCreate($input: VoucherInput!) {\n    createVoucher(data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VoucherCreate($input: VoucherInput!) {\n    createVoucher(data: $input) {\n      errors {\n        ...DiscountError\n      }\n      result {\n        ...Voucher\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoucherDelete($id: ID!) {\n    deleteVoucher(id: $id) {\n      errors {\n        ...DiscountError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VoucherDelete($id: ID!) {\n    deleteVoucher(id: $id) {\n      errors {\n        ...DiscountError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoucherBulkDelete($ids: [ID!]!) {\n    deleteVouchers(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VoucherBulkDelete($ids: [ID!]!) {\n    deleteVouchers(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SaleList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: SaleFilter\n    $sort: SaleOrderingInput\n    $channel: String\n  ) {\n    sales(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Sale\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SaleList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: SaleFilter\n    $sort: SaleOrderingInput\n    $channel: String\n  ) {\n    sales(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Sale\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VoucherList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: VoucherFilter\n    $sort: VoucherOrderingInput\n    $channel: String\n  ) {\n    vouchers(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Voucher\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query VoucherList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: VoucherFilter\n    $sort: VoucherOrderingInput\n    $channel: String\n  ) {\n    vouchers(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...Voucher\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SaleDetails(\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    sale(id: $id) {\n      ...SaleDetails\n    }\n  }\n"): (typeof documents)["\n  query SaleDetails(\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeVariants: Boolean!\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    sale(id: $id) {\n      ...SaleDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VoucherDetails(\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    voucher(id: $id) {\n      ...VoucherDetails\n    }\n  }\n"): (typeof documents)["\n  query VoucherDetails(\n    $id: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $includeProducts: Boolean!\n    $includeCollections: Boolean!\n    $includeCategories: Boolean!\n  ) {\n    voucher(id: $id) {\n      ...VoucherDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment App on App {\n    id\n    name\n    createdAt\n    isActive\n    type\n    homepageUrl\n    appUrl\n    manifestUrl\n    configurationUrl\n    supportUrl\n    version\n    accessToken\n    privateMetadata {\n      key\n      value\n    }\n    metadata {\n      key\n      value\n    }\n    tokens {\n      authToken\n      id\n      name\n    }\n    webhooks {\n      ...Webhook\n    }\n  }\n"): (typeof documents)["\n  fragment App on App {\n    id\n    name\n    createdAt\n    isActive\n    type\n    homepageUrl\n    appUrl\n    manifestUrl\n    configurationUrl\n    supportUrl\n    version\n    accessToken\n    privateMetadata {\n      key\n      value\n    }\n    metadata {\n      key\n      value\n    }\n    tokens {\n      authToken\n      id\n      name\n    }\n    webhooks {\n      ...Webhook\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AppListItem on App {\n    id\n    name\n    isActive\n    type\n    appUrl\n    manifestUrl\n    permissions {\n      ...AppPermission\n    }\n  }\n"): (typeof documents)["\n  fragment AppListItem on App {\n    id\n    name\n    isActive\n    type\n    appUrl\n    manifestUrl\n    permissions {\n      ...AppPermission\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AppPermission on Permission {\n    name\n    code\n  }\n"): (typeof documents)["\n  fragment AppPermission on Permission {\n    name\n    code\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Value on Value {\n    id\n    name\n    slug\n    file {\n      ...File\n    }\n    reference\n    boolean\n    date\n    dateTime\n    value\n  }\n"): (typeof documents)["\n  fragment Value on Value {\n    id\n    name\n    slug\n    file {\n      ...File\n    }\n    reference\n    boolean\n    date\n    dateTime\n    value\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ValueDetails on Value {\n    ...Value\n    plainText\n    richText\n  }\n"): (typeof documents)["\n  fragment ValueDetails on Value {\n    ...Value\n    plainText\n    richText\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ValueList on ValueConnection {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      cursor\n      node {\n        ...ValueDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ValueList on ValueConnection {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      cursor\n      node {\n        ...ValueDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AvailableAttribute on Attribute {\n    id\n    name\n    slug\n  }\n"): (typeof documents)["\n  fragment AvailableAttribute on Attribute {\n    id\n    name\n    slug\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserPermission on UserPermission {\n    code\n    name\n  }\n"): (typeof documents)["\n  fragment UserPermission on UserPermission {\n    code\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment User on User {\n    id\n    email\n    firstName\n    lastName\n    isStaff\n    userPermissions {\n      ...UserPermission\n    }\n    avatar {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment User on User {\n    id\n    email\n    firstName\n    lastName\n    isStaff\n    userPermissions {\n      ...UserPermission\n    }\n    avatar {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Category on Category {\n    id\n    name\n    children {\n      totalCount\n    }\n    products {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  fragment Category on Category {\n    id\n    name\n    children {\n      totalCount\n    }\n    products {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelError on ChannelError {\n    code\n    field\n    message\n  }\n"): (typeof documents)["\n  fragment ChannelError on ChannelError {\n    code\n    field\n    message\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelDetails on Channel {\n    ...Channel\n    hasOrders\n    warehouses {\n      ...Warehouse\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelDetails on Channel {\n    ...Channel\n    hasOrders\n    warehouses {\n      ...Warehouse\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Collection on Collection {\n    id\n    name\n    channelListings {\n      id\n      isPublished\n      publishedAt\n      channel {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment Collection on Collection {\n    id\n    name\n    channelListings {\n      id\n      isPublished\n      publishedAt\n      channel {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CollectionProduct on Product {\n    id\n    name\n    productKlass {\n      id\n      name\n    }\n    thumbnail {\n      url\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n    }\n  }\n"): (typeof documents)["\n  fragment CollectionProduct on Product {\n    id\n    name\n    productKlass {\n      id\n      name\n    }\n    thumbnail {\n      url\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Customer on User {\n    id\n    email\n    firstName\n    lastName\n  }\n"): (typeof documents)["\n  fragment Customer on User {\n    id\n    email\n    firstName\n    lastName\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CustomerDetails on User {\n    ...Customer\n    ...Metadata\n    dateJoined\n    lastLogin\n    defaultShippingAddress {\n      ...Address\n    }\n    defaultBillingAddress {\n      ...Address\n    }\n    note\n    isActive\n  }\n"): (typeof documents)["\n  fragment CustomerDetails on User {\n    ...Customer\n    ...Metadata\n    dateJoined\n    lastLogin\n    defaultShippingAddress {\n      ...Address\n    }\n    defaultBillingAddress {\n      ...Address\n    }\n    note\n    isActive\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CustomerAddresses on User {\n    ...Customer\n    addresses {\n      ...Address\n    }\n    defaultBillingAddress {\n      id\n    }\n    defaultShippingAddress {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment CustomerAddresses on User {\n    ...Customer\n    addresses {\n      ...Address\n    }\n    defaultBillingAddress {\n      id\n    }\n    defaultShippingAddress {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Sale on Sale {\n    ...Metadata\n    id\n    name\n    type\n    startDate\n    endDate\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      discountValue\n      currency\n    }\n  }\n"): (typeof documents)["\n  fragment Sale on Sale {\n    ...Metadata\n    id\n    name\n    type\n    startDate\n    endDate\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      discountValue\n      currency\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SaleDetails on Sale {\n    ...Sale\n    productsCount: products {\n      totalCount\n    }\n    collectionsCount: collections {\n      totalCount\n    }\n    categoriesCount: categories {\n      totalCount\n    }\n    products(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeProducts) {\n      edges {\n        node {\n          id\n          name\n          productKlass {\n            id\n            name\n          }\n          thumbnail {\n            url\n          }\n          channelListings {\n            ...ChannelListingProductWithoutPricing\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    categories(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCategories) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    collections(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCollections) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment SaleDetails on Sale {\n    ...Sale\n    productsCount: products {\n      totalCount\n    }\n    collectionsCount: collections {\n      totalCount\n    }\n    categoriesCount: categories {\n      totalCount\n    }\n    products(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeProducts) {\n      edges {\n        node {\n          id\n          name\n          productKlass {\n            id\n            name\n          }\n          thumbnail {\n            url\n          }\n          channelListings {\n            ...ChannelListingProductWithoutPricing\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    categories(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCategories) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    collections(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCollections) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Voucher on Voucher {\n    ...Metadata\n    id\n    code\n    startDate\n    endDate\n    usageLimit\n    type\n    discountValueType\n    countries {\n      code\n      name\n    }\n    minCheckoutItemsQuantity\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      discountValue\n      currency\n      minSpent {\n        amount\n        currency\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment Voucher on Voucher {\n    ...Metadata\n    id\n    code\n    startDate\n    endDate\n    usageLimit\n    type\n    discountValueType\n    countries {\n      code\n      name\n    }\n    minCheckoutItemsQuantity\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      discountValue\n      currency\n      minSpent {\n        amount\n        currency\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment VoucherDetails on Voucher {\n    ...Voucher\n    code\n    usageLimit\n    used\n    applyOncePerOrder\n    applyOncePerCustomer\n    onlyForStaff\n    productsCount: products {\n      totalCount\n    }\n    collectionsCount: collections {\n      totalCount\n    }\n    categoriesCount: categories {\n      totalCount\n    }\n    products(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeProducts) {\n      edges {\n        node {\n          id\n          name\n          productKlass {\n            id\n            name\n          }\n          thumbnail {\n            url\n          }\n          channelListings {\n            ...ChannelListingProductWithoutPricing\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    collections(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCollections) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    categories(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCategories) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment VoucherDetails on Voucher {\n    ...Voucher\n    code\n    usageLimit\n    used\n    applyOncePerOrder\n    applyOncePerCustomer\n    onlyForStaff\n    productsCount: products {\n      totalCount\n    }\n    collectionsCount: collections {\n      totalCount\n    }\n    categoriesCount: categories {\n      totalCount\n    }\n    products(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeProducts) {\n      edges {\n        node {\n          id\n          name\n          productKlass {\n            id\n            name\n          }\n          thumbnail {\n            url\n          }\n          channelListings {\n            ...ChannelListingProductWithoutPricing\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    collections(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCollections) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n    categories(after: $after, before: $before, first: $first, last: $last)\n      @include(if: $includeCategories) {\n      edges {\n        node {\n          id\n          name\n          products {\n            totalCount\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductErrorWithAttributes on ProductError {\n    ...Error\n    attributes\n  }\n"): (typeof documents)["\n  fragment ProductErrorWithAttributes on ProductError {\n    ...Error\n    attributes\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductChannelListingError on ProductChannelListingError {\n    ...Error\n    channels\n  }\n"): (typeof documents)["\n  fragment ProductChannelListingError on ProductChannelListingError {\n    ...Error\n    channels\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CollectionChannelListingError on CollectionChannelListingError {\n    ...Error\n    channels\n  }\n"): (typeof documents)["\n  fragment CollectionChannelListingError on CollectionChannelListingError {\n    ...Error\n    channels\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AccountError on AccountError {\n    ...Error\n    addressType\n  }\n"): (typeof documents)["\n  fragment AccountError on AccountError {\n    ...Error\n    addressType\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DiscountError on DiscountError {\n    ...Error\n    channels\n  }\n"): (typeof documents)["\n  fragment DiscountError on DiscountError {\n    ...Error\n    channels\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderError on OrderError {\n    ...Error\n    addressType\n    orderLines\n  }\n"): (typeof documents)["\n  fragment OrderError on OrderError {\n    ...Error\n    addressType\n    orderLines\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageErrorWithAttributes on PageError {\n    ...Error\n    attributes\n  }\n"): (typeof documents)["\n  fragment PageErrorWithAttributes on PageError {\n    ...Error\n    attributes\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment BulkProductError on BulkProductError {\n    ...Error\n    index\n    channels\n  }\n"): (typeof documents)["\n  fragment BulkProductError on BulkProductError {\n    ...Error\n    index\n    channels\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment BulkStockError on BulkStockError {\n    ...Error\n    index\n  }\n"): (typeof documents)["\n  fragment BulkStockError on BulkStockError {\n    ...Error\n    index\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShippingChannelsError on ShippingError {\n    ...Error\n    channels\n  }\n"): (typeof documents)["\n  fragment ShippingChannelsError on ShippingError {\n    ...Error\n    channels\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AppError on AppError {\n    ...Error\n    permissions\n  }\n"): (typeof documents)["\n  fragment AppError on AppError {\n    ...Error\n    permissions\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductAttributeAssignmentUpdateError on ProductError {\n    ...Error\n    attributes\n  }\n"): (typeof documents)["\n  fragment ProductAttributeAssignmentUpdateError on ProductError {\n    ...Error\n    attributes\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GiftCardsSettings on GiftCardSettings {\n    expiryType\n    expiryPeriod {\n      type\n      amount\n    }\n  }\n"): (typeof documents)["\n  fragment GiftCardsSettings on GiftCardSettings {\n    expiryType\n    expiryPeriod {\n      type\n      amount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GiftCardEvent on GiftCardEvent {\n    expiryDate\n    oldExpiryDate\n    id\n    date\n    type\n    user {\n      ...UserBase\n      email\n    }\n    app {\n      id\n      name\n    }\n    message\n    email\n    orderId\n    orderNumber\n    tags\n    oldTags\n    balance {\n      initialBalance {\n        ...Money\n      }\n      currentBalance {\n        ...Money\n      }\n      oldInitialBalance {\n        ...Money\n      }\n      oldCurrentBalance {\n        ...Money\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment GiftCardEvent on GiftCardEvent {\n    expiryDate\n    oldExpiryDate\n    id\n    date\n    type\n    user {\n      ...UserBase\n      email\n    }\n    app {\n      id\n      name\n    }\n    message\n    email\n    orderId\n    orderNumber\n    tags\n    oldTags\n    balance {\n      initialBalance {\n        ...Money\n      }\n      currentBalance {\n        ...Money\n      }\n      oldInitialBalance {\n        ...Money\n      }\n      oldCurrentBalance {\n        ...Money\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GiftCardData on GiftCard {\n    ...Metadata\n    last4CodeChars\n    boughtInChannel\n    createdBy {\n      ...UserBase\n    }\n    product {\n      id\n      name\n    }\n    createdBy {\n      ...UserBase\n    }\n    usedBy {\n      ...UserBase\n    }\n    usedByEmail\n    createdByEmail\n    app {\n      id\n      name\n    }\n    createdAt\n    expiryDate\n    lastUsedOn\n    isActive\n    initialBalance {\n      ...Money\n    }\n    currentBalance {\n      ...Money\n    }\n\n    id\n    tags {\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment GiftCardData on GiftCard {\n    ...Metadata\n    last4CodeChars\n    boughtInChannel\n    createdBy {\n      ...UserBase\n    }\n    product {\n      id\n      name\n    }\n    createdBy {\n      ...UserBase\n    }\n    usedBy {\n      ...UserBase\n    }\n    usedByEmail\n    createdByEmail\n    app {\n      id\n      name\n    }\n    createdAt\n    expiryDate\n    lastUsedOn\n    isActive\n    initialBalance {\n      ...Money\n    }\n    currentBalance {\n      ...Money\n    }\n\n    id\n    tags {\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CustomerGiftCard on GiftCard {\n    id\n    last4CodeChars\n    expiryDate\n    isActive\n    currentBalance {\n      ...Money\n    }\n  }\n"): (typeof documents)["\n  fragment CustomerGiftCard on GiftCard {\n    id\n    last4CodeChars\n    expiryDate\n    isActive\n    currentBalance {\n      ...Money\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Group on Group {\n    id\n    name\n    userCanManage\n    users {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  fragment Group on Group {\n    id\n    name\n    userCanManage\n    users {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Permission on Permission {\n    code\n    name\n  }\n"): (typeof documents)["\n  fragment Permission on Permission {\n    code\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GroupMember on User {\n    ...StaffMember\n    avatar(size: 48) {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment GroupMember on User {\n    ...StaffMember\n    avatar(size: 48) {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GroupDetails on Group {\n    ...Group\n    permissions {\n      ...Permission\n    }\n    users {\n      ...GroupMember\n    }\n  }\n"): (typeof documents)["\n  fragment GroupDetails on Group {\n    ...Group\n    permissions {\n      ...Permission\n    }\n    users {\n      ...GroupMember\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MediaItem on MediaItem {\n    id\n    title\n    alt\n    # sortOrder\n    file {\n      url\n    }\n    placeholder\n    isPublished\n    type\n  }\n"): (typeof documents)["\n  fragment MediaItem on MediaItem {\n    id\n    title\n    alt\n    # sortOrder\n    file {\n      url\n    }\n    placeholder\n    isPublished\n    type\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MediaItemDetails on MediaItem {\n    ...MediaItem\n    ...Metadata\n    file {\n      __typename\n      url\n      contentType\n    }\n    description\n    publishedAt\n  }\n"): (typeof documents)["\n  fragment MediaItemDetails on MediaItem {\n    ...MediaItem\n    ...Metadata\n    file {\n      __typename\n      url\n      contentType\n    }\n    description\n    publishedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Menu on Menu {\n    id\n    name\n    items {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment Menu on Menu {\n    id\n    name\n    items {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MenuItemNested on MenuItem {\n    ...MenuItem\n    children {\n      ...MenuItem\n      children {\n        ...MenuItem\n        children {\n          ...MenuItem\n          children {\n            ...MenuItem\n            children {\n              ...MenuItem\n              children {\n                ...MenuItem\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment MenuItemNested on MenuItem {\n    ...MenuItem\n    children {\n      ...MenuItem\n      children {\n        ...MenuItem\n        children {\n          ...MenuItem\n          children {\n            ...MenuItem\n            children {\n              ...MenuItem\n              children {\n                ...MenuItem\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MenuDetails on Menu {\n    id\n    items {\n      ...MenuItemNested\n    }\n    name\n  }\n"): (typeof documents)["\n  fragment MenuDetails on Menu {\n    id\n    items {\n      ...MenuItemNested\n    }\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderEvent on OrderEvent {\n    id\n    amount\n    shippingCostsIncluded\n    date\n    email\n    emailType\n    invoiceNumber\n    discount {\n      valueType\n      value\n      reason\n      amount {\n        amount\n        currency\n      }\n      # oldValueType\n      # oldValue\n      # oldAmount {\n      #   amount\n      #   currency\n      # }\n    }\n    relatedOrder {\n      id\n      number\n    }\n    message\n    quantity\n    transactionReference\n    type\n    user {\n      id\n      email\n      firstName\n      lastName\n    }\n    app {\n      id\n      name\n      appUrl\n    }\n    lines {\n      quantity\n      itemName\n      discount {\n        valueType\n        value\n        reason\n        amount {\n          amount\n          currency\n        }\n        # oldValueType\n        # oldValue\n        # oldAmount {\n        #   amount\n        #   currency\n        # }\n      }\n      orderLine {\n        id\n        productName\n        # productName\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment OrderEvent on OrderEvent {\n    id\n    amount\n    shippingCostsIncluded\n    date\n    email\n    emailType\n    invoiceNumber\n    discount {\n      valueType\n      value\n      reason\n      amount {\n        amount\n        currency\n      }\n      # oldValueType\n      # oldValue\n      # oldAmount {\n      #   amount\n      #   currency\n      # }\n    }\n    relatedOrder {\n      id\n      number\n    }\n    message\n    quantity\n    transactionReference\n    type\n    user {\n      id\n      email\n      firstName\n      lastName\n    }\n    app {\n      id\n      name\n      appUrl\n    }\n    lines {\n      quantity\n      itemName\n      discount {\n        valueType\n        value\n        reason\n        amount {\n          amount\n          currency\n        }\n        # oldValueType\n        # oldValue\n        # oldAmount {\n        #   amount\n        #   currency\n        # }\n      }\n      orderLine {\n        id\n        productName\n        # productName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderLine_ on OrderLine {\n    id\n    isShippingRequired\n    allocations {\n      id\n      quantity\n      warehouse {\n        id\n        name\n      }\n    }\n    product {\n      id\n      quantityAvailable\n      preorder {\n        endDate\n      }\n      stocks {\n        ...Stock\n      }\n      parent {\n        id\n        isAvailableForPurchase\n      }\n    }\n    productName\n    productSku\n    quantity\n    quantityFulfilled\n    quantityToFulfill\n    unitDiscount {\n      amount\n      currency\n    }\n    unitDiscountValue\n    unitDiscountReason\n    unitDiscountType\n    undiscountedUnitPrice {\n      currency\n      gross {\n        amount\n        currency\n      }\n      net {\n        amount\n        currency\n      }\n    }\n    unitPrice {\n      gross {\n        amount\n        currency\n      }\n      net {\n        amount\n        currency\n      }\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment OrderLine_ on OrderLine {\n    id\n    isShippingRequired\n    allocations {\n      id\n      quantity\n      warehouse {\n        id\n        name\n      }\n    }\n    product {\n      id\n      quantityAvailable\n      preorder {\n        endDate\n      }\n      stocks {\n        ...Stock\n      }\n      parent {\n        id\n        isAvailableForPurchase\n      }\n    }\n    productName\n    productSku\n    quantity\n    quantityFulfilled\n    quantityToFulfill\n    unitDiscount {\n      amount\n      currency\n    }\n    unitDiscountValue\n    unitDiscountReason\n    unitDiscountType\n    undiscountedUnitPrice {\n      currency\n      gross {\n        amount\n        currency\n      }\n      net {\n        amount\n        currency\n      }\n    }\n    unitPrice {\n      gross {\n        amount\n        currency\n      }\n      net {\n        amount\n        currency\n      }\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RefundOrderLine on OrderLine {\n    id\n    productName\n    quantity\n    unitPrice {\n      gross {\n        ...Money\n      }\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment RefundOrderLine on OrderLine {\n    id\n    productName\n    quantity\n    unitPrice {\n      gross {\n        ...Money\n      }\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Fulfillment on Fulfillment {\n    id\n    lines {\n      id\n      quantity\n      orderLine {\n        ...OrderLine\n      }\n    }\n    fulfillmentOrder\n    status\n    trackingNumber\n    warehouse {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment Fulfillment on Fulfillment {\n    id\n    lines {\n      id\n      quantity\n      orderLine {\n        ...OrderLine\n      }\n    }\n    fulfillmentOrder\n    status\n    trackingNumber\n    warehouse {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Invoice on Invoice {\n    id\n    number\n    createdAt\n    url\n    status\n  }\n"): (typeof documents)["\n  fragment Invoice on Invoice {\n    id\n    number\n    createdAt\n    url\n    status\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderDetails on Order {\n    id\n    ...Metadata\n    billingAddress {\n      ...Address\n    }\n    giftCards {\n      events {\n        id\n        type\n        orderId\n        balance {\n          initialBalance {\n            ...Money\n          }\n          currentBalance {\n            ...Money\n          }\n          oldInitialBalance {\n            ...Money\n          }\n          oldCurrentBalance {\n            ...Money\n          }\n        }\n      }\n    }\n    isShippingRequired\n    canFinalize\n    createdAt\n    customerNote\n    discounts {\n      id\n      type\n      calculationMode: valueType\n      value\n      reason\n      amount {\n        ...Money\n      }\n    }\n    events {\n      ...OrderEvent\n    }\n    fulfillments {\n      ...Fulfillment\n    }\n    lines {\n      ...OrderLine\n      ...OrderFulfillmentLine\n    }\n    number\n    isPaid\n    paymentStatus\n    shippingAddress {\n      ...Address\n    }\n    fulfillmentMethod {\n      __typename\n      ... on ShippingMethod {\n        id\n      }\n      ... on Warehouse {\n        id\n        clickAndCollectOption\n      }\n    }\n    shippingMethod {\n      id\n    }\n    shippingMethodName\n    collectionPointName\n    shippingPrice {\n      gross {\n        amount\n        currency\n      }\n    }\n    status\n    subtotal {\n      gross {\n        ...Money\n      }\n      net {\n        ...Money\n      }\n    }\n    total {\n      gross {\n        ...Money\n      }\n      net {\n        ...Money\n      }\n      tax {\n        ...Money\n      }\n    }\n    actions\n    totalAuthorized {\n      ...Money\n    }\n    totalCaptured {\n      ...Money\n    }\n    totalBalance {\n      ...Money\n    }\n    undiscountedTotal {\n      net {\n        ...Money\n      }\n      gross {\n        ...Money\n      }\n    }\n    user {\n      id\n      email\n    }\n    userEmail\n    shippingMethods {\n      id\n      name\n      price {\n        ...Money\n      }\n      active\n      message\n    }\n    invoices {\n      ...Invoice\n    }\n    channel {\n      isActive\n      id\n      name\n      currencyCode\n      slug\n      defaultCountry {\n        code\n      }\n    }\n    isPaid\n  }\n"): (typeof documents)["\n  fragment OrderDetails on Order {\n    id\n    ...Metadata\n    billingAddress {\n      ...Address\n    }\n    giftCards {\n      events {\n        id\n        type\n        orderId\n        balance {\n          initialBalance {\n            ...Money\n          }\n          currentBalance {\n            ...Money\n          }\n          oldInitialBalance {\n            ...Money\n          }\n          oldCurrentBalance {\n            ...Money\n          }\n        }\n      }\n    }\n    isShippingRequired\n    canFinalize\n    createdAt\n    customerNote\n    discounts {\n      id\n      type\n      calculationMode: valueType\n      value\n      reason\n      amount {\n        ...Money\n      }\n    }\n    events {\n      ...OrderEvent\n    }\n    fulfillments {\n      ...Fulfillment\n    }\n    lines {\n      ...OrderLine\n      ...OrderFulfillmentLine\n    }\n    number\n    isPaid\n    paymentStatus\n    shippingAddress {\n      ...Address\n    }\n    fulfillmentMethod {\n      __typename\n      ... on ShippingMethod {\n        id\n      }\n      ... on Warehouse {\n        id\n        clickAndCollectOption\n      }\n    }\n    shippingMethod {\n      id\n    }\n    shippingMethodName\n    collectionPointName\n    shippingPrice {\n      gross {\n        amount\n        currency\n      }\n    }\n    status\n    subtotal {\n      gross {\n        ...Money\n      }\n      net {\n        ...Money\n      }\n    }\n    total {\n      gross {\n        ...Money\n      }\n      net {\n        ...Money\n      }\n      tax {\n        ...Money\n      }\n    }\n    actions\n    totalAuthorized {\n      ...Money\n    }\n    totalCaptured {\n      ...Money\n    }\n    totalBalance {\n      ...Money\n    }\n    undiscountedTotal {\n      net {\n        ...Money\n      }\n      gross {\n        ...Money\n      }\n    }\n    user {\n      id\n      email\n    }\n    userEmail\n    shippingMethods {\n      id\n      name\n      price {\n        ...Money\n      }\n      active\n      message\n    }\n    invoices {\n      ...Invoice\n    }\n    channel {\n      isActive\n      id\n      name\n      currencyCode\n      slug\n      defaultCountry {\n        code\n      }\n    }\n    isPaid\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderSettings on OrderSettings {\n    autoConfirmAllNewOrders\n    autoFulfillNonShippableGiftCard\n  }\n"): (typeof documents)["\n  fragment OrderSettings on OrderSettings {\n    autoConfirmAllNewOrders\n    autoFulfillNonShippableGiftCard\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShopOrderSettings on Site {\n    autoApproveFulfillment\n    fulfillmentAllowUnpaid\n  }\n"): (typeof documents)["\n  fragment ShopOrderSettings on Site {\n    autoApproveFulfillment\n    fulfillmentAllowUnpaid\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderFulfillmentLine on OrderLine {\n    id\n    isShippingRequired\n    productName\n    quantity\n    allocations {\n      id\n      quantity\n      warehouse {\n        id\n        name\n      }\n    }\n    quantityFulfilled\n    quantityToFulfill\n    product {\n      id\n      name\n      sku\n      preorder {\n        endDate\n      }\n      attributes {\n        values {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n      }\n      stocks {\n        ...Stock\n      }\n      trackInventory\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment OrderFulfillmentLine on OrderLine {\n    id\n    isShippingRequired\n    productName\n    quantity\n    allocations {\n      id\n      quantity\n      warehouse {\n        id\n        name\n      }\n    }\n    quantityFulfilled\n    quantityToFulfill\n    product {\n      id\n      name\n      sku\n      preorder {\n        endDate\n      }\n      attributes {\n        values {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n      }\n      stocks {\n        ...Stock\n      }\n      trackInventory\n    }\n    thumbnail(size: 64) {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderLineStockData on OrderLine {\n    id\n    allocations {\n      quantity\n      warehouse {\n        id\n      }\n    }\n    quantity\n    quantityToFulfill\n    product {\n      stocks {\n        ...Stock\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment OrderLineStockData on OrderLine {\n    id\n    allocations {\n      quantity\n      warehouse {\n        id\n      }\n    }\n    quantity\n    quantityToFulfill\n    product {\n      stocks {\n        ...Stock\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageKlass on PageKlass {\n    id\n    name\n    hasPages\n  }\n"): (typeof documents)["\n  fragment PageKlass on PageKlass {\n    id\n    name\n    hasPages\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageKlassDetails on PageKlass {\n    ...PageKlass\n    ...Metadata\n    attributes {\n      ...Attribute\n    }\n  }\n"): (typeof documents)["\n  fragment PageKlassDetails on PageKlass {\n    ...PageKlass\n    ...Metadata\n    attributes {\n      ...Attribute\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Page on Page {\n    id\n    title\n    slug\n    isPublished\n    content\n  }\n"): (typeof documents)["\n  fragment Page on Page {\n    id\n    title\n    slug\n    isPublished\n    content\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageSelectedAttribute on Attribute {\n    id\n    slug\n    name\n    inputType\n    entityType\n    valueRequired\n    unit\n    values(\n      first: $firstValues\n      after: $afterValues\n      last: $lastValues\n      before: $beforeValues\n    ) {\n      ...ValueList\n    }\n    # values {\n    #   edges {\n    #     node {\n    #       ...ValueDetails\n    #     }\n    #   }\n    # }\n  }\n"): (typeof documents)["\n  fragment PageSelectedAttribute on Attribute {\n    id\n    slug\n    name\n    inputType\n    entityType\n    valueRequired\n    unit\n    values(\n      first: $firstValues\n      after: $afterValues\n      last: $lastValues\n      before: $beforeValues\n    ) {\n      ...ValueList\n    }\n    # values {\n    #   edges {\n    #     node {\n    #       ...ValueDetails\n    #     }\n    #   }\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageAttributes on Page {\n    attributes {\n      ...PageSelectedAttribute\n    }\n    pageKlass {\n      id\n      name\n      attributes {\n        id\n        name\n        inputType\n        entityType\n        valueRequired\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PageAttributes on Page {\n    attributes {\n      ...PageSelectedAttribute\n    }\n    pageKlass {\n      id\n      name\n      attributes {\n        id\n        name\n        inputType\n        entityType\n        valueRequired\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageDetails on Page {\n    ...Page\n    ...PageAttributes\n    ...Metadata\n    content\n    seoTitle\n    seoDescription\n    publishedAt\n  }\n"): (typeof documents)["\n  fragment PageDetails on Page {\n    ...Page\n    ...PageAttributes\n    ...Metadata\n    content\n    seoTitle\n    seoDescription\n    publishedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ConfigurationItem on ConfigurationItem {\n    name\n    value\n    type\n    helpText\n    label\n  }\n"): (typeof documents)["\n  fragment ConfigurationItem on ConfigurationItem {\n    name\n    value\n    type\n    helpText\n    label\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PluginConfigurationBase on PluginConfiguration {\n    active\n    channel {\n      id\n      name\n      slug\n    }\n  }\n"): (typeof documents)["\n  fragment PluginConfigurationBase on PluginConfiguration {\n    active\n    channel {\n      id\n      name\n      slug\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PluginConfigurationExtended on PluginConfiguration {\n    ...PluginConfigurationBase\n    configuration {\n      ...ConfigurationItem\n    }\n  }\n"): (typeof documents)["\n  fragment PluginConfigurationExtended on PluginConfiguration {\n    ...PluginConfigurationBase\n    configuration {\n      ...ConfigurationItem\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PluginBase on Plugin {\n    id\n    name\n    description\n    channelConfigurations {\n      ...PluginConfigurationBase\n    }\n    globalConfiguration {\n      ...PluginConfigurationBase\n    }\n  }\n"): (typeof documents)["\n  fragment PluginBase on Plugin {\n    id\n    name\n    description\n    channelConfigurations {\n      ...PluginConfigurationBase\n    }\n    globalConfiguration {\n      ...PluginConfigurationBase\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PluginsDetails on Plugin {\n    id\n    name\n    description\n    globalConfiguration {\n      ...PluginConfigurationExtended\n    }\n    channelConfigurations {\n      ...PluginConfigurationExtended\n    }\n  }\n"): (typeof documents)["\n  fragment PluginsDetails on Plugin {\n    id\n    name\n    description\n    globalConfiguration {\n      ...PluginConfigurationExtended\n    }\n    channelConfigurations {\n      ...PluginConfigurationExtended\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductKlass on ProductKlass {\n    id\n    name\n    kind\n    hasVariants\n    isShippingRequired\n    taxClass {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment ProductKlass on ProductKlass {\n    id\n    name\n    kind\n    hasVariants\n    isShippingRequired\n    taxClass {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductKlassDetails on ProductKlass {\n    ...ProductKlass\n    ...Metadata\n    productAttributes {\n      ...Attribute\n    }\n    variantAttributes {\n      ...Attribute\n    }\n    productVariantAttributeAssignments {\n      attribute {\n        ...Attribute\n      }\n      variantSelection\n    }\n    weight\n    # {\n    #   unit\n    #   value\n    # }\n  }\n"): (typeof documents)["\n  fragment ProductKlassDetails on ProductKlass {\n    ...ProductKlass\n    ...Metadata\n    productAttributes {\n      ...Attribute\n    }\n    variantAttributes {\n      ...Attribute\n    }\n    productVariantAttributeAssignments {\n      attribute {\n        ...Attribute\n      }\n      variantSelection\n    }\n    weight\n    # {\n    #   unit\n    #   value\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Stock on Stock {\n    id\n    quantity\n    quantityAllocated\n    warehouse {\n      ...Warehouse\n    }\n  }\n"): (typeof documents)["\n  fragment Stock on Stock {\n    id\n    quantity\n    quantityAllocated\n    warehouse {\n      ...Warehouse\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Preorder on PreorderData {\n    globalThreshold\n    globalSoldUnits\n    endDate\n  }\n"): (typeof documents)["\n  fragment Preorder on PreorderData {\n    globalThreshold\n    globalSoldUnits\n    endDate\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PriceRange on TaxedMoneyRange {\n    start {\n      net {\n        ...Money\n      }\n    }\n    stop {\n      net {\n        ...Money\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PriceRange on TaxedMoneyRange {\n    start {\n      net {\n        ...Money\n      }\n    }\n    stop {\n      net {\n        ...Money\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelListingProductWithoutPricing on ProductChannelListing {\n    id\n    isPublished\n    publishedAt\n    isAvailableForPurchase\n    visibleInListings\n    channel {\n      id\n      name\n      currencyCode\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelListingProductWithoutPricing on ProductChannelListing {\n    id\n    isPublished\n    publishedAt\n    isAvailableForPurchase\n    visibleInListings\n    channel {\n      id\n      name\n      currencyCode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelListingProduct on ProductChannelListing {\n    ...ChannelListingProductWithoutPricing\n    pricing {\n      priceRange {\n        ...PriceRange\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelListingProduct on ProductChannelListing {\n    ...ChannelListingProductWithoutPricing\n    pricing {\n      priceRange {\n        ...PriceRange\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductWithChannelListings on Product {\n    id\n    name\n    thumbnail {\n      url\n    }\n    productKlass {\n      id\n      name\n      hasVariants\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n      pricing @include(if: $hasChannel) {\n        priceRange {\n          ...PriceRange\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ProductWithChannelListings on Product {\n    id\n    name\n    thumbnail {\n      url\n    }\n    productKlass {\n      id\n      name\n      hasVariants\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n      pricing @include(if: $hasChannel) {\n        priceRange {\n          ...PriceRange\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductAttributes on Product {\n    id\n    attributes {\n      id\n      slug\n      name\n      inputType\n      entityType\n      valueRequired\n      unit\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...ValueList\n      }\n      # values {\n      #   ...ValueDetails\n      # }\n    }\n    productKlass {\n      id\n      variantAttributes {\n        id\n        name\n        inputType\n        valueRequired\n        unit\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ProductAttributes on Product {\n    id\n    attributes {\n      id\n      slug\n      name\n      inputType\n      entityType\n      valueRequired\n      unit\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...ValueList\n      }\n      # values {\n      #   ...ValueDetails\n      # }\n    }\n    productKlass {\n      id\n      variantAttributes {\n        id\n        name\n        inputType\n        valueRequired\n        unit\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductDetailsVariant on Product {\n    id\n    ... on ConcreteProduct {\n      sku\n      trackInventory\n      quantityLimitPerCustomer\n    }\n    name\n    attributes {\n      id\n      name\n      values {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n    media {\n      url(size: 200)\n    }\n    stocks {\n      ...Stock\n    }\n    preorder {\n      ...Preorder\n    }\n    channelListings {\n      ...ChannelListingProduct\n    }\n  }\n"): (typeof documents)["\n  fragment ProductDetailsVariant on Product {\n    id\n    ... on ConcreteProduct {\n      sku\n      trackInventory\n      quantityLimitPerCustomer\n    }\n    name\n    attributes {\n      id\n      name\n      values {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n    media {\n      url(size: 200)\n    }\n    stocks {\n      ...Stock\n    }\n    preorder {\n      ...Preorder\n    }\n    channelListings {\n      ...ChannelListingProduct\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Product on Product {\n    id\n    ...ProductAttributes\n    ...Metadata\n    name\n    slug\n    description\n    seoTitle\n    seoDescription\n    rating\n    defaultVariant {\n      id\n    }\n    category {\n      id\n      name\n    }\n    collections {\n      id\n      name\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n    }\n    media {\n      ...ProductMediaItem\n    }\n    isAvailableForPurchase\n    variants {\n      ...ProductDetailsVariant\n    }\n    productKlass {\n      id\n      name\n      hasVariants\n    }\n    weight\n    taxClass {\n      id\n      name\n    }\n    name\n    parent {\n      id\n      defaultVariant {\n        id\n      }\n      media {\n        ...ProductMediaItem\n      }\n      name\n      thumbnail {\n        url\n      }\n      channelListings {\n        id\n        publishedAt\n        isPublished\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n      variants {\n        id\n        name\n        ... on ConcreteProduct {\n            sku\n        }\n        media {\n          id\n          url\n          type\n          oembedData\n        }\n      }\n      defaultVariant {\n        id\n      }\n    }\n    selectionAttributes: attributes(variantSelection: VARIANT_SELECTION) {\n      ...Attribute\n    }\n    nonSelectionAttributes: attributes(variantSelection: NOT_VARIANT_SELECTION) {\n      ...Attribute\n    }\n    media {\n      id\n      url\n      type\n      # oembedData\n    }\n    channelListings {\n      ...ChannelListingProduct\n    }\n    ... on ConcreteProduct {\n      trackInventory\n      sku\n      quantityLimitPerCustomer\n    }\n    stocks {\n      ...Stock\n    }\n    preorder {\n      ...Preorder\n    }\n  }\n"): (typeof documents)["\n  fragment Product on Product {\n    id\n    ...ProductAttributes\n    ...Metadata\n    name\n    slug\n    description\n    seoTitle\n    seoDescription\n    rating\n    defaultVariant {\n      id\n    }\n    category {\n      id\n      name\n    }\n    collections {\n      id\n      name\n    }\n    channelListings {\n      ...ChannelListingProductWithoutPricing\n    }\n    media {\n      ...ProductMediaItem\n    }\n    isAvailableForPurchase\n    variants {\n      ...ProductDetailsVariant\n    }\n    productKlass {\n      id\n      name\n      hasVariants\n    }\n    weight\n    taxClass {\n      id\n      name\n    }\n    name\n    parent {\n      id\n      defaultVariant {\n        id\n      }\n      media {\n        ...ProductMediaItem\n      }\n      name\n      thumbnail {\n        url\n      }\n      channelListings {\n        id\n        publishedAt\n        isPublished\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n      variants {\n        id\n        name\n        ... on ConcreteProduct {\n            sku\n        }\n        media {\n          id\n          url\n          type\n          oembedData\n        }\n      }\n      defaultVariant {\n        id\n      }\n    }\n    selectionAttributes: attributes(variantSelection: VARIANT_SELECTION) {\n      ...Attribute\n    }\n    nonSelectionAttributes: attributes(variantSelection: NOT_VARIANT_SELECTION) {\n      ...Attribute\n    }\n    media {\n      id\n      url\n      type\n      # oembedData\n    }\n    channelListings {\n      ...ChannelListingProduct\n    }\n    ... on ConcreteProduct {\n      trackInventory\n      sku\n      quantityLimitPerCustomer\n    }\n    stocks {\n      ...Stock\n    }\n    preorder {\n      ...Preorder\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductAttribute on Attribute {\n    id\n    name\n    slug\n    inputType\n    entityType\n    valueRequired\n    unit\n    values(\n      first: $firstValues\n      after: $afterValues\n      last: $lastValues\n      before: $beforeValues\n    ) {\n      ...ValueList\n    }\n  }\n"): (typeof documents)["\n  fragment ProductAttribute on Attribute {\n    id\n    name\n    slug\n    inputType\n    entityType\n    valueRequired\n    unit\n    values(\n      first: $firstValues\n      after: $afterValues\n      last: $lastValues\n      before: $beforeValues\n    ) {\n      ...ValueList\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ExportFile on ExportFile {\n    id\n    status\n    url\n  }\n"): (typeof documents)["\n  fragment ExportFile on ExportFile {\n    id\n    status\n    url\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductListAttribute on Attribute {\n    id\n    values {\n      edges {\n        node {\n          ...Value\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ProductListAttribute on Attribute {\n    id\n    values {\n      edges {\n        node {\n          ...Value\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShippingZone on ShippingZone {\n    ...Metadata\n    id\n    countries {\n      code\n      name\n    }\n    name\n    description\n  }\n"): (typeof documents)["\n  fragment ShippingZone on ShippingZone {\n    ...Metadata\n    id\n    countries {\n      code\n      name\n    }\n    name\n    description\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShippingMethodWithPostalCodes on ShippingMethod {\n    id\n    postalCodeRules {\n      id\n      inclusionType\n      start\n      end\n    }\n  }\n"): (typeof documents)["\n  fragment ShippingMethodWithPostalCodes on ShippingMethod {\n    id\n    postalCodeRules {\n      id\n      inclusionType\n      start\n      end\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShippingMethod_ on ShippingMethod {\n    ...ShippingMethodWithPostalCodes\n    ...Metadata\n    taxClass {\n      name\n      id\n    }\n    minimumOrderWeight\n    # {\n    #   unit\n    #   value\n    # }\n    maximumOrderWeight\n    # {\n    #   unit\n    #   value\n    # }\n    minimumDeliveryDays\n    maximumDeliveryDays\n    name\n    description\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      price {\n        ...Money\n      }\n      minimumOrderPrice {\n        ...Money\n      }\n      maximumOrderPrice {\n        ...Money\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ShippingMethod_ on ShippingMethod {\n    ...ShippingMethodWithPostalCodes\n    ...Metadata\n    taxClass {\n      name\n      id\n    }\n    minimumOrderWeight\n    # {\n    #   unit\n    #   value\n    # }\n    maximumOrderWeight\n    # {\n    #   unit\n    #   value\n    # }\n    minimumDeliveryDays\n    maximumDeliveryDays\n    name\n    description\n    channelListings {\n      id\n      channel {\n        id\n        name\n        currencyCode\n      }\n      price {\n        ...Money\n      }\n      minimumOrderPrice {\n        ...Money\n      }\n      maximumOrderPrice {\n        ...Money\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShippingMethodWithExcludedProducts on ShippingMethod {\n    ...ShippingMethod\n    excludedProducts(before: $before, after: $after, first: $first, last: $last) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n        startCursor\n      }\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ShippingMethodWithExcludedProducts on ShippingMethod {\n    ...ShippingMethod\n    excludedProducts(before: $before, after: $after, first: $first, last: $last) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n        startCursor\n      }\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShippingZoneDetails on ShippingZone {\n    ...ShippingZone\n    shippingMethods {\n      ...ShippingMethod\n    }\n    warehouses {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment ShippingZoneDetails on ShippingZone {\n    ...ShippingZone\n    shippingMethods {\n      ...ShippingMethod\n    }\n    warehouses {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CountryWithCode on Country {\n    name\n    code\n  }\n"): (typeof documents)["\n  fragment CountryWithCode on Country {\n    name\n    code\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Language on LanguageDisplay {\n    code\n    language\n  }\n"): (typeof documents)["\n  fragment Language on LanguageDisplay {\n    code\n    language\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LimitInfo on Limits {\n    channels @include(if: $channels)\n    orders @include(if: $orders)\n    productVariants @include(if: $productVariants)\n    staffUsers @include(if: $staffUsers)\n    warehouses @include(if: $warehouses)\n  }\n\n  fragment ShopLimit on Site {\n    limits {\n      currentUsage {\n        ...LimitInfo\n      }\n      allowedUsage {\n        ...LimitInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment LimitInfo on Limits {\n    channels @include(if: $channels)\n    orders @include(if: $orders)\n    productVariants @include(if: $productVariants)\n    staffUsers @include(if: $staffUsers)\n    warehouses @include(if: $warehouses)\n  }\n\n  fragment ShopLimit on Site {\n    limits {\n      currentUsage {\n        ...LimitInfo\n      }\n      allowedUsage {\n        ...LimitInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Shop on Site {\n    companyAddress {\n      ...Address\n    }\n    countries {\n      code\n      name\n    }\n    customerSetPasswordUrl\n    defaultMailSenderAddress\n    defaultMailSenderName\n    description\n    domain\n    name\n    reserveStockDurationAnonymousUser\n    reserveStockDurationAuthenticatedUser\n    maxItemCountPerCheckout\n  }\n"): (typeof documents)["\n  fragment Shop on Site {\n    companyAddress {\n      ...Address\n    }\n    countries {\n      code\n      name\n    }\n    customerSetPasswordUrl\n    defaultMailSenderAddress\n    defaultMailSenderName\n    description\n    domain\n    name\n    reserveStockDurationAnonymousUser\n    reserveStockDurationAuthenticatedUser\n    maxItemCountPerCheckout\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StaffMember on User {\n    id\n    email\n    firstName\n    isActive\n    lastName\n  }\n"): (typeof documents)["\n  fragment StaffMember on User {\n    id\n    email\n    firstName\n    isActive\n    lastName\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StaffMemberDetails on User {\n    ...StaffMember\n    groups {\n      id\n      name\n      userCanManage\n    }\n    userPermissions {\n      code\n      name\n    }\n    avatar(size: 120) {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment StaffMemberDetails on User {\n    ...StaffMember\n    groups {\n      id\n      name\n      userCanManage\n    }\n    userPermissions {\n      code\n      name\n    }\n    avatar(size: 120) {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TaxedMoney on TaxedMoney {\n    net {\n      ...Money\n    }\n    gross {\n      ...Money\n    }\n  }\n"): (typeof documents)["\n  fragment TaxedMoney on TaxedMoney {\n    net {\n      ...Money\n    }\n    gross {\n      ...Money\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Country on Country {\n    name\n    code\n  }\n"): (typeof documents)["\n  fragment Country on Country {\n    name\n    code\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TaxConfigurationPerCountry on TaxConfigurationPerCountry {\n    country {\n      ...CountryWithCode\n    }\n    chargeTaxes\n    taxCalculationStrategy\n    displayGrossPrices\n  }\n"): (typeof documents)["\n  fragment TaxConfigurationPerCountry on TaxConfigurationPerCountry {\n    country {\n      ...CountryWithCode\n    }\n    chargeTaxes\n    taxCalculationStrategy\n    displayGrossPrices\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TaxConfiguration on TaxConfiguration {\n    id\n    channel {\n      id\n      name\n    }\n    displayGrossPrices\n    pricesEnteredWithTax\n    chargeTaxes\n    taxCalculationStrategy\n    countries {\n      ...TaxConfigurationPerCountry\n    }\n  }\n"): (typeof documents)["\n  fragment TaxConfiguration on TaxConfiguration {\n    id\n    channel {\n      id\n      name\n    }\n    displayGrossPrices\n    pricesEnteredWithTax\n    chargeTaxes\n    taxCalculationStrategy\n    countries {\n      ...TaxConfigurationPerCountry\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TaxCountryConfiguration on TaxCountryConfiguration {\n    country {\n      ...CountryWithCode\n    }\n    taxClassCountryRates {\n      rate\n      taxClass {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TaxCountryConfiguration on TaxCountryConfiguration {\n    country {\n      ...CountryWithCode\n    }\n    taxClassCountryRates {\n      rate\n      taxClass {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TaxRate on TaxClassCountryRate {\n    country {\n      ...CountryWithCode\n    }\n    rate\n  }\n"): (typeof documents)["\n  fragment TaxRate on TaxClassCountryRate {\n    country {\n      ...CountryWithCode\n    }\n    rate\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TaxClassBase on TaxClass {\n    id\n    name\n  }\n"): (typeof documents)["\n  fragment TaxClassBase on TaxClass {\n    id\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TaxClass on TaxClass {\n    ...TaxClassBase\n    countries {\n      ...TaxRate\n    }\n    ...Metadata\n  }\n"): (typeof documents)["\n  fragment TaxClass on TaxClass {\n    ...TaxClassBase\n    countries {\n      ...TaxRate\n    }\n    ...Metadata\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TimePeriod on TimePeriod {\n    amount\n    type\n  }\n"): (typeof documents)["\n  fragment TimePeriod on TimePeriod {\n    amount\n    type\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ValueTranslatable on ValueTranslation {\n    id\n    name\n    plainText\n    richText\n    value {\n      id\n      name\n    }\n    attribute {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    #   plainText\n    #   richText\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n"): (typeof documents)["\n  fragment ValueTranslatable on ValueTranslation {\n    id\n    name\n    plainText\n    richText\n    value {\n      id\n      name\n    }\n    attribute {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    #   plainText\n    #   richText\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CategoryTranslation on CategoryTranslation {\n    id\n    description\n    language {\n      language\n    }\n    name\n    seoDescription\n    seoTitle\n    # translation(languageCode: $language) {\n    #   id\n    #   description\n    #   language {\n    #     language\n    #   }\n    #   name\n    #   seoDescription\n    #   seoTitle\n    # }\n    category {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n  }\n"): (typeof documents)["\n  fragment CategoryTranslation on CategoryTranslation {\n    id\n    description\n    language {\n      language\n    }\n    name\n    seoDescription\n    seoTitle\n    # translation(languageCode: $language) {\n    #   id\n    #   description\n    #   language {\n    #     language\n    #   }\n    #   name\n    #   seoDescription\n    #   seoTitle\n    # }\n    category {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CollectionTranslation on CollectionTranslation {\n    collection {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n    id\n    description\n    language {\n      language\n    }\n    name\n    seoDescription\n    seoTitle\n    # translation(languageCode: $language) {\n    #   id\n    #   description\n    #   language {\n    #     language\n    #   }\n    #   name\n    #   seoDescription\n    #   seoTitle\n    # }\n  }\n"): (typeof documents)["\n  fragment CollectionTranslation on CollectionTranslation {\n    collection {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n    id\n    description\n    language {\n      language\n    }\n    name\n    seoDescription\n    seoTitle\n    # translation(languageCode: $language) {\n    #   id\n    #   description\n    #   language {\n    #     language\n    #   }\n    #   name\n    #   seoDescription\n    #   seoTitle\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductTranslation on ProductTranslation {\n    product {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n    id\n    seoTitle\n    seoDescription\n    name\n    description\n    language {\n      code\n      language\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   seoTitle\n    #   seoDescription\n    #   name\n    #   description\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n"): (typeof documents)["\n  fragment ProductTranslation on ProductTranslation {\n    product {\n      id\n      name\n      description\n      seoDescription\n      seoTitle\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n    id\n    seoTitle\n    seoDescription\n    name\n    description\n    language {\n      code\n      language\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   seoTitle\n    #   seoDescription\n    #   name\n    #   description\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductVariantTranslation on ProductTranslation {\n    id\n    name\n    language {\n      code\n      language\n    }\n    product {\n      id\n      name\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n"): (typeof documents)["\n  fragment ProductVariantTranslation on ProductTranslation {\n    id\n    name\n    language {\n      code\n      language\n    }\n    product {\n      id\n      name\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SaleTranslation on SaleTranslation {\n    id\n    name\n    language {\n      code\n      language\n    }\n    sale {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    # }\n  }\n"): (typeof documents)["\n  fragment SaleTranslation on SaleTranslation {\n    id\n    name\n    language {\n      code\n      language\n    }\n    sale {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment VoucherTranslation on VoucherTranslation {\n    id\n    language {\n      code\n      language\n    }\n    name\n    voucher {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    # }\n  }\n"): (typeof documents)["\n  fragment VoucherTranslation on VoucherTranslation {\n    id\n    language {\n      code\n      language\n    }\n    name\n    voucher {\n      id\n      name\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShippingMethodTranslation on ShippingMethodTranslation {\n    id\n    language {\n      code\n      language\n    }\n    name\n    description\n    shippingMethod {\n      id\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    #   description\n    # }\n  }\n"): (typeof documents)["\n  fragment ShippingMethodTranslation on ShippingMethodTranslation {\n    id\n    language {\n      code\n      language\n    }\n    name\n    description\n    shippingMethod {\n      id\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     code\n    #     language\n    #   }\n    #   name\n    #   description\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageTranslation on PageTranslation {\n    id\n    content\n    seoDescription\n    seoTitle\n    title\n    language {\n      code\n      language\n    }\n    page {\n      id\n      content\n      seoDescription\n      seoTitle\n      title\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n  }\n"): (typeof documents)["\n  fragment PageTranslation on PageTranslation {\n    id\n    content\n    seoDescription\n    seoTitle\n    title\n    language {\n      code\n      language\n    }\n    page {\n      id\n      content\n      seoDescription\n      seoTitle\n      title\n    }\n    # values {\n    #   ...ValueTranslatable\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageTranslatable on PageTranslation {\n    id\n    content\n    seoDescription\n    seoTitle\n    title\n    language {\n      code\n      language\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   content\n    #   seoDescription\n    #   seoTitle\n    #   title\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n"): (typeof documents)["\n  fragment PageTranslatable on PageTranslation {\n    id\n    content\n    seoDescription\n    seoTitle\n    title\n    language {\n      code\n      language\n    }\n    # translation(languageCode: $language) {\n    #   id\n    #   content\n    #   seoDescription\n    #   seoTitle\n    #   title\n    #   language {\n    #     code\n    #     language\n    #   }\n    # }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AttributeChoicesTranslation on ValueConnection {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      cursor\n      node {\n        id\n        name\n        plainText\n        richText\n        inputType\n        translation(languageCode: $language) {\n          id\n          name\n          plainText\n          richText\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AttributeChoicesTranslation on ValueConnection {\n    pageInfo {\n      ...PageInfo\n    }\n    edges {\n      cursor\n      node {\n        id\n        name\n        plainText\n        richText\n        inputType\n        translation(languageCode: $language) {\n          id\n          name\n          plainText\n          richText\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AttributeTranslation on AttributeTranslation {\n    id\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    # }\n    attribute {\n      id\n      name\n      inputType\n    }\n  }\n"): (typeof documents)["\n  fragment AttributeTranslation on AttributeTranslation {\n    id\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    # }\n    attribute {\n      id\n      name\n      inputType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AttributeTranslationDetails on AttributeTranslation {\n    id\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    # }\n    attribute {\n      id\n      name\n      inputType\n      withChoices\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...AttributeChoicesTranslation\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AttributeTranslationDetails on AttributeTranslation {\n    id\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   name\n    # }\n    attribute {\n      id\n      name\n      inputType\n      withChoices\n      values(\n        first: $firstValues\n        after: $afterValues\n        last: $lastValues\n        before: $beforeValues\n      ) {\n        ...AttributeChoicesTranslation\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MenuItemTranslation on MenuItemTranslation {\n    id\n    language {\n      language\n    }\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     language\n    #   }\n    #   name\n    # }\n    menuItem {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment MenuItemTranslation on MenuItemTranslation {\n    id\n    language {\n      language\n    }\n    name\n    # translation(languageCode: $language) {\n    #   id\n    #   language {\n    #     language\n    #   }\n    #   name\n    # }\n    menuItem {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Warehouse on Warehouse {\n    id\n    name\n  }\n"): (typeof documents)["\n  fragment Warehouse on Warehouse {\n    id\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WarehouseWithShipping on Warehouse {\n    ...Warehouse\n    shippingZones(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment WarehouseWithShipping on Warehouse {\n    ...Warehouse\n    shippingZones(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WarehouseDetails on Warehouse {\n    isPrivate\n    clickAndCollectOption\n    ...WarehouseWithShipping\n    address {\n      ...Address\n    }\n  }\n"): (typeof documents)["\n  fragment WarehouseDetails on Warehouse {\n    isPrivate\n    clickAndCollectOption\n    ...WarehouseWithShipping\n    address {\n      ...Address\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Webhook on Webhook {\n    id\n    name\n    isActive\n    app {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment Webhook on Webhook {\n    id\n    name\n    isActive\n    app {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WebhookDetails on Webhook {\n    ...Webhook\n    syncEvents {\n      eventType\n    }\n    asyncEvents {\n      eventType\n    }\n    secretKey\n    targetUrl\n  }\n"): (typeof documents)["\n  fragment WebhookDetails on Webhook {\n    ...Webhook\n    syncEvents {\n      eventType\n    }\n    asyncEvents {\n      eventType\n    }\n    secretKey\n    targetUrl\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardBulkCreate($input: GiftCardBulkCreationInput!) {\n    createGiftCards(data: $input) {\n      objects {\n        id\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardBulkCreate($input: GiftCardBulkCreationInput!) {\n    createGiftCards(data: $input) {\n      objects {\n        id\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardCreate($input: GiftCardCreationInput!) {\n    createGiftCard(data: $input) {\n      result {\n        code\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardCreate($input: GiftCardCreationInput!) {\n    createGiftCard(data: $input) {\n      result {\n        code\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChannelCurrencies {\n    shop {\n      id\n      channelCurrencies\n    }\n  }\n"): (typeof documents)["\n  query ChannelCurrencies {\n    shop {\n      id\n      channelCurrencies\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ExportGiftCards($input: ExportGiftCardsInput!) {\n    exportGiftCards(data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ExportGiftCards($input: ExportGiftCardsInput!) {\n    exportGiftCards(data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardSettingsUpdate($input: GiftCardSettingsUpdateInput!) {\n    updateGiftCardSettings(data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        ...GiftCardsSettings\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardSettingsUpdate($input: GiftCardSettingsUpdateInput!) {\n    updateGiftCardSettings(data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        ...GiftCardsSettings\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GiftCardSettings {\n    giftCardSettings {\n      ...GiftCardsSettings\n    }\n  }\n"): (typeof documents)["\n  query GiftCardSettings {\n    giftCardSettings {\n      ...GiftCardsSettings\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardResend($input: GiftCardResendInput!) {\n    resendGiftCard(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardResend($input: GiftCardResendInput!) {\n    resendGiftCard(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardActivate($id: ID!) {\n    activateGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardActivate($id: ID!) {\n    activateGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardDeactivate($id: ID!) {\n    deactivateGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardDeactivate($id: ID!) {\n    deactivateGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GiftCardData\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n    updateGiftCard(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        ...GiftCardData\n        events {\n          ...GiftCardEvent\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n    updateGiftCard(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n     result {\n        ...GiftCardData\n        events {\n          ...GiftCardEvent\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardAddNote($id: ID!, $input: GiftCardAddNoteInput!) {\n    addNoteToGiftCard(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      giftCard {\n        ...GiftCardData\n      }\n      event {\n        ...GiftCardEvent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardAddNote($id: ID!, $input: GiftCardAddNoteInput!) {\n    addNoteToGiftCard(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      giftCard {\n        ...GiftCardData\n      }\n      event {\n        ...GiftCardEvent\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GiftCardDetails($id: ID!) {\n    giftCard(id: $id) {\n      ...GiftCardData\n      events {\n        ...GiftCardEvent\n      }\n    }\n  }\n"): (typeof documents)["\n  query GiftCardDetails($id: ID!) {\n    giftCard(id: $id) {\n      ...GiftCardData\n      events {\n        ...GiftCardEvent\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GiftCardCurrencies {\n    giftCardCurrencies\n  }\n"): (typeof documents)["\n  query GiftCardCurrencies {\n    giftCardCurrencies\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardBulkActivate($ids: [ID!]!) {\n    activateGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n      count\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardBulkActivate($ids: [ID!]!) {\n    activateGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n      count\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GiftCardBulkDeactivate($ids: [ID!]!) {\n    deactivateGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n      count\n    }\n  }\n"): (typeof documents)["\n  mutation GiftCardBulkDeactivate($ids: [ID!]!) {\n    deactivateGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n      count\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteGiftCard($id: ID!) {\n    deleteGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteGiftCard($id: ID!) {\n    deleteGiftCard(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation BulkDeleteGiftCard($ids: [ID!]!) {\n    deleteGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation BulkDeleteGiftCard($ids: [ID!]!) {\n    deleteGiftCards(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GiftCardList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: GiftCardFilter\n    $sort: GiftCardOrderingInput\n  ) {\n    giftCards(\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          id\n          usedByEmail\n          last4CodeChars\n          isActive\n          expiryDate\n          product {\n            id\n            name\n          }\n          tags {\n            name\n          }\n          usedBy {\n            ...UserBase\n          }\n          currentBalance {\n            ...Money\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GiftCardList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: GiftCardFilter\n    $sort: GiftCardOrderingInput\n  ) {\n    giftCards(\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          id\n          usedByEmail\n          last4CodeChars\n          isActive\n          expiryDate\n          product {\n            id\n            name\n          }\n          tags {\n            name\n          }\n          usedBy {\n            ...UserBase\n          }\n          currentBalance {\n            ...Money\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GiftCardTotalCount {\n    giftCards {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GiftCardTotalCount {\n    giftCards {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GiftCardProductsCount {\n    giftCardProductKlasses: productKlasses(filters: { kind: GIFT_CARD }) {\n      totalCount\n    }\n    giftCardProducts: products(filters: { isGiftCard: true }) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GiftCardProductsCount {\n    giftCardProductKlasses: productKlasses(filters: { kind: GIFT_CARD }) {\n      totalCount\n    }\n    giftCardProducts: products(filters: { isGiftCard: true }) {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GroupDelete($id: ID!) {\n    deleteGroup(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GroupDelete($id: ID!) {\n    deleteGroup(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GroupCreate($input: GroupCreationInput!) {\n    createGroup(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GroupDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GroupCreate($input: GroupCreationInput!) {\n    createGroup(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GroupDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GroupUpdate($id: ID!, $input: GroupUpdateInput!) {\n    updateGroup(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GroupDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GroupUpdate($id: ID!, $input: GroupUpdateInput!) {\n    updateGroup(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...GroupDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GroupList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: GroupFilter\n    $sort: GroupOrderingInput\n  ) {\n    groups(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Group\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query GroupList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: GroupFilter\n    $sort: GroupOrderingInput\n  ) {\n    groups(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...Group\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GroupDetails($id: ID!, $userId: ID!) {\n    group(id: $id) {\n      ...GroupDetails\n    }\n    user(id: $userId) {\n      editableGroups {\n        id\n      }\n      userPermissions {\n        code\n        sourceGroups(userId: $userId) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GroupDetails($id: ID!, $userId: ID!) {\n    group(id: $id) {\n      ...GroupDetails\n    }\n    user(id: $userId) {\n      editableGroups {\n        id\n      }\n      userPermissions {\n        code\n        sourceGroups(userId: $userId) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MediaCreate($input: MediaCreationInput!) {\n    createMedia(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MediaCreate($input: MediaCreationInput!) {\n    createMedia(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MediaUpdate($id: ID!, $input: MediaInput!) {\n    updateMedia(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...MediaItemDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MediaUpdate($id: ID!, $input: MediaInput!) {\n    updateMedia(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...MediaItemDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MediaRemove($id: ID!) {\n    deleteMediaItem(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MediaRemove($id: ID!) {\n    deleteMediaItem(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MediaBulkPublish($ids: [ID!]!, $isPublished: Boolean!) {\n    publishMediaItems(ids: $ids, isPublished: $isPublished) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MediaBulkPublish($ids: [ID!]!, $isPublished: Boolean!) {\n    publishMediaItems(ids: $ids, isPublished: $isPublished) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MediaBulkRemove($ids: [ID!]!) {\n    deleteMediaItems(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MediaBulkRemove($ids: [ID!]!) {\n    deleteMediaItems(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MediaList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: MediaOrderingInput\n    $filter: MediaFilter\n  ) {\n    media(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...MediaItem\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query MediaList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: MediaOrderingInput\n    $filter: MediaFilter\n  ) {\n    media(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...MediaItem\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MediaItemDetails($id: ID!) {\n    mediaItem(id: $id) {\n      ...MediaItemDetails\n    }\n  }\n"): (typeof documents)["\n  query MediaItemDetails($id: ID!) {\n    mediaItem(id: $id) {\n      ...MediaItemDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MediaCount($filter: MediaFilter) {\n    media(filters: $filter) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query MediaCount($filter: MediaFilter) {\n    media(filters: $filter) {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MenuCreate($input: MenuCreationInput!) {\n    createMenu(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MenuCreate($input: MenuCreationInput!) {\n    createMenu(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MenuBulkDelete($ids: [ID!]!) {\n    deleteMenus(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MenuBulkDelete($ids: [ID!]!) {\n    deleteMenus(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MenuDelete($id: ID!) {\n    deleteMenu(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MenuDelete($id: ID!) {\n    deleteMenu(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MenuItemCreate($input: MenuItemCreationInput!) {\n    createMenuItem(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        menu {\n          id\n          items {\n            ...MenuItemNested\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MenuItemCreate($input: MenuItemCreationInput!) {\n    createMenuItem(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        menu {\n          id\n          items {\n            ...MenuItemNested\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MenuUpdate(\n    $id: ID!\n    $name: String!\n    $moves: [MenuItemMoveInput!]!\n    $removeIds: [ID!]!\n  ) {\n    updateMenu(id: $id, data: { name: $name }) {\n      errors {\n        ...Error\n      }\n    }\n\n    moveMenuItem(menuId: $id, moves: $moves) {\n      errors {\n        ...Error\n      }\n    }\n\n    deleteMenuItems(ids: $removeIds) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MenuUpdate(\n    $id: ID!\n    $name: String!\n    $moves: [MenuItemMoveInput!]!\n    $removeIds: [ID!]!\n  ) {\n    updateMenu(id: $id, data: { name: $name }) {\n      errors {\n        ...Error\n      }\n    }\n\n    moveMenuItem(menuId: $id, moves: $moves) {\n      errors {\n        ...Error\n      }\n    }\n\n    deleteMenuItems(ids: $removeIds) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MenuItemUpdate($id: ID!, $input: MenuItemInput!) {\n    updateMenuItem(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...MenuItem\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MenuItemUpdate($id: ID!, $input: MenuItemInput!) {\n    updateMenuItem(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...MenuItem\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MenuList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: MenuOrderingInput\n  ) {\n    menus(first: $first, after: $after, before: $before, last: $last, sortBy: $sort) {\n      edges {\n        node {\n          ...Menu\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query MenuList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: MenuOrderingInput\n  ) {\n    menus(first: $first, after: $after, before: $before, last: $last, sortBy: $sort) {\n      edges {\n        node {\n          ...Menu\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MenuDetails($id: ID!) {\n    menu(id: $id) {\n      ...MenuDetails\n    }\n  }\n"): (typeof documents)["\n  query MenuDetails($id: ID!) {\n    menu(id: $id) {\n      ...MenuDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderCancel($id: ID!) {\n    cancelOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderCancel($id: ID!) {\n    cancelOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderDiscountAdd($input: OrderDiscountCommonInput!, $orderId: ID!) {\n    addDiscountToOrder(data: $input, orderId: $orderId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderDiscountAdd($input: OrderDiscountCommonInput!, $orderId: ID!) {\n    addDiscountToOrder(data: $input, orderId: $orderId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderDiscountDelete($discountId: ID!) {\n    deleteOrderDiscount(discountId: $discountId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderDiscountDelete($discountId: ID!) {\n    deleteOrderDiscount(discountId: $discountId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderLineDiscountRemove($orderLineId: ID!) {\n    removeOrderLineDiscount(orderLineId: $orderLineId) {\n      errors {\n        ...OrderError\n      }\n      order {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderLineDiscountRemove($orderLineId: ID!) {\n    removeOrderLineDiscount(orderLineId: $orderLineId) {\n      errors {\n        ...OrderError\n      }\n      order {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderLineDiscountUpdate($input: OrderDiscountCommonInput!, $orderLineId: ID!) {\n    updateOrderLineDiscount(data: $input, orderLineId: $orderLineId) {\n      errors {\n        ...OrderError\n      }\n      order {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderLineDiscountUpdate($input: OrderDiscountCommonInput!, $orderLineId: ID!) {\n    updateOrderLineDiscount(data: $input, orderLineId: $orderLineId) {\n      errors {\n        ...OrderError\n      }\n      order {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderDiscountUpdate($input: OrderDiscountCommonInput!, $discountId: ID!) {\n    updateOrderDiscount(data: $input, discountId: $discountId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderDiscountUpdate($input: OrderDiscountCommonInput!, $discountId: ID!) {\n    updateOrderDiscount(data: $input, discountId: $discountId) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderDraftCancel($id: ID!) {\n    deleteOrderDraft(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderDraftCancel($id: ID!) {\n    deleteOrderDraft(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderDraftBulkCancel($ids: [ID!]!) {\n    deleteOrderDrafts(ids: $ids) {\n      errors {\n        ...OrderError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderDraftBulkCancel($ids: [ID!]!) {\n    deleteOrderDrafts(ids: $ids) {\n      errors {\n        ...OrderError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderConfirm($id: ID!) {\n    confirmOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderConfirm($id: ID!) {\n    confirmOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderDraftFinalize($id: ID!) {\n    completeOrderDraft(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderDraftFinalize($id: ID!) {\n    completeOrderDraft(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation FulfillmentReturnProducts($id: ID!, $input: OrderReturnProductsInput!) {\n    returnFulfilledProducts(data: $input, order: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        fulfillment {\n          id\n        }\n        order {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation FulfillmentReturnProducts($id: ID!, $input: OrderReturnProductsInput!) {\n    returnFulfilledProducts(data: $input, order: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        fulfillment {\n          id\n        }\n        order {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderRefund($id: ID!, $amount: PositiveDecimal!) {\n    refundOrder(id: $id, amount: $amount) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderRefund($id: ID!, $amount: PositiveDecimal!) {\n    refundOrder(id: $id, amount: $amount) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderFulfillmentRefundProducts($input: OrderRefundProductsInput!, $order: ID!) {\n    refundFulfilledProducts(data: $input, order: $order) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n        fulfillment {\n          ...Fulfillment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderFulfillmentRefundProducts($input: OrderRefundProductsInput!, $order: ID!) {\n    refundFulfilledProducts(data: $input, order: $order) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n        fulfillment {\n          ...Fulfillment\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderVoid($id: ID!) {\n    voidOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderVoid($id: ID!) {\n    voidOrder(id: $id) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderMarkAsPaid($id: ID!, $transactionReference: String) {\n    markOrderAsPaid(id: $id, transactionReference: $transactionReference) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderMarkAsPaid($id: ID!, $transactionReference: String) {\n    markOrderAsPaid(id: $id, transactionReference: $transactionReference) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderCapture($id: ID!, $amount: PositiveDecimal!) {\n    captureOrder(id: $id, amount: $amount) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderCapture($id: ID!, $amount: PositiveDecimal!) {\n    captureOrder(id: $id, amount: $amount) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderFulfillmentUpdateTracking(\n    $id: ID!\n    $input: FulfillmentUpdateTrackingInput!\n  ) {\n    updateFulfillmentTracking(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderFulfillmentUpdateTracking(\n    $id: ID!\n    $input: FulfillmentUpdateTrackingInput!\n  ) {\n    updateFulfillmentTracking(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderFulfillmentApprove(\n    $id: ID!\n    $notifyCustomer: Boolean!\n    $allowStockToBeExceeded: Boolean\n  ) {\n    approveFulfillment(\n      id: $id\n      notifyCustomer: $notifyCustomer\n      allowStockToBeExceeded: $allowStockToBeExceeded\n    ) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderFulfillmentApprove(\n    $id: ID!\n    $notifyCustomer: Boolean!\n    $allowStockToBeExceeded: Boolean\n  ) {\n    approveFulfillment(\n      id: $id\n      notifyCustomer: $notifyCustomer\n      allowStockToBeExceeded: $allowStockToBeExceeded\n    ) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderFulfillmentCancel($id: ID!, $input: FulfillmentCancelInput!) {\n    cancelFulfillment(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderFulfillmentCancel($id: ID!, $input: FulfillmentCancelInput!) {\n    cancelFulfillment(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderAddNote($orderId: ID!, $input: OrderAddNoteInput!) {\n    addNoteToOrder(id: $orderId, data: $input) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        events {\n          ...OrderEvent\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderAddNote($orderId: ID!, $input: OrderAddNoteInput!) {\n    addNoteToOrder(id: $orderId, data: $input) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        events {\n          ...OrderEvent\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderUpdate($id: ID!, $input: OrderUpdateInput!) {\n    updateOrder(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderUpdate($id: ID!, $input: OrderUpdateInput!) {\n    updateOrder(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderDraftUpdate($id: ID!, $input: DraftOrderInput!) {\n    updateDraftOrder(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderDraftUpdate($id: ID!, $input: DraftOrderInput!) {\n    updateDraftOrder(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderShippingMethodUpdate($id: ID!, $input: OrderUpdateShippingInput!) {\n    updateOrderShipping(orderId: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        shippingMethods {\n          id\n          name\n        }\n        total {\n          tax {\n            amount\n            currency\n          }\n          gross {\n            amount\n            currency\n          }\n        }\n        id\n        shippingMethod {\n          id\n          name\n          price {\n            amount\n            currency\n          }\n        }\n        shippingMethodName\n        shippingPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n        ...OrderDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderShippingMethodUpdate($id: ID!, $input: OrderUpdateShippingInput!) {\n    updateOrderShipping(orderId: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        shippingMethods {\n          id\n          name\n        }\n        total {\n          tax {\n            amount\n            currency\n          }\n          gross {\n            amount\n            currency\n          }\n        }\n        id\n        shippingMethod {\n          id\n          name\n          price {\n            amount\n            currency\n          }\n        }\n        shippingMethodName\n        shippingPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n        ...OrderDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderDraftCreate($input: DraftOrderCreationInput!) {\n    createDraftOrder(data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderDraftCreate($input: DraftOrderCreationInput!) {\n    createDraftOrder(data: $input) {\n      errors {\n        ...OrderError\n      }\n      result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderLineDelete($id: ID!) {\n    deleteOrderLine(id: $id) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        lines {\n          ...OrderLine\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderLineDelete($id: ID!) {\n    deleteOrderLine(id: $id) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        lines {\n          ...OrderLine\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderLinesAdd($id: ID!, $input: [OrderLineCreationInput!]!) {\n    createOrderLines(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        lines {\n          ...OrderLine\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderLinesAdd($id: ID!, $input: [OrderLineCreationInput!]!) {\n    createOrderLines(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      order {\n        id\n        lines {\n          ...OrderLine\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderLineUpdate($id: ID!, $input: OrderLineInput!) {\n    updateOrderLine(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      orderLine {\n        ...OrderLine\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderLineUpdate($id: ID!, $input: OrderLineInput!) {\n    updateOrderLine(id: $id, data: $input) {\n      errors {\n        ...OrderError\n      }\n      orderLine {\n        ...OrderLine\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation FulfillOrder($orderId: ID!, $input: OrderFulfillInput!) {\n    fulfillOrder(order: $orderId, data: $input) {\n      errors {\n        ...OrderError\n        ... on OrderError {\n          warehouse\n        }\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation FulfillOrder($orderId: ID!, $input: OrderFulfillInput!) {\n    fulfillOrder(order: $orderId, data: $input) {\n      errors {\n        ...OrderError\n        ... on OrderError {\n          warehouse\n        }\n      }\n      result {\n        order {\n          ...OrderDetails\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InvoiceRequest($orderId: ID!) {\n    requestInvoice(orderId: $orderId) {\n      errors {\n        ...Error\n      }\n      invoice {\n        ...Invoice\n      }\n      order {\n        id\n        invoices {\n          ...Invoice\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InvoiceRequest($orderId: ID!) {\n    requestInvoice(orderId: $orderId) {\n      errors {\n        ...Error\n      }\n      invoice {\n        ...Invoice\n      }\n      order {\n        id\n        invoices {\n          ...Invoice\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InvoiceEmailSend($id: ID!) {\n    sendInvoiceNotification(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Invoice\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InvoiceEmailSend($id: ID!) {\n    sendInvoiceNotification(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Invoice\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OrderSettingsUpdate(\n    $orderSettingsInput: OrderSettingsUpdateInput!\n    $shopSettingsInput: ShopSettingsUpdateInput!\n  ) {\n    updateOrderSettings(data: $orderSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...OrderSettings\n      }\n    }\n    updateShopSettings(data: $shopSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ShopOrderSettings\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OrderSettingsUpdate(\n    $orderSettingsInput: OrderSettingsUpdateInput!\n    $shopSettingsInput: ShopSettingsUpdateInput!\n  ) {\n    updateOrderSettings(data: $orderSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...OrderSettings\n      }\n    }\n    updateShopSettings(data: $shopSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ShopOrderSettings\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrderList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: OrderFilter\n    $sort: OrderOrderingInput\n  ) {\n    orders(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          __typename\n          billingAddress {\n            ...Address\n          }\n          createdAt\n          id\n          number\n          paymentStatus\n          status\n          total {\n            __typename\n            gross {\n              __typename\n              amount\n              currency\n            }\n          }\n          userEmail\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: OrderFilter\n    $sort: OrderOrderingInput\n  ) {\n    orders(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          __typename\n          billingAddress {\n            ...Address\n          }\n          createdAt\n          id\n          number\n          paymentStatus\n          status\n          total {\n            __typename\n            gross {\n              __typename\n              amount\n              currency\n            }\n          }\n          userEmail\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrderDraftList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: OrderDraftFilter\n    $sort: OrderOrderingInput\n  ) {\n    orderDrafts(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          __typename\n          billingAddress {\n            ...Address\n          }\n          createdAt\n          id\n          number\n          paymentStatus\n          status\n          total {\n            __typename\n            gross {\n              __typename\n              amount\n              currency\n            }\n          }\n          userEmail\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderDraftList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: OrderDraftFilter\n    $sort: OrderOrderingInput\n  ) {\n    orderDrafts(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          __typename\n          billingAddress {\n            ...Address\n          }\n          createdAt\n          id\n          number\n          paymentStatus\n          status\n          total {\n            __typename\n            gross {\n              __typename\n              amount\n              currency\n            }\n          }\n          userEmail\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrderDetails($id: ID!) {\n    order(id: $id) {\n      ...OrderDetails\n    }\n    shop {\n      id\n      countries {\n        code\n        name\n      }\n      defaultWeightUnit\n      fulfillmentAllowUnpaid\n      autoApproveFulfillment\n    }\n  }\n"): (typeof documents)["\n  query OrderDetails($id: ID!) {\n    order(id: $id) {\n      ...OrderDetails\n    }\n    shop {\n      id\n      countries {\n        code\n        name\n      }\n      defaultWeightUnit\n      fulfillmentAllowUnpaid\n      autoApproveFulfillment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrderFulfillData($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      isPaid\n      fulfillmentMethod {\n        __typename\n        ... on ShippingMethod {\n          id\n        }\n        ... on Warehouse {\n          id\n          clickAndCollectOption\n        }\n      }\n      lines {\n        ...OrderFulfillmentLine\n      }\n      number\n    }\n  }\n"): (typeof documents)["\n  query OrderFulfillData($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      isPaid\n      fulfillmentMethod {\n        __typename\n        ... on ShippingMethod {\n          id\n        }\n        ... on Warehouse {\n          id\n          clickAndCollectOption\n        }\n      }\n      lines {\n        ...OrderFulfillmentLine\n      }\n      number\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrderFulfillSettings {\n    shop {\n      ...ShopOrderSettings\n    }\n  }\n"): (typeof documents)["\n  query OrderFulfillSettings {\n    shop {\n      ...ShopOrderSettings\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrderSettings {\n    orderSettings {\n      ...OrderSettings\n    }\n    shop {\n      ...ShopOrderSettings\n    }\n  }\n"): (typeof documents)["\n  query OrderSettings {\n    orderSettings {\n      ...OrderSettings\n    }\n    shop {\n      ...ShopOrderSettings\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrderRefundData($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      number\n      total {\n        gross {\n          ...Money\n        }\n      }\n      totalCaptured {\n        ...Money\n      }\n      shippingPrice {\n        gross {\n          ...Money\n        }\n      }\n      lines {\n        ...RefundOrderLine\n        quantityToFulfill\n      }\n      fulfillments {\n        id\n        status\n        fulfillmentOrder\n        lines {\n          id\n          quantity\n          orderLine {\n            ...RefundOrderLine\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderRefundData($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      number\n      total {\n        gross {\n          ...Money\n        }\n      }\n      totalCaptured {\n        ...Money\n      }\n      shippingPrice {\n        gross {\n          ...Money\n        }\n      }\n      lines {\n        ...RefundOrderLine\n        quantityToFulfill\n      }\n      fulfillments {\n        id\n        status\n        fulfillmentOrder\n        lines {\n          id\n          quantity\n          orderLine {\n            ...RefundOrderLine\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChannelUsabilityData($channel: String!) {\n    products(channel: $channel) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ChannelUsabilityData($channel: String!) {\n    products(channel: $channel) {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageKlassUpdate($id: ID!, $input: PageKlassUpdateInput!) {\n    updatePageKlass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageKlassUpdate($id: ID!, $input: PageKlassUpdateInput!) {\n    updatePageKlass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageKlassCreate($input: PageKlassCreationInput!) {\n    createPageKlass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageKlassCreate($input: PageKlassCreationInput!) {\n    createPageKlass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AssignPageAttribute($id: ID!, $ids: [ID!]!) {\n    assignPageAttribute(pageKlassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AssignPageAttribute($id: ID!, $ids: [ID!]!) {\n    assignPageAttribute(pageKlassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UnassignPageAttribute($id: ID!, $ids: [ID!]!) {\n    unassignPageAttribute(pageKlassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UnassignPageAttribute($id: ID!, $ids: [ID!]!) {\n    unassignPageAttribute(pageKlassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageKlassDelete($id: ID!) {\n    deletePageKlass(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageKlassDelete($id: ID!) {\n    deletePageKlass(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageKlassBulkDelete($ids: [ID!]!) {\n    deletePageKlasses(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageKlassBulkDelete($ids: [ID!]!) {\n    deletePageKlasses(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageKlassAttributeReorder($move: ReorderInput!, $pageKlassId: ID!) {\n    reorderPageKlassAttributes(moves: [$move], pageKlassId: $pageKlassId) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageKlassAttributeReorder($move: ReorderInput!, $pageKlassId: ID!) {\n    reorderPageKlassAttributes(moves: [$move], pageKlassId: $pageKlassId) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PageKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageKlassList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: PageKlassFilter\n    $sort: PageKlassOrderingInput\n  ) {\n    pageKlasses(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...PageKlass\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query PageKlassList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: PageKlassFilter\n    $sort: PageKlassOrderingInput\n  ) {\n    pageKlasses(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...PageKlass\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageKlassDetails($id: ID!) {\n    pageKlass(id: $id) {\n      ...PageKlassDetails\n    }\n  }\n"): (typeof documents)["\n  query PageKlassDetails($id: ID!) {\n    pageKlass(id: $id) {\n      ...PageKlassDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageCreate($input: PageCreationInput!) {\n    createPage(data: $input) {\n      errors {\n        ...PageErrorWithAttributes\n      }\n      result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageCreate($input: PageCreationInput!) {\n    createPage(data: $input) {\n      errors {\n        ...PageErrorWithAttributes\n      }\n      result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageUpdate(\n    $id: ID!\n    $input: PageInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    updatePage(id: $id, data: $input) {\n      errors {\n        ...PageErrorWithAttributes\n      }\n      result {\n        ...PageDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageUpdate(\n    $id: ID!\n    $input: PageInput!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    updatePage(id: $id, data: $input) {\n      errors {\n        ...PageErrorWithAttributes\n      }\n      result {\n        ...PageDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageRemove($id: ID!) {\n    deletePage(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageRemove($id: ID!) {\n    deletePage(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageBulkPublish($ids: [ID!]!, $isPublished: Boolean!) {\n    publishPages(ids: $ids, isPublished: $isPublished) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageBulkPublish($ids: [ID!]!, $isPublished: Boolean!) {\n    publishPages(ids: $ids, isPublished: $isPublished) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PageBulkRemove($ids: [ID!]!) {\n    deletePages(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PageBulkRemove($ids: [ID!]!) {\n    deletePages(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: PageOrderingInput\n    $filter: PageFilter\n  ) {\n    pages(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...Page\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query PageList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $sort: PageOrderingInput\n    $filter: PageFilter\n  ) {\n    pages(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      sortBy: $sort\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...Page\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    page(id: $id) {\n      ...PageDetails\n    }\n  }\n"): (typeof documents)["\n  query PageDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    page(id: $id) {\n      ...PageDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageKlass(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    pageKlass(id: $id) {\n      id\n      name\n      attributes {\n        id\n        inputType\n        entityType\n        slug\n        name\n        valueRequired\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PageKlass(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    pageKlass(id: $id) {\n      id\n      name\n      attributes {\n        id\n        inputType\n        entityType\n        slug\n        name\n        valueRequired\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageCount($filter: PageFilter) {\n    pages(filters: $filter) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query PageCount($filter: PageFilter) {\n    pages(filters: $filter) {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PluginUpdate($channelId: ID, $id: ID!, $input: PluginUpdateInput!) {\n    updatePlugin(channelId: $channelId, id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PluginsDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PluginUpdate($channelId: ID, $id: ID!, $input: PluginUpdateInput!) {\n    updatePlugin(channelId: $channelId, id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...PluginsDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Plugins(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: PluginFilter\n    $sort: PluginOrderingInput\n  ) {\n    plugins(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...PluginBase\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query Plugins(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: PluginFilter\n    $sort: PluginOrderingInput\n  ) {\n    plugins(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...PluginBase\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Plugin($id: ID!) {\n    plugin(id: $id) {\n      ...PluginsDetails\n    }\n  }\n"): (typeof documents)["\n  query Plugin($id: ID!) {\n    plugin(id: $id) {\n      ...PluginsDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductKlassDelete($id: ID!) {\n    deleteProductKlass(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductKlassDelete($id: ID!) {\n    deleteProductKlass(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductKlassBulkDelete($ids: [ID!]!) {\n    deleteProductKlasses(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductKlassBulkDelete($ids: [ID!]!) {\n    deleteProductKlasses(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductKlassUpdate($id: ID!, $input: ProductKlassInput!) {\n    updateProductKlass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductKlassUpdate($id: ID!, $input: ProductKlassInput!) {\n    updateProductKlass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AssignProductAttribute($id: ID!, $operations: [ProductAttributeAssignInput!]!) {\n    assignProductAttribute(klassId: $id, operations: $operations) {\n      errors {\n        ...Error\n      }\n      productKlass {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AssignProductAttribute($id: ID!, $operations: [ProductAttributeAssignInput!]!) {\n    assignProductAttribute(klassId: $id, operations: $operations) {\n      errors {\n        ...Error\n      }\n      productKlass {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UnassignProductAttribute($id: ID!, $ids: [ID!]!) {\n    unassignProductAttribute(klassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UnassignProductAttribute($id: ID!, $ids: [ID!]!) {\n    unassignProductAttribute(klassId: $id, attributeIds: $ids) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductKlassCreate($input: ProductKlassInput!) {\n    createProductKlass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductKlassCreate($input: ProductKlassInput!) {\n    createProductKlass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductKlassAttributeReorder(\n    $move: ReorderInput!\n    $klassId: ID!\n    $type: ProductAttributeType!\n  ) {\n    reorderProductKlassAttributes(\n      moves: [$move]\n      klassId: $klassId\n      type: $type\n    ) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductKlassAttributeReorder(\n    $move: ReorderInput!\n    $klassId: ID!\n    $type: ProductAttributeType!\n  ) {\n    reorderProductKlassAttributes(\n      moves: [$move]\n      klassId: $klassId\n      type: $type\n    ) {\n      errors {\n        ...Error\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductAttributeAssignmentUpdate(\n    $operations: [ProductAttributeAssignmentUpdateInput!]!\n    $klassId: ID!\n  ) {\n    updateProductAttributeAssignment(\n      operations: $operations\n      klassId: $klassId\n    ) {\n      errors {\n        ...ProductAttributeAssignmentUpdateError\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductAttributeAssignmentUpdate(\n    $operations: [ProductAttributeAssignmentUpdateInput!]!\n    $klassId: ID!\n  ) {\n    updateProductAttributeAssignment(\n      operations: $operations\n      klassId: $klassId\n    ) {\n      errors {\n        ...ProductAttributeAssignmentUpdateError\n      }\n      result {\n        ...ProductKlassDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductKlassList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: ProductKlassFilter\n    $sort: ProductKlassOrderingInput\n  ) {\n    productKlasses(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...ProductKlass\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductKlassList(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $filter: ProductKlassFilter\n    $sort: ProductKlassOrderingInput\n  ) {\n    productKlasses(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...ProductKlass\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductKlassDetails($id: ID!) {\n    productKlass(id: $id) {\n      ...ProductKlassDetails\n    }\n    shop {\n      id\n      defaultWeightUnit\n    }\n  }\n"): (typeof documents)["\n  query ProductKlassDetails($id: ID!) {\n    productKlass(id: $id) {\n      ...ProductKlassDetails\n    }\n    shop {\n      id\n      defaultWeightUnit\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductKlassCreateData {\n    shop {\n      id\n      defaultWeightUnit\n    }\n  }\n"): (typeof documents)["\n  query ProductKlassCreateData {\n    shop {\n      id\n      defaultWeightUnit\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductMediaCreate(\n    $product: ID!\n    $image: Upload\n    $alt: String!\n    $mediaUrl: String\n  ) {\n    createProductMediaItem(\n      data: { alt: $alt, image: $image, product: $product, mediaUrl: $mediaUrl }\n    ) {\n      errors {\n        ...Error\n      }\n      media {\n        ...ProductMediaItem\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductMediaCreate(\n    $product: ID!\n    $image: Upload\n    $alt: String!\n    $mediaUrl: String\n  ) {\n    createProductMediaItem(\n      data: { alt: $alt, image: $image, product: $product, mediaUrl: $mediaUrl }\n    ) {\n      errors {\n        ...Error\n      }\n      media {\n        ...ProductMediaItem\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductDelete($id: ID!) {\n    deleteProduct(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductDelete($id: ID!) {\n    deleteProduct(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductMediaReorder($productId: ID!, $mediaItemIds: [ID!]!) {\n    reorderProductMedia(productId: $productId, mediaItemIds: $mediaItemIds) {\n      errors {\n        ...Error\n      }\n      media {\n        id\n        alt\n        sortOrder\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductMediaReorder($productId: ID!, $mediaItemIds: [ID!]!) {\n    reorderProductMedia(productId: $productId, mediaItemIds: $mediaItemIds) {\n      errors {\n        ...Error\n      }\n      media {\n        id\n        alt\n        sortOrder\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductSetDefaultVariant($productId: ID!, $variantId: ID!) {\n    setDefaultVariant(productId: $productId, variantId: $variantId) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        defaultVariant {\n          id\n          name\n        }\n        variants {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductSetDefaultVariant($productId: ID!, $variantId: ID!) {\n    setDefaultVariant(productId: $productId, variantId: $variantId) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        defaultVariant {\n          id\n          name\n        }\n        variants {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductDatagridUpdate($id: ID!, $input: ProductInput!) {\n    updateProduct(id: $id, data: $input) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductDatagridUpdate($id: ID!, $input: ProductInput!) {\n    updateProduct(id: $id, data: $input) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductDatagridStockUpdate(\n    $stocks: [StockInput!]!\n    $removeStocks: [ID!]!\n    $id: ID!\n  ) {\n    deleteProductStocks(warehouseIds: $removeStocks, productId: $id) {\n      errors {\n        ...Error\n      }\n    }\n    updateProductStocks(stocks: $stocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductDatagridStockUpdate(\n    $stocks: [StockInput!]!\n    $removeStocks: [ID!]!\n    $id: ID!\n  ) {\n    deleteProductStocks(warehouseIds: $removeStocks, productId: $id) {\n      errors {\n        ...Error\n      }\n    }\n    updateProductStocks(stocks: $stocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductDatagridChannelListingUpdate(\n    $id: ID!\n    $input: [ProductChannelListingAddInput!]!\n  ) {\n    updateProductChannelListing(id: $id, data: $input) {\n      errors {\n        ...ProductChannelListingError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductDatagridChannelListingUpdate(\n    $id: ID!\n    $input: [ProductChannelListingAddInput!]!\n  ) {\n    updateProductChannelListing(id: $id, data: $input) {\n      errors {\n        ...ProductChannelListingError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductUpdate(\n    $addStocks: [StockInput!]!\n    $removeStocks: [ID!]!\n    $id: ID!\n    $attributes: [ValueInput!]\n    $sku: String\n    $quantityLimitPerCustomer: Int\n    $trackInventory: Boolean!\n    $stocks: [StockInput!]!\n    $preorder: PreorderSettingsInput\n    $weight: Weight\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n    $name: String!\n  ) {\n    deleteProductStocks(warehouseIds: $removeStocks, productId: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        stocks {\n          ...Stock\n        }\n      }\n    }\n    createProductStocks(stocks: $addStocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n      result {\n        id\n        stocks {\n          ...Stock\n        }\n      }\n    }\n    updateProductStocks(stocks: $stocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n      result {\n        ...Product\n      }\n    }\n    updateProduct(\n      id: $id\n      data: {\n        attributes: $attributes\n        sku: $sku\n        trackInventory: $trackInventory\n        preorder: $preorder\n        weight: $weight\n        quantityLimitPerCustomer: $quantityLimitPerCustomer\n        name: $name\n      }\n    ) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n      result {\n        ...Product\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductUpdate(\n    $addStocks: [StockInput!]!\n    $removeStocks: [ID!]!\n    $id: ID!\n    $attributes: [ValueInput!]\n    $sku: String\n    $quantityLimitPerCustomer: Int\n    $trackInventory: Boolean!\n    $stocks: [StockInput!]!\n    $preorder: PreorderSettingsInput\n    $weight: Weight\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n    $name: String!\n  ) {\n    deleteProductStocks(warehouseIds: $removeStocks, productId: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        stocks {\n          ...Stock\n        }\n      }\n    }\n    createProductStocks(stocks: $addStocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n      result {\n        id\n        stocks {\n          ...Stock\n        }\n      }\n    }\n    updateProductStocks(stocks: $stocks, productId: $id) {\n      errors {\n        ...BulkStockError\n      }\n      result {\n        ...Product\n      }\n    }\n    updateProduct(\n      id: $id\n      data: {\n        attributes: $attributes\n        sku: $sku\n        trackInventory: $trackInventory\n        preorder: $preorder\n        weight: $weight\n        quantityLimitPerCustomer: $quantityLimitPerCustomer\n        name: $name\n      }\n    ) {\n      errors {\n        ...ProductErrorWithAttributes\n      }\n      result {\n        ...Product\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductMediaDelete($id: ID!) {\n    deleteProductMediaItem(id: $id) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductMediaDelete($id: ID!) {\n    deleteProductMediaItem(id: $id) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductMediaUpdate($id: ID!, $alt: String!) {\n    updateProductMedia(id: $id, data: { alt: $alt }) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductMediaUpdate($id: ID!, $alt: String!) {\n    updateProductMedia(id: $id, data: { alt: $alt }) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductMediaAssign($productId: ID!, $mediaItemId: ID!) {\n    assignProductMedia(productId: $productId, mediaItemId: $mediaItemId) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n        parent {\n          id\n          media {\n            ...ProductMediaItem\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            media {\n              ...ProductMediaItem\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductMediaAssign($productId: ID!, $mediaItemId: ID!) {\n    assignProductMedia(productId: $productId, mediaItemId: $mediaItemId) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n        parent {\n          id\n          media {\n            ...ProductMediaItem\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            media {\n              ...ProductMediaItem\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductMediaUnassign($productId: ID!, $mediaItemId: ID!) {\n    unassignProductMedia(productId: $productId, mediaItemId: $mediaItemId) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n        parent {\n          id\n          media {\n            ...ProductMediaItem\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            media {\n              ...ProductMediaItem\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductMediaUnassign($productId: ID!, $mediaItemId: ID!) {\n    unassignProductMedia(productId: $productId, mediaItemId: $mediaItemId) {\n      errors {\n        ...Error\n      }\n      product {\n        id\n        media {\n          ...ProductMediaItem\n        }\n        parent {\n          id\n          media {\n            ...ProductMediaItem\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            media {\n              ...ProductMediaItem\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductBulkCreate($id: ID!, $inputs: [ProductBulkCreationInput!]!) {\n    createProducts(productId: $id, variants: $inputs) {\n      errors {\n        ...BulkProductError\n      }\n      objects {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductBulkCreate($id: ID!, $inputs: [ProductBulkCreationInput!]!) {\n    createProducts(productId: $id, variants: $inputs) {\n      errors {\n        ...BulkProductError\n      }\n      objects {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductBulkDelete($ids: [ID!]!) {\n    deleteProducts(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductBulkDelete($ids: [ID!]!) {\n    deleteProducts(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductReorder($move: ReorderInput!, $productId: ID!) {\n    reorderProductVariants(moves: [$move], productId: $productId) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        variants {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductReorder($move: ReorderInput!, $productId: ID!) {\n    reorderProductVariants(moves: [$move], productId: $productId) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        variants {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductChannelListingUpdate(\n    $id: ID!\n    $input: [ProductChannelListingAddInput!]!\n  ) {\n    updateProductChannelListing(id: $id, data: $input) {\n      result {\n        id\n        channelListings {\n          ...ChannelListingProduct\n        }\n        # parent {\n        #   id\n        #   channelListings {\n        #     ...ChannelListingProductWithoutPricing\n        #   }\n        # }\n      }\n      errors {\n        ...ProductChannelListingError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductChannelListingUpdate(\n    $id: ID!\n    $input: [ProductChannelListingAddInput!]!\n  ) {\n    updateProductChannelListing(id: $id, data: $input) {\n      result {\n        id\n        channelListings {\n          ...ChannelListingProduct\n        }\n        # parent {\n        #   id\n        #   channelListings {\n        #     ...ChannelListingProductWithoutPricing\n        #   }\n        # }\n      }\n      errors {\n        ...ProductChannelListingError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProductPreorderDeactivate($id: ID!) {\n    deactivateProductPreorder(id: $id) {\n      productVariant {\n        id\n        preorder {\n          ...Preorder\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductPreorderDeactivate($id: ID!) {\n    deactivateProductPreorder(id: $id) {\n      productVariant {\n        id\n        preorder {\n          ...Preorder\n        }\n      }\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InitialProductFilterAttributes {\n    attributes(first: 100, filters: { type: PRODUCT_TYPE }) {\n      edges {\n        node {\n          id\n          name\n          inputType\n          slug\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query InitialProductFilterAttributes {\n    attributes(first: 100, filters: { type: PRODUCT_TYPE }) {\n      edges {\n        node {\n          id\n          name\n          inputType\n          slug\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InitialProductFilterCategories($categories: [ID!]) {\n    categories(first: 100, filters: { ids: $categories }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query InitialProductFilterCategories($categories: [ID!]) {\n    categories(first: 100, filters: { ids: $categories }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InitialProductFilterCollections($collections: [ID!]) {\n    collections(first: 100, filters: { ids: $collections }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query InitialProductFilterCollections($collections: [ID!]) {\n    collections(first: 100, filters: { ids: $collections }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InitialProductFilterProductKlasses($productKlasses: [ID!]) {\n    productKlasses(first: 100, filters: { ids: $productKlasses }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query InitialProductFilterProductKlasses($productKlasses: [ID!]) {\n    productKlasses(first: 100, filters: { ids: $productKlasses }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: ProductFilter\n    $channel: String\n    $sort: ProductOrderingInput\n    $hasChannel: Boolean!\n    $hasSelectedAttributes: Boolean!\n  ) {\n    products(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...ProductWithChannelListings\n          updatedAt\n          attributes @include(if: $hasSelectedAttributes) {\n            ...ProductListAttribute\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ProductList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: ProductFilter\n    $channel: String\n    $sort: ProductOrderingInput\n    $hasChannel: Boolean!\n    $hasSelectedAttributes: Boolean!\n  ) {\n    products(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n      channel: $channel\n    ) {\n      edges {\n        node {\n          ...ProductWithChannelListings\n          updatedAt\n          attributes @include(if: $hasSelectedAttributes) {\n            ...ProductListAttribute\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductCount($filter: ProductFilter, $channel: String) {\n    products(filters: $filter, channel: $channel) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ProductCount($filter: ProductFilter, $channel: String) {\n    products(filters: $filter, channel: $channel) {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductDetails(\n    $id: ID!\n    $channel: String\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    product(id: $id, channel: $channel) {\n      ...Product\n    }\n  }\n"): (typeof documents)["\n  query ProductDetails(\n    $id: ID!\n    $channel: String\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    product(id: $id, channel: $channel) {\n      ...Product\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductKlass(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    productKlass(id: $id) {\n      id\n      name\n      hasVariants\n      productAttributes {\n        id\n        inputType\n        entityType\n        slug\n        name\n        valueRequired\n        unit\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      taxClass {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductKlass(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    productKlass(id: $id) {\n      id\n      name\n      hasVariants\n      productAttributes {\n        id\n        inputType\n        entityType\n        slug\n        name\n        valueRequired\n        unit\n        values(\n          first: $firstValues\n          after: $afterValues\n          last: $lastValues\n          before: $beforeValues\n        ) {\n          ...ValueList\n        }\n      }\n      taxClass {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductVariantDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    productVariant(id: $id) {\n      ...Product\n    }\n  }\n"): (typeof documents)["\n  query ProductVariantDetails(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    productVariant(id: $id) {\n      ...Product\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductCreateData(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    product(id: $id) {\n      id\n      media {\n        id\n        sortOrder\n        url\n      }\n      channelListings {\n        id\n        isPublished\n        publishedAt\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n      name\n      productKlass {\n        id\n        # TODO\n        # selectionVariantAttributes: variantAttributes(variantSelection: \"VARIANT_SELECTION\") {\n        #   ...ProductAttribute\n        # }\n        # nonSelectionVariantAttributes: variantAttributes(\n        #   variantSelection: \"NOT_VARIANT_SELECTION\"\n        # ) {\n        #   ...ProductAttribute\n        # }\n      }\n      thumbnail {\n        url\n      }\n      defaultVariant {\n        id\n      }\n      variants {\n        id\n        name\n        ... on ConcreteProduct {\n          sku\n        }\n        media {\n          id\n          url\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductCreateData(\n    $id: ID!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    product(id: $id) {\n      id\n      media {\n        id\n        sortOrder\n        url\n      }\n      channelListings {\n        id\n        isPublished\n        publishedAt\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n      name\n      productKlass {\n        id\n        # TODO\n        # selectionVariantAttributes: variantAttributes(variantSelection: \"VARIANT_SELECTION\") {\n        #   ...ProductAttribute\n        # }\n        # nonSelectionVariantAttributes: variantAttributes(\n        #   variantSelection: \"NOT_VARIANT_SELECTION\"\n        # ) {\n        #   ...ProductAttribute\n        # }\n      }\n      thumbnail {\n        url\n      }\n      defaultVariant {\n        id\n      }\n      variants {\n        id\n        name\n        ... on ConcreteProduct {\n          sku\n        }\n        media {\n          id\n          url\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductMediaById($productId: ID!, $mediaItemId: ID!) {\n    product(id: $productId) {\n      id\n      name\n      mainImage: mediaById(id: $mediaItemId) {\n        id\n        alt\n        url\n        type\n        oembedData\n      }\n      media {\n        id\n        url(size: 48)\n        alt\n        type\n        oembedData\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductMediaById($productId: ID!, $mediaItemId: ID!) {\n    product(id: $productId) {\n      id\n      name\n      mainImage: mediaById(id: $mediaItemId) {\n        id\n        alt\n        url\n        type\n        oembedData\n      }\n      media {\n        id\n        url(size: 48)\n        alt\n        type\n        oembedData\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GridAttributes($ids: [ID!]!) {\n    grid: attributes(first: 25, filters: { ids: $ids }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GridAttributes($ids: [ID!]!) {\n    grid: attributes(first: 25, filters: { ids: $ids }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchAvailableInGridAttributes($first: Int!, $after: String, $query: String!) {\n    availableInGrid: attributes(\n      first: $first\n      after: $after\n      filters: { isVariantOnly: false, type: PRODUCT_TYPE, search: $query }\n    ) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query SearchAvailableInGridAttributes($first: Int!, $after: String, $query: String!) {\n    availableInGrid: attributes(\n      first: $first\n      after: $after\n      filters: { isVariantOnly: false, type: PRODUCT_TYPE, search: $query }\n    ) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchAvailablePageAttributes(\n    $id: ID!\n    $after: String\n    $first: Int!\n    $query: String!\n  ) {\n    pageKlass(id: $id) {\n      id\n      availableAttributes(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...AvailableAttribute\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchAvailablePageAttributes(\n    $id: ID!\n    $after: String\n    $first: Int!\n    $query: String!\n  ) {\n    pageKlass(id: $id) {\n      id\n      availableAttributes(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...AvailableAttribute\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchAvailableProductAttributes(\n    $id: ID!\n    $after: String\n    $first: Int!\n    $query: String!\n  ) {\n    productKlass(id: $id) {\n      id\n      availableAttributes(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...AvailableAttribute\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchAvailableProductAttributes(\n    $id: ID!\n    $after: String\n    $first: Int!\n    $query: String!\n  ) {\n    productKlass(id: $id) {\n      id\n      availableAttributes(after: $after, first: $first, filters: { search: $query }) {\n        edges {\n          node {\n            ...AvailableAttribute\n          }\n        }\n        pageInfo {\n          ...PageInfo\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchCategories($after: String, $first: Int!, $query: String!) {\n    search: categories(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchCategories($after: String, $first: Int!, $query: String!) {\n    search: categories(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchCollections($after: String, $first: Int!, $query: String!) {\n    search: collections(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchCollections($after: String, $first: Int!, $query: String!) {\n    search: collections(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchGiftCardTags(\n    $query: String!\n    $first: Int!\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    search: giftCardTags(\n      filters: { search: $query }\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchGiftCardTags(\n    $query: String!\n    $first: Int!\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    search: giftCardTags(\n      filters: { search: $query }\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchGroups($after: String, $first: Int!, $query: String!) {\n    search: groups(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n          userCanManage\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchGroups($after: String, $first: Int!, $query: String!) {\n    search: groups(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n          userCanManage\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchMedia($after: String, $first: Int!, $query: String!) {\n    search: media(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchMedia($after: String, $first: Int!, $query: String!) {\n    search: media(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchOrderVariant(\n    $channel: String!\n    $first: Int!\n    $query: String!\n    $after: String\n    $address: AddressUpdateInput\n    $isPublished: Boolean\n    $stockAvailability: StockAvailability\n  ) {\n    search: products(\n      first: $first\n      after: $after\n      filters: {\n        search: $query\n        isPublished: $isPublished\n        stockAvailability: $stockAvailability\n      }\n      channel: $channel\n    ) {\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n          variants {\n            id\n            name\n            ...on ConcreteProduct {\n              sku\n            }\n            pricing(address: $address) {\n              priceUndiscounted {\n                gross {\n                  ...Money\n                }\n              }\n              price {\n                gross {\n                  ...Money\n                }\n              }\n              onSale\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchOrderVariant(\n    $channel: String!\n    $first: Int!\n    $query: String!\n    $after: String\n    $address: AddressUpdateInput\n    $isPublished: Boolean\n    $stockAvailability: StockAvailability\n  ) {\n    search: products(\n      first: $first\n      after: $after\n      filters: {\n        search: $query\n        isPublished: $isPublished\n        stockAvailability: $stockAvailability\n      }\n      channel: $channel\n    ) {\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n          variants {\n            id\n            name\n            ...on ConcreteProduct {\n              sku\n            }\n            pricing(address: $address) {\n              priceUndiscounted {\n                gross {\n                  ...Money\n                }\n              }\n              price {\n                gross {\n                  ...Money\n                }\n              }\n              onSale\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchPageKlasses($after: String, $first: Int!, $query: String!) {\n    search: pageKlasses(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchPageKlasses($after: String, $first: Int!, $query: String!) {\n    search: pageKlasses(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchPages($after: String, $first: Int!, $query: String!) {\n    search: pages(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchPages($after: String, $first: Int!, $query: String!) {\n    search: pages(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchProductKlasses($after: String, $first: Int!, $query: String!) {\n    search: productKlasses(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchProductKlasses($after: String, $first: Int!, $query: String!) {\n    search: productKlasses(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchProducts($after: String, $first: Int!, $query: String!) {\n    search: products(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            channelListings {\n              id\n              channel {\n                id\n                isActive\n                name\n                currencyCode\n              }\n              price {\n                amount\n                currency\n              }\n            }\n          }\n          collections {\n            id\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchProducts($after: String, $first: Int!, $query: String!) {\n    search: products(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          name\n          thumbnail {\n            url\n          }\n          variants {\n            id\n            name\n            ... on ConcreteProduct {\n              sku\n            }\n            channelListings {\n              id\n              channel {\n                id\n                isActive\n                name\n                currencyCode\n              }\n              price {\n                amount\n                currency\n              }\n            }\n          }\n          collections {\n            id\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchStaffMembers($after: String, $first: Int!, $query: String!) {\n    search: staffUsers(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n          isActive\n          avatar {\n            alt\n            url\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchStaffMembers($after: String, $first: Int!, $query: String!) {\n    search: staffUsers(after: $after, first: $first, filters: { search: $query }) {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n          isActive\n          avatar {\n            alt\n            url\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchWarehouses($after: String, $first: Int!, $query: String!) {\n    search: warehouses(\n      after: $after\n      first: $first\n      sortBy: { direction: ASC, field: NAME }\n      filters: { search: $query }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchWarehouses($after: String, $first: Int!, $query: String!) {\n    search: warehouses(\n      after: $after\n      first: $first\n      sortBy: { direction: ASC, field: NAME }\n      filters: { search: $query }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteShippingZone($id: ID!) {\n    deleteShippingZone(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteShippingZone($id: ID!) {\n    deleteShippingZone(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation BulkDeleteShippingZone($ids: [ID!]!) {\n    deleteShippingZones(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation BulkDeleteShippingZone($ids: [ID!]!) {\n    deleteShippingZones(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateDefaultWeightUnit($unit: WeightUnit) {\n    updateShopSettings(data: { defaultWeightUnit: $unit }) {\n      errors {\n        ...Error\n      }\n      result {\n        defaultWeightUnit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateDefaultWeightUnit($unit: WeightUnit) {\n    updateShopSettings(data: { defaultWeightUnit: $unit }) {\n      errors {\n        ...Error\n      }\n      result {\n        defaultWeightUnit\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateShippingZone($input: ShippingZoneCreationInput!) {\n    createShippingZone(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        countries {\n          ...Country\n        }\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateShippingZone($input: ShippingZoneCreationInput!) {\n    createShippingZone(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        countries {\n          ...Country\n        }\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateShippingZone($id: ID!, $input: ShippingZoneUpdateInput!) {\n    updateShippingZone(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        countries {\n          ...Country\n        }\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateShippingZone($id: ID!, $input: ShippingZoneUpdateInput!) {\n    updateShippingZone(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        countries {\n          ...Country\n        }\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateShippingRate($id: ID!, $input: ShippingPriceInput!) {\n    updateShippingPrice(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingMethod {\n          ...ShippingMethod\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateShippingRate($id: ID!, $input: ShippingPriceInput!) {\n    updateShippingPrice(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingMethod {\n          ...ShippingMethod\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateShippingRate($input: ShippingPriceInput!) {\n    createShippingPrice(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingZone {\n          ...ShippingZoneDetails\n        }\n        shippingMethod {\n          ...ShippingMethod\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateShippingRate($input: ShippingPriceInput!) {\n    createShippingPrice(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingZone {\n          ...ShippingZoneDetails\n        }\n        shippingMethod {\n          ...ShippingMethod\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteShippingRate($id: ID!) {\n    deleteShippingPrice(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingZone {\n          ...ShippingZoneDetails\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteShippingRate($id: ID!) {\n    deleteShippingPrice(id: $id) {\n      errors {\n        ...Error\n      }\n      result {\n        shippingZone {\n          ...ShippingZoneDetails\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation BulkDeleteShippingRate($ids: [ID!]!) {\n    deleteShippingPrices(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation BulkDeleteShippingRate($ids: [ID!]!) {\n    deleteShippingPrices(ids: $ids) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ShippingMethodChannelListingUpdate(\n    $id: ID!\n    $input: ShippingMethodChannelListingInput!\n  ) {\n    updateShippingMethodChannelListing(id: $id, data: $input) {\n      shippingMethod {\n        ...ShippingMethod\n      }\n      errors {\n        ...ShippingChannelsError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ShippingMethodChannelListingUpdate(\n    $id: ID!\n    $input: ShippingMethodChannelListingInput!\n  ) {\n    updateShippingMethodChannelListing(id: $id, data: $input) {\n      shippingMethod {\n        ...ShippingMethod\n      }\n      errors {\n        ...ShippingChannelsError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ShippingPriceExcludeProduct(\n    $id: ID!\n    $input: ShippingPriceExcludeProductsInput!\n  ) {\n    excludeProductsFromShippingPrice(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ShippingPriceExcludeProduct(\n    $id: ID!\n    $input: ShippingPriceExcludeProductsInput!\n  ) {\n    excludeProductsFromShippingPrice(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ShippingPriceRemoveProductFromExclude($id: ID!, $products: [ID!]!) {\n    removeProductFromShippingPriceExclusionList(id: $id, products: $products) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ShippingPriceRemoveProductFromExclude($id: ID!, $products: [ID!]!) {\n    removeProductFromShippingPriceExclusionList(id: $id, products: $products) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShippingZones($first: Int, $after: String, $last: Int, $before: String) {\n    shippingZones(first: $first, after: $after, last: $last, before: $before) {\n      edges {\n        node {\n          ...ShippingZone\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShippingZones($first: Int, $after: String, $last: Int, $before: String) {\n    shippingZones(first: $first, after: $after, last: $last, before: $before) {\n      edges {\n        node {\n          ...ShippingZone\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShippingZone($id: ID!, $before: String, $after: String, $first: Int, $last: Int) {\n    shippingZone(id: $id) {\n      ...ShippingZone\n      default\n      shippingMethods {\n        ...ShippingMethodWithExcludedProducts\n      }\n      channels {\n        id\n        name\n        currencyCode\n      }\n      warehouses {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShippingZone($id: ID!, $before: String, $after: String, $first: Int, $last: Int) {\n    shippingZone(id: $id) {\n      ...ShippingZone\n      default\n      shippingMethods {\n        ...ShippingMethodWithExcludedProducts\n      }\n      channels {\n        id\n        name\n        currencyCode\n      }\n      warehouses {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShippingZoneChannels($id: ID!) {\n    shippingZone(id: $id) {\n      id\n      channels {\n        id\n        name\n        currencyCode\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShippingZoneChannels($id: ID!) {\n    shippingZone(id: $id) {\n      id\n      channels {\n        id\n        name\n        currencyCode\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChannelShippingZones($filter: ShippingZoneFilter) {\n    shippingZones(filters: $filter, first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ChannelShippingZones($filter: ShippingZoneFilter) {\n    shippingZones(filters: $filter, first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShippingZonesCount {\n    shippingZones {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ShippingZonesCount {\n    shippingZones {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ShopSettingsUpdate(\n    $shopSettingsInput: ShopSettingsUpdateInput!\n    $addressInput: AddressUpdateInput!\n  ) {\n    updateShopSettings(data: $shopSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Shop\n      }\n    }\n    updateShopAddress(data: $addressInput) {\n      errors {\n        ...Error\n      }\n      result {\n        companyAddress {\n          ...Address\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ShopSettingsUpdate(\n    $shopSettingsInput: ShopSettingsUpdateInput!\n    $addressInput: AddressUpdateInput!\n  ) {\n    updateShopSettings(data: $shopSettingsInput) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Shop\n      }\n    }\n    updateShopAddress(data: $addressInput) {\n      errors {\n        ...Error\n      }\n      result {\n        companyAddress {\n          ...Address\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SiteSettings {\n    shop {\n      ...Shop\n    }\n  }\n"): (typeof documents)["\n  query SiteSettings {\n    shop {\n      ...Shop\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StaffMemberAdd($input: StaffCreationInput!) {\n    createStaffMember(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...StaffMemberDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation StaffMemberAdd($input: StaffCreationInput!) {\n    createStaffMember(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...StaffMemberDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StaffMemberUpdate($id: ID!, $input: StaffUpdateInput!) {\n    updateStaffMember(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...StaffMemberDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation StaffMemberUpdate($id: ID!, $input: StaffUpdateInput!) {\n    updateStaffMember(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...StaffMemberDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StaffMemberDelete($id: ID!) {\n    deleteStaffMember(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation StaffMemberDelete($id: ID!) {\n    deleteStaffMember(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StaffAvatarUpdate($image: Upload!) {\n    updateUserAvatar(image: $image) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        avatar {\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation StaffAvatarUpdate($image: Upload!) {\n    updateUserAvatar(image: $image) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        avatar {\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StaffAvatarDelete {\n    deleteUserAvatar {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        avatar {\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation StaffAvatarDelete {\n    deleteUserAvatar {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        avatar {\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangeStaffPassword($newPassword: String!, $oldPassword: String!) {\n    changePassword(newPassword: $newPassword, oldPassword: $oldPassword) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChangeStaffPassword($newPassword: String!, $oldPassword: String!) {\n    changePassword(newPassword: $newPassword, oldPassword: $oldPassword) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StaffList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: StaffUserFilter\n    $sort: UserOrderingInput\n  ) {\n    staffUsers(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        cursor\n        node {\n          ...StaffMember\n          avatar(size: 48) {\n            url\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query StaffList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: StaffUserFilter\n    $sort: UserOrderingInput\n  ) {\n    staffUsers(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        cursor\n        node {\n          ...StaffMember\n          avatar(size: 48) {\n            url\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StaffMemberDetails($id: ID!) {\n    user(id: $id) {\n      ...StaffMemberDetails\n    }\n  }\n"): (typeof documents)["\n  query StaffMemberDetails($id: ID!) {\n    user(id: $id) {\n      ...StaffMemberDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TaxConfigurationUpdate($id: ID!, $input: TaxConfigurationUpdateInput!) {\n    updateTaxConfiguration(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxConfiguration\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TaxConfigurationUpdate($id: ID!, $input: TaxConfigurationUpdateInput!) {\n    updateTaxConfiguration(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxConfiguration\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TaxCountryConfigurationUpdate(\n    $countryCode: CountryCode!\n    $updateTaxClassRates: [TaxClassRateInput!]!\n  ) {\n    updateTaxCountryConfiguration(\n      countryCode: $countryCode\n      updateTaxClassRates: $updateTaxClassRates\n    ) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxCountryConfiguration\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TaxCountryConfigurationUpdate(\n    $countryCode: CountryCode!\n    $updateTaxClassRates: [TaxClassRateInput!]!\n  ) {\n    updateTaxCountryConfiguration(\n      countryCode: $countryCode\n      updateTaxClassRates: $updateTaxClassRates\n    ) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxCountryConfiguration\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TaxCountryConfigurationDelete($countryCode: CountryCode!) {\n    deleteTaxCountryConfiguration(countryCode: $countryCode) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxCountryConfiguration\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TaxCountryConfigurationDelete($countryCode: CountryCode!) {\n    deleteTaxCountryConfiguration(countryCode: $countryCode) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxCountryConfiguration\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TaxClassUpdate($id: ID!, $input: TaxClassUpdateInput!) {\n    updateTaxClass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxClass\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TaxClassUpdate($id: ID!, $input: TaxClassUpdateInput!) {\n    updateTaxClass(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxClass\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TaxClassCreate($input: TaxClassCreationInput!) {\n    createTaxClass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxClass\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TaxClassCreate($input: TaxClassCreationInput!) {\n    createTaxClass(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...TaxClass\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TaxClassDelete($id: ID!) {\n    deleteTaxClass(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TaxClassDelete($id: ID!) {\n    deleteTaxClass(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxConfigurationsList(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $filter: TaxConfigurationFilter\n  ) {\n    taxConfigurations(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...TaxConfiguration\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxConfigurationsList(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $filter: TaxConfigurationFilter\n  ) {\n    taxConfigurations(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n    ) {\n      edges {\n        node {\n          ...TaxConfiguration\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxCountriesList {\n    taxCountryConfigurations {\n      ...TaxCountryConfiguration\n    }\n  }\n"): (typeof documents)["\n  query TaxCountriesList {\n    taxCountryConfigurations {\n      ...TaxCountryConfiguration\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxClassesList(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $filter: TaxClassFilter\n    $sortBy: TaxClassOrderingInput\n  ) {\n    taxClasses(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          ...TaxClass\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxClassesList(\n    $before: String\n    $after: String\n    $first: Int\n    $last: Int\n    $filter: TaxClassFilter\n    $sortBy: TaxClassOrderingInput\n  ) {\n    taxClasses(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          ...TaxClass\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxClassAssign($first: Int, $after: String) {\n    taxClasses(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxClassAssign($first: Int, $after: String) {\n    taxClasses(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProductTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateProduct(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            code\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProductTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateProduct(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            code\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCategoryTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateCategory(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCategoryTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateCategory(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCollectionTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateCollection(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCollectionTranslations(\n    $id: ID!\n    $input: TranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateCollection(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        description\n        seoDescription\n        seoTitle\n        translation(languageCode: $language) {\n          id\n          description\n          language {\n            language\n          }\n          name\n          seoDescription\n          seoTitle\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePageTranslations(\n    $id: ID!\n    $input: PageTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translatePage(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        translation(languageCode: $language) {\n          ...PageTranslation\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePageTranslations(\n    $id: ID!\n    $input: PageTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translatePage(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        translation(languageCode: $language) {\n          ...PageTranslation\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAttributeTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateAttribute(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAttributeTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateAttribute(id: $id, data: $input, languageCode: $language) {\n      errors {\n        ...Error\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMenuItemTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateMenuItem(id: $id, data: $input, languageCode: $language) {\n      errors {\n        field\n        message\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMenuItemTranslations(\n    $id: ID!\n    $input: NameTranslationInput!\n    $language: LanguageCode!\n  ) {\n    translateMenuItem(id: $id, data: $input, languageCode: $language) {\n      errors {\n        field\n        message\n      }\n      result {\n        id\n        name\n        translation(languageCode: $language) {\n          id\n          language {\n            language\n          }\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CategoryTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: CATEGORY\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...CategoryTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query CategoryTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: CATEGORY\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...CategoryTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: COLLECTION\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...CollectionTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: COLLECTION\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...CollectionTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: PRODUCT\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...ProductTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: PRODUCT\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...ProductTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(kind: PAGE, before: $before, after: $after, first: $first, last: $last) {\n      edges {\n        node {\n          ...PageTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query PageTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(kind: PAGE, before: $before, after: $after, first: $first, last: $last) {\n      edges {\n        node {\n          ...PageTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VoucherTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: VOUCHER\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...VoucherTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query VoucherTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: VOUCHER\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...VoucherTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SaleTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(kind: SALE, before: $before, after: $after, first: $first, last: $last) {\n      edges {\n        node {\n          ...SaleTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SaleTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(kind: SALE, before: $before, after: $after, first: $first, last: $last) {\n      edges {\n        node {\n          ...SaleTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttributeTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: ATTRIBUTE\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...AttributeTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query AttributeTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: ATTRIBUTE\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...AttributeTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShippingMethodTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: SHIPPING_METHOD\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...ShippingMethodTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShippingMethodTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: SHIPPING_METHOD\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...ShippingMethodTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MenuItemTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: MENU_ITEM\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...MenuItemTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query MenuItemTranslations(\n    $language: LanguageCode!\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    translations(\n      kind: MENU_ITEM\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          ...MenuItemTranslation\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: PRODUCT, id: $id) {\n      ...ProductTranslation\n    }\n  }\n"): (typeof documents)["\n  query ProductTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: PRODUCT, id: $id) {\n      ...ProductTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductVariantList($id: ID!) {\n    product(id: $id) {\n      id\n      variants {\n        id\n        name\n        slug\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductVariantList($id: ID!) {\n    product(id: $id) {\n      id\n      variants {\n        id\n        name\n        slug\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductVariantTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: PRODUCT, id: $id) {\n      ...ProductTranslation\n    }\n  }\n"): (typeof documents)["\n  query ProductVariantTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: PRODUCT, id: $id) {\n      ...ProductTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CategoryTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: CATEGORY, id: $id) {\n      ...CategoryTranslation\n    }\n  }\n"): (typeof documents)["\n  query CategoryTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: CATEGORY, id: $id) {\n      ...CategoryTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(id: $id, kind: COLLECTION) {\n      ...CollectionTranslation\n    }\n  }\n"): (typeof documents)["\n  query CollectionTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(id: $id, kind: COLLECTION) {\n      ...CollectionTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(id: $id, kind: PAGE) {\n      ...PageTranslation\n    }\n  }\n"): (typeof documents)["\n  query PageTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(id: $id, kind: PAGE) {\n      ...PageTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SaleTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: SALE, id: $id) {\n      ...SaleTranslation\n    }\n  }\n"): (typeof documents)["\n  query SaleTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: SALE, id: $id) {\n      ...SaleTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VoucherTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: VOUCHER, id: $id) {\n      ...VoucherTranslation\n    }\n  }\n"): (typeof documents)["\n  query VoucherTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: VOUCHER, id: $id) {\n      ...VoucherTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AttributeTranslationDetails(\n    $id: ID!\n    $language: LanguageCode!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    translation(kind: ATTRIBUTE, id: $id) {\n      ...AttributeTranslationDetails\n    }\n  }\n"): (typeof documents)["\n  query AttributeTranslationDetails(\n    $id: ID!\n    $language: LanguageCode!\n    $firstValues: Int\n    $afterValues: String\n    $lastValues: Int\n    $beforeValues: String\n  ) {\n    translation(kind: ATTRIBUTE, id: $id) {\n      ...AttributeTranslationDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShippingMethodTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: SHIPPING_METHOD, id: $id) {\n      ...ShippingMethodTranslation\n    }\n  }\n"): (typeof documents)["\n  query ShippingMethodTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: SHIPPING_METHOD, id: $id) {\n      ...ShippingMethodTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MenuItemTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: MENU_ITEM, id: $id) {\n      ...MenuItemTranslation\n    }\n  }\n"): (typeof documents)["\n  query MenuItemTranslationDetails($id: ID!, $language: LanguageCode!) {\n    translation(kind: MENU_ITEM, id: $id) {\n      ...MenuItemTranslation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMetadata($id: ID!, $input: [MetadataInput!]!, $keysToDelete: [String!]!) {\n    updateMetadata(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Metadata\n        ... on Node {\n          id\n        }\n      }\n    }\n    deleteMetadata(id: $id, keys: $keysToDelete) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Metadata\n        ... on Node {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMetadata($id: ID!, $input: [MetadataInput!]!, $keysToDelete: [String!]!) {\n    updateMetadata(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Metadata\n        ... on Node {\n          id\n        }\n      }\n    }\n    deleteMetadata(id: $id, keys: $keysToDelete) {\n      errors {\n        ...Error\n      }\n      result {\n        ...Metadata\n        ... on Node {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation WarehouseDelete($id: ID!) {\n    deleteWarehouse(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation WarehouseDelete($id: ID!) {\n    deleteWarehouse(id: $id) {\n      errors {\n        ...Error\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation WarehouseCreate($input: WarehouseCreationInput!) {\n    createWarehouse(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...WarehouseDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation WarehouseCreate($input: WarehouseCreationInput!) {\n    createWarehouse(data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...WarehouseDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation WarehouseUpdate($id: ID!, $input: WarehouseUpdateInput!) {\n    updateWarehouse(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...WarehouseDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation WarehouseUpdate($id: ID!, $input: WarehouseUpdateInput!) {\n    updateWarehouse(id: $id, data: $input) {\n      errors {\n        ...Error\n      }\n      result {\n        ...WarehouseDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WarehouseList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: WarehouseFilter\n    $sort: WarehouseOrderingInput\n  ) {\n    warehouses(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...WarehouseWithShipping\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query WarehouseList(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filter: WarehouseFilter\n    $sort: WarehouseOrderingInput\n  ) {\n    warehouses(\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      filters: $filter\n      sortBy: $sort\n    ) {\n      edges {\n        node {\n          ...WarehouseWithShipping\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WarehouseDetails($id: ID!) {\n    warehouse(id: $id) {\n      ...WarehouseDetails\n    }\n  }\n"): (typeof documents)["\n  query WarehouseDetails($id: ID!) {\n    warehouse(id: $id) {\n      ...WarehouseDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WarehousesCount {\n    warehouses {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query WarehousesCount {\n    warehouses {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShopSettings on Site {\n    countries {\n      ...Country\n    }\n    allowedStates\n    defaultCountry {\n      ...Country\n    }\n    defaultWeightUnit\n    domain\n    languages {\n      ...Language\n    }\n    logo {\n      url\n      alt\n      height\n      width\n    }\n    name\n    trackInventoryByDefault\n    maxItemCountPerCheckout\n  }\n"): (typeof documents)["\n  fragment ShopSettings on Site {\n    countries {\n      ...Country\n    }\n    allowedStates\n    defaultCountry {\n      ...Country\n    }\n    defaultWeightUnit\n    domain\n    languages {\n      ...Language\n    }\n    logo {\n      url\n      alt\n      height\n      width\n    }\n    name\n    trackInventoryByDefault\n    maxItemCountPerCheckout\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShopInfo {\n    shop {\n      id\n      ...ShopSettings\n      permissions {\n        code\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShopInfo {\n    shop {\n      id\n      ...ShopSettings\n      permissions {\n        code\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MainMenu($channel: String!) {\n    menu(slug: \"navbar\", channel: $channel) {\n      id\n      items {\n        ...MenuItemWithChildren\n      }\n    }\n  }\n"): (typeof documents)["\n  query MainMenu($channel: String!) {\n    menu(slug: \"navbar\", channel: $channel) {\n      id\n      items {\n        ...MenuItemWithChildren\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GalleryMedia($first: Int) {\n    media(first: $first) {\n      edges {\n        node {\n          id\n          type\n          title\n          alt\n          file {\n            url\n            contentType\n          }\n          width\n          height\n          aspectRatio\n          placeholder\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GalleryMedia($first: Int) {\n    media(first: $first) {\n      edges {\n        node {\n          id\n          type\n          title\n          alt\n          file {\n            url\n            contentType\n          }\n          width\n          height\n          aspectRatio\n          placeholder\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCheckout($email: String, $lines: [CheckoutLineInput!]!, $channel: String!) {\n    createCheckout(data: { channel: $channel, email: $email, lines: $lines }) {\n      result {\n        id\n      }\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCheckout($email: String, $lines: [CheckoutLineInput!]!, $channel: String!) {\n    createCheckout(data: { channel: $channel, email: $email, lines: $lines }) {\n      result {\n        id\n      }\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductBySlug($slug: String!, $channel: String!) {\n    product(slug: $slug, channel: $channel) {\n      ...ProductDetails\n    }\n  }\n"): (typeof documents)["\n  query ProductBySlug($slug: String!, $channel: String!) {\n    product(slug: $slug, channel: $channel) {\n      ...ProductDetails\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;